///////////////////////////////////////////////////////////
//  Element_User.cs
//  Implementation of the Class Element_User
//  Generated by Enterprise Architect
//  Created on:      23-Jan-2019 17:22:55
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System.Data.OleDb;
using Requirement_Plugin.Interfaces;
using System.Globalization;
using Database_Connection;
using Repsoitory_Elements;
using Requirements;

using Requirement_Plugin;

namespace Elements
{
	public class Element_User : Element_Functional {

		public List<Stakeholder> m_Client_ST;
        public List<Target_Stakeholder> m_Target_User;
        public List<Requirement_User> m_Requirement_User;

        public Element_User(){

            this.m_Target_User = new List<Target_Stakeholder>();
            this.m_Client_ST = new List<Stakeholder>();
            this.m_Requirement_User = new List<Requirement_User>();

		}

		~Element_User(){

		}
        #region Check Elements


        /// <summary>
        /// Es wird überprüft, ob das Element_Functional ein Target mit dem Client und Supplier vorhanden ist.
        /// </summary>
        /// <param name="Client_GUID"></param>
        /// <param name="Supplier_GUID"></param>
        /// <returns></returns>
        public Target_Stakeholder Check_Target_User(string Client_GUID, string Supplier_GUID)
        {
            if (this.m_Target_Functional.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (this.m_Target_User[i1].CLient_ID == Client_GUID && this.m_Target_User[i1].Client_ST == Supplier_GUID)
                    {
                        return (this.m_Target_User[i1]);
                    }

                    i1++;
                } while (i1 < this.m_Target_Functional.Count);
            }

            return (null);
        }

        public void Check_For_Requirement_User(EA.Repository repository, Database database)
        {
            DB_Command command = new DB_Command();

            if (this.Client != null && this.Supplier != null && this.m_Client_ST != null)
            {
               // XML xML = new XML();
                TaggedValue taggedValue = new TaggedValue(database.metamodel, database);
                List<string> m_Type_requser = database.metamodel.m_Requirement_User.Select(x => x.Type).ToList();
                List<string> m_Stereotype_requser = database.metamodel.m_Requirement_User.Select(x => x.Stereotype).ToList();
                List<string> m_Type_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
                List<string> m_Stereotype_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
                ////////////////////////////////////////////////////
                //Class-->Activity --> kein Target vorhanden
                Interface_Connectors_Requirement interface_Connectors = new Interface_Connectors_Requirement();
                #region Client
                List<string> help_guid = new List<string>();
                help_guid.Add(this.Client.Classifier_ID);
                help_guid.AddRange(this.m_Target_User.Select(x => x.CLient_ID).ToList());
                List<string> NodeType_Requ = new List<string>();
                NodeType_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_guid, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem, database.metamodel.m_Derived_Element[0].direction);
              
                #endregion Client

                #region Supplier
                List<string> Activity_Requ = new List<string>();
                List<string> help_guid2 = new List<string>();
                help_guid2.Add(this.Supplier.Classifier_ID);
                help_guid2.AddRange(this.m_Target_User.Select(x => x.Supplier_ID).ToList());
                Activity_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_guid2, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem, database.metamodel.m_Derived_Element[0].direction);
               
                #endregion Supplier

                #region Stakeholder

                List<string> m_guid_ST = new List<string>();
                if (this.m_Client_ST.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        m_guid_ST.Add(this.m_Client_ST[i1].Classifier_ID);

                        i1++;
                    } while (i1 < this.m_Client_ST.Count);
                }
                else
                {
                    m_guid_ST.Add("---"); //zur Sicherheit, damit keine null ausgegeben wird
                }

                /*    var SQL_Stakeholder = "SELECT ea_guid FROM t_object WHERE Object_Type IN"+xML.SQL_IN_Array(m_Type_requser.ToArray())+" AND Stereotype IN"+xML.SQL_IN_Array(m_Stereotype_requser.ToArray())+" AND Object_ID IN( SELECT Start_Object_ID FROM t_connector WHERE Stereotype IN" + xML.SQL_IN_Array(m_Stereotype_DerivedElem.ToArray()) + " AND Connector_Type IN" + xML.SQL_IN_Array(m_Type_DerivedElem.ToArray()) + " AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid IN" + xML.SQL_IN_Array(m_guid_ST.ToArray()) + "));";
                    string xml_String_3 = repository.SQLQuery(SQL_Stakeholder);
                    List<string> Stakeholder_Requ = xML.Xml_Read_Attribut("ea_guid", xml_String_3);
                    */
                List<string> Stakeholder_Requ = new List<string>();

                Stakeholder_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid_ST, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem, database.metamodel.m_Derived_Element[0].direction);

              
                #endregion Stakeholder



                if (NodeType_Requ != null && Activity_Requ != null && Stakeholder_Requ != null)
                {
                    int i1 = 0;
                    do
                    {
                        if (Activity_Requ.Contains(NodeType_Requ[i1]))
                        {
                            int i2 = 0;
                            do
                            {
                                if (Stakeholder_Requ.Contains(Activity_Requ[i2]) && Stakeholder_Requ.Contains(NodeType_Requ[i1]))
                                {
                                    Requirement_User requirement_User = new Requirement_User(" ", " ", " ", " ", " ", " ", true, " ", true, " ", null, database.metamodel);
                                    requirement_User.Classifier_ID = NodeType_Requ[i1];
                                    requirement_User.Get_Tagged_Values_From_Requirement(NodeType_Requ[i1], repository, database);
                                   

                                    requirement_User.Add_to_Database(database);

                                    if (this.m_Requirement_User.Contains(requirement_User) == false)
                                    {
                                        //Zuordnung Element_Functional zu einer Capability
                                        Check_For_Capability_User(repository, database, this.m_Requirement_User.Count - 1);
                                        this.m_Requirement_User.Add(requirement_User);
                                        //Check Issue
                                        requirement_User.Get_Issues(database);
                                        //Check Klärungspunkte
                                        requirement_User.Check_Klärungspunkte(requirement_User.m_Issues, database, repository);

                                    }
                                }

                                i2++;
                            } while (i2 < Activity_Requ.Count);


                        }

                        i1++;
                    } while (i1 < NodeType_Requ.Count);
                }
                //////////////////////////////////////////////////////////
                //Nun alle Targets
                if (this.m_Target_User.Count > 0)
                {
                    int i2 = 0;
                    do
                    {
                        this.m_Target_User[i2].Check_For_Requirement_User(repository, database, this);

                        i2++;
                    } while (i2 < this.m_Target_User.Count);
                }
                //Capability
                if(this.m_Requirement_User.Count > 0)
                {
                    int i3 = 0;
                    do
                    {

                        this.m_Requirement_User[i3].Check_Capability(repository, database);

                        i3++;
                    } while (i3 < this.m_Requirement_User.Count);
                }

            }
        }

        public List<string> Get_Stakheolder_GUID()
        {
            List<string> m_ret = new List<string>();

            if(this.m_Client_ST.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if(m_ret.Contains(this.m_Client_ST[i1].Classifier_ID) == false)
                    {
                        m_ret.Add(this.m_Client_ST[i1].Classifier_ID);
                    }


                    i1++;
                } while (i1 < this.m_Client_ST.Count);

            }
            if(this.m_Target_User.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (m_ret.Contains(this.m_Target_User[i1].Client_ST) == false)
                    {
                        m_ret.Add(this.m_Target_User[i1].Client_ST);
                    }


                    i1++;
                } while (i1 < this.m_Target_User.Count);
            }

            return (m_ret);
        }
        public void Check_For_Capability_User(EA.Repository repository, Database database, int index)
        {
            Capability capability = null;
        //    XML xML = new XML();
            List<string> m_Type_DerivedCap = database.metamodel.m_Derived_Capability.Select(x => x.Type).ToList();
            List<string> m_Stereotype_DerivedCap = database.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList();
            List<string> m_Capability_Type = database.metamodel.m_Capability.Select(x => x.Type).ToList();
            List<string> m_Capability_Stereotype = database.metamodel.m_Capability.Select(x => x.Stereotype).ToList();

            if (this.m_Requirement_Functional.Count > 0)
            {
                Interface_Connectors interface_Connectors = new Interface_Connectors();
                List<string> help_guid = new List<string>();
                help_guid.Add(this.m_Requirement_Functional[index].Classifier_ID);
                List<string> GUID = interface_Connectors.Get_Supplier_Element_By_Connector(database, help_guid, m_Capability_Type, m_Capability_Stereotype, m_Type_DerivedCap, m_Stereotype_DerivedCap);


                /*  var SQL = "SELECT ea_guid FROM t_object WHERE Object_Type IN"+xML.SQL_IN_Array(m_Capability_Type.ToArray())+" AND Stereotype IN"+xML.SQL_IN_Array(m_Capability_Stereotype.ToArray())+" AND Object_ID IN( SELECT End_Object_ID FROM t_connector WHERE Stereotype IN" + xML.SQL_IN_Array(m_Stereotype_DerivedCap.ToArray()) + " AND Connector_Type IN" + xML.SQL_IN_Array(m_Type_DerivedCap.ToArray()) + " AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = '" + this.m_Requirement_Functional[index].Classifier_ID + "'));";

                  string Name = this.m_Requirement_User[index].Get_Name(database);

                  string xml_String = repository.SQLQuery(SQL);
                  List<string> GUID = xML.Xml_Read_Attribut("ea_guid", xml_String);
                  */
                if (GUID != null)
                {
                    Capability cap = database.Check_Capability_Database(GUID[0]);

                    if (cap != null)
                    {

                        this.Capability = cap;
                        if (this.m_Requirement_User[index].m_Capability.Contains(cap) == false)
                        {
                            this.m_Requirement_User[index].m_Capability.Add(cap);
                        }

                    }
                }


            }
        }
        #endregion Check Elements

        #region Create Elements
        public bool Create_Target_User(string Client_GUID, string Supplier_GUID, EA.Repository repository, Database database)
        {
            if (Client_GUID != null && Supplier_GUID != null)
            {
                Target_Stakeholder recent = new Target_Stakeholder();
                recent.CLient_ID = Client_GUID;
                recent.Client_ST = Supplier_GUID;

                //Hier müsste noch die Activity gesucht werden
                //Hier müsste noch die Querverbindung zum Element_Functional gemacht werden --> oder später wenn Element_Functional erstellt wird

                Repository_Element rep = new Repository_Element();

                //MessageBox.Show(rep.Get_Name_t_object_GUID(repository));

                //Logical erhalten 
                /* Logical logical = recent.Get_Logical(Client_GUID, Supplier_GUID, repository, database);
                 //        var theElement = repository.GetElementByGuid(Supplier_GUID);
                 //        var theElement2 = repository.GetElementByGuid(Client_GUID);
                 //                MessageBox.Show(theElement2.Name + " --> " + theElement.Name);

                 if (logical != null && this.m_Logical.Contains(logical) == false)
                 {
                     this.m_Logical.Add(logical);
                 }
                 
    */
                this.m_Target_User.Add(recent);

                return (true);
            }

            return (false);
        }
        #endregion Create ELements

        #region Copy
        public Element_User Copy_element_User(NodeType Target, EA.Repository repository, Requirement_Plugin.Database database)
        {
            Element_User element_Functional = new Element_User();
            element_Functional.Supplier = this.Supplier;

            element_Functional.Supplier.m_Element_User.Add(element_Functional);

            element_Functional.Client = Target;
            element_Functional.m_Client_ST = this.m_Client_ST;
            // element_Functional.m_Target_Functional = this.m_Target_Functional;
            if (this.m_Target_User.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Target_Stakeholder target = new Target_Stakeholder();
                    target.CLient_ID = Target.Classifier_ID;
                    target.Supplier_ID = this.m_Target_User[i1].Supplier_ID;
                    target.Client_ST = this.m_Target_User[i1].Client_ST;

                    element_Functional.m_Target_User.Add(target);

                    i1++;
                } while (i1 < this.m_Target_User.Count);
            }
            if (this.m_element_Processes.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Element_Process element_Process = new Element_Process(this.m_element_Processes[i1].activity, this.m_element_Processes[i1].OpConstraint, this.m_element_Processes[i1].flag_Activity);
                    element_Process.m_Action_ID = this.m_element_Processes[i1].m_Action_ID;
                    element_Process.m_Node_ID.Add(Target.Classifier_ID);

                    element_Process.Check_Requirement_Process(database, repository);

                    element_Functional.m_element_Processes.Add(element_Process);


                    i1++;
                } while (i1 < this.m_element_Processes.Count);
            }
            //Measurements
            //Measurements
            if (this.m_element_measurement.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Element_Measurement element_Measurement = new Element_Measurement(this.m_element_measurement[i1].Measurement, database);
                    element_Measurement.m_guid_Instanzen.Add(Target.Classifier_ID);

                    element_Measurement.Check_For_Requirement(1, repository, database, this.Supplier, this.Client);

                    element_Functional.m_element_measurement.Add(element_Measurement);

                    i1++;
                } while (i1 < this.m_element_measurement.Count);


            }

            element_Functional.Capability = this.Capability;

            element_Functional.m_Logical = this.m_Logical;

            //Anforderung überprüfen
            element_Functional.Check_For_Requirement_User(repository, database);

            return (element_Functional);
        }
        #endregion

        #region Get

        public List<Target_Stakeholder> Check_Target_ByClient(List<string> m_client)
        {
            List<Target_Stakeholder> m_ret = new List<Target_Stakeholder>();

            m_client = m_client.Distinct().ToList();

            if (m_client.Count > 0)
            {
                int i1 = 0;
                do
                {
                    List<Target_Stakeholder> m_help = this.m_Target_User.Where(x => x.CLient_ID == m_client[i1]).ToList();

                    if (m_help.Count > 0)
                    {
                        m_ret.AddRange(m_help);
                    }

                    i1++;
                } while (i1 < m_client.Count);
            }

            return (m_ret);
        }
        public List<string> Get_Client_GUID_Target_User()
        {
            List<string> m_GUID = new List<string>();

            int i1 = 0;
            do
            {
                if (m_GUID.Contains(this.m_Target_User[i1].CLient_ID) == false)
                {
                    m_GUID.Add(this.m_Target_User[i1].CLient_ID);
                }

                i1++;
            } while (i1 < this.m_Target_User.Count);

            if (m_GUID.Contains(this.Client.Classifier_ID) == false)
            {
                m_GUID.Add(this.Client.Classifier_ID);
            }

            return (m_GUID);

        }

        public List<string> Get_Supplier_GUID_Target_User()
        {
            List<string> m_GUID = new List<string>();

            int i1 = 0;
            do
            {
                if (m_GUID.Contains(this.m_Target_User[i1].Supplier_ID) == false)
                {
                    m_GUID.Add(this.m_Target_User[i1].Supplier_ID);
                }

                i1++;
            } while (i1 < this.m_Target_User.Count);

            if (m_GUID.Contains(this.Supplier.Classifier_ID) == false)
            {
                m_GUID.Add(this.Supplier.Classifier_ID);
            }

            return (m_GUID);
        }
        #endregion

        #region Transform
        public List<Element_Measurement> Transform_Node_User_Element_Measurement(List<string> m_Node_ID2, SysElement sys, Requirement_Plugin.Database database)
        {
            List<Element_Measurement> m_ret = new List<Element_Measurement>();

            //List<Element_Process> m_save = this.m_element_Processes;

            if (this.m_element_measurement.Count > 0)
            {
                int i1 = 0;
                do
                {
                    List<Element_User> m_help = sys.m_Element_User.Where(x => x.Supplier == this.Supplier).ToList();

                    if (m_help[0].m_element_measurement.Select(y => y.Measurement.Classifier_ID).Contains(this.m_element_measurement[i1].Measurement.Classifier_ID) == false)
                    {
                        Element_Measurement element_Measurement = new Element_Measurement(this.m_element_measurement[i1].Measurement, database);
                        element_Measurement.m_guid_Instanzen = this.m_element_measurement[i1].m_guid_Instanzen;
                        element_Measurement.m_requirement = this.m_element_measurement[i1].m_requirement;

                        m_help[0].m_element_measurement.Add(element_Measurement);

                    }

                    /*     List<string> m_help2 = m_element_Processes[i1].m_Node_ID.Intersect(m_Node_ID2).ToList();

                         //Noch nicht vorhanden
                         if (m_ret.Select(x => x.OpConstraint.Classifier_ID).Contains(m_element_Processes[i1].OpConstraint.Classifier_ID) == false)
                         {
                             if (m_help2.Count > 0)
                             {
                                 Element_Process element_Process = new Element_Process(m_element_Processes[i1].activity, m_element_Processes[i1].OpConstraint, m_element_Processes[i1].flag_Activity);
                                 element_Process.capability = m_element_Processes[i1].capability;
                                 element_Process.m_Action_ID = m_element_Processes[i1].m_Action_ID.Intersect(this.m_Target_Functional.Select(x => x.Supplier_ID).ToList()).ToList();
                                 element_Process.m_GUID_Client = m_element_Processes[i1].m_GUID_Client.Intersect(this.m_Target_Functional.Select(x => x.CLient_ID).ToList()).ToList();
                                 element_Process.m_Node_ID = m_help2;
                                 element_Process.Requirement_Process = m_element_Processes[i1].Requirement_Process;

                                 m_ret.Add(element_Process);
                             }
                         }
                         else//Vorhanden
                         {
                             List<Element_Process> m_process = m_ret.Where(x => x.OpConstraint.Classifier_ID == m_element_Processes[i1].OpConstraint.Classifier_ID).ToList();

                             if (m_process.Count > 0)
                             {
                                 m_process[0].m_Action_ID.AddRange(m_element_Processes[i1].m_Action_ID);
                                 m_process[0].m_Action_ID.Distinct();
                                 m_process[0].m_GUID_Client.AddRange(m_element_Processes[i1].m_Action_ID);
                                 m_process[0].m_GUID_Client.Distinct();
                                 m_process[0].m_Node_ID.AddRange(m_element_Processes[i1].m_Action_ID);
                                 m_process[0].m_Node_ID.Distinct();
                             }

                         }
                    */
                    i1++;
                } while (i1 < this.m_element_measurement.Count);
            }

            m_ret = sys.m_Element_User.Where(y => y.Supplier == this.Supplier).SelectMany(x => x.m_element_measurement).ToList();

            return (m_ret);
        }
        #endregion

        public void Create_Requirement_User(EA.Repository repository, Requirement_Plugin.Database database, string Package_GUID)
        {
            TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

            if (this.m_Requirement_User.Count == 0)
            {
                #region AFO_Parameter
                //W_Object
                string W_Object = this.Supplier.W_Object;
                //W_Prozesswort
                string W_Prozesswort = this.Supplier.W_Prozesswort;
                //W_Qualitaet
                string W_Qualitaet = "";
                //W_Randbedingung
                string W_Randbedingung = "";
                //W_Singular
                bool W_Singular = true;
                //W_Subject
                string W_Subject = this.Client.W_Artikel + " " + this.Client.Name;
                //W_Zu
                bool W_zu = false;
                //recent_guid
                string recent_guid = "";
                //W_Nutzender
                string W_Nutzender = "dem Nutzer";
                //Titel
                string Titel = this.Client.Name + " - " + W_Prozesswort + " " + W_Object;
                //Text
                string AFO_Text = "";

                if (W_Singular == true)
                {
                    AFO_Text = ti.ToTitleCase(this.Client.W_Artikel) + " " + Client.Name + " " + database.metamodel.m_Verbindlichkeit[0] +" " + W_Nutzender+ " die Möglichkeit bieten, "+ W_Object + " zu " + W_Prozesswort + ".";
                }
                else
                {
                    AFO_Text = ti.ToTitleCase(this.Client.W_Artikel) + " " + Client.Name + " " + database.metamodel.m_Verbindlichkeit[1] + " " + W_Nutzender + " die Möglichkeit bieten, " + W_Object + " zu " + W_Prozesswort + ".";
                }
              
                #endregion

                #region AFO Erzeugung
                Requirement_User requirement_User = new Requirement_User(Titel, AFO_Text, W_Object, W_Prozesswort, W_Qualitaet, W_Randbedingung, W_Singular, W_Subject, W_zu, W_Nutzender, recent_guid, database.metamodel);

                /*    Requirement_Functional requirement_Functional = new Requirement_Functional(Titel, AFO_Text, W_Object, W_Prozesswort, W_Qualitaet, W_Randbedingung, W_Singular, W_Subject, W_zu, recent_guid);
                    requirement_Functional.Classifier_ID = requirement_Functional.Create_Requirement_funktional(repository, Package_GUID, database.metamodel.m_Requirement_Functional.Select(x => x.Stereotype).ToList()[0], database);
                  */
                requirement_User.Create_Requirement_User(repository, Package_GUID, database.metamodel.m_Requirement_User.Select(x => x.Stereotype).ToList()[0], database);
                this.m_Requirement_User.Add(requirement_User);
                #endregion AFO Erzeugung
                #region Konnektoren anlegen

                #region NodeType
                //NodeType
                Create_Connectoren_NodeType(database, repository);
                #endregion
                //Activity
                #region Activity 
                Create_Connectoren_Activity(database, repository);
                #endregion
                #region Stakeholder
                Create_Connectoren_Stakeholder(database, repository);
                #endregion 
                //Parent Anforderung
                #region Parent AFO
                Create_Connectoren_Parent(database, repository);
                #endregion
                //Child Anforderung
                #region Child Anforderung
                Create_Connectoren_Child(database, repository);
                #endregion
                //Duplicate mit Element User, welche selbe Activität und NodeType haben
                #region Duplicate
                Create_Connectoren_Duplicate_User(database, repository);

                Create_Connectoren_Duplicate_User_Generalisierung(database, repository);
                #endregion

                #region Requirement Process hinzufügen
                Create_Connectoren_Process(database, repository);
                #endregion
                #endregion
            }
        }

        public void Update_Connetoren_Requirement_User(EA.Repository repository, Requirement_Plugin.Database database)
        {
            #region NodeType
            //NodeType
            Create_Connectoren_NodeType(database, repository);
            #endregion
            //Activity
            #region Activity 
            Create_Connectoren_Activity(database, repository);
            #endregion
            #region Stakeholder
            Create_Connectoren_Stakeholder(database, repository);
            #endregion
            //Parent Anforderung
            #region Parent AFO
            Create_Connectoren_Parent(database, repository);
            #endregion
            //Child Anforderung
            #region Child Anforderung
            Create_Connectoren_Child(database, repository);
            #endregion
            //Duplicate mit Element User, welche selbe Activität und NodeType haben
            #region Duplicate
            Create_Connectoren_Duplicate_User(database, repository);
            Create_Connectoren_Duplicate_User_Generalisierung(database, repository);
            #endregion
            #region Requirement Process hinzufügen
            Create_Connectoren_Process(database, repository);
            #endregion

            #region Maesurement
            this.Create_Refines_Measurement_User(database, repository);
            #endregion 
        }

        #region Connetoren Requirement
        private void Create_Connectoren_NodeType(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_NodeID = this.Get_Client_GUID_Target_User();
            if (m_NodeID.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_NodeID[i1], database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Element.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Element[0].SubType, repository, database, database.metamodel.m_Derived_Element[0].Toolbox, database.metamodel.m_Derived_Element[0].direction);
                    i1++;
                } while (i1 < m_NodeID.Count);
            }
        }
        private void Create_Connectoren_Activity(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_ActionID = this.Get_Supplier_GUID_Target_User();
            if (m_ActionID.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_ActionID[i1], database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Element.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Element[0].SubType, repository, database, database.metamodel.m_Derived_Element[0].Toolbox, database.metamodel.m_Derived_Element[0].direction);
                    i1++;
                } while (i1 < m_ActionID.Count);
            }
        }
        private void Create_Connectoren_Parent(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<Element_Functional> m_parent_func = this.Supplier.m_Parent.SelectMany(x => x.m_Element_Functional).ToList();
            List<Requirement_Functional> m_req_func = m_parent_func.SelectMany(x => x.m_Requirement_Functional).ToList();
            if (m_req_func.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_req_func[i1].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines[0].SubType, repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);

                    i1++;
                } while (i1 < m_req_func.Count);
            }
            //User
            List<Element_User> m_parent_user = this.Supplier.m_Parent.SelectMany(x => x.m_Element_User).ToList();
            List<Requirement_User> m_req_user = m_parent_user.SelectMany(x => x.m_Requirement_User).ToList();
            if (m_req_user.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_req_user[i1].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines[0].SubType, repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);

                    i1++;
                } while (i1 < m_req_user.Count);
            }
        }
        private void Create_Connectoren_Child(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<Element_Functional> m_child_func = this.Supplier.m_Child.SelectMany(x => x.m_Element_Functional).ToList();
            List<Requirement_Functional> m_req_child_func = m_child_func.SelectMany(x => x.m_Requirement_Functional).ToList();
            if (m_req_child_func.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(m_req_child_func[i1].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines[0].SubType, repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);

                    i1++;
                } while (i1 < m_req_child_func.Count);
            }
            //User
            List<Element_User> m_child_user = this.Supplier.m_Child.SelectMany(x => x.m_Element_User).ToList();
            List<Requirement_User> m_req_child_user = m_child_user.SelectMany(x => x.m_Requirement_User).ToList();
            if (m_req_child_user.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(m_req_child_user[i1].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines[0].SubType, repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);

                    i1++;
                } while (i1 < m_req_child_user.Count);
            }
        }
        private void Create_Connectoren_Duplicate_User(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<Element_Functional> m_duplicate = this.Supplier.m_Element_Functional.Where(x => x.Client == this.Client).ToList();
            List<Requirement_Functional> m_req_duplicate = m_duplicate.SelectMany(x => x.m_Requirement_Functional).ToList();
            if (m_req_duplicate.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_req_duplicate[i1].Classifier_ID, database.metamodel.m_Afo_Dublette.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Dublette.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Dublette[0].SubType, repository, database, database.metamodel.m_Afo_Dublette[0].Toolbox, database.metamodel.m_Afo_Dublette[0].direction);

                    i1++;
                } while (i1 < m_req_duplicate.Count);
            }
        }
        private void Create_Connectoren_Duplicate_User_Generalisierung(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();

            #region Generalsiierung runter
            List<NodeType> m_Specilize = new List<NodeType>();
            m_Specilize = this.Client.m_Specialize;

            if (m_Specilize.Count > 0)
            {

                List<Element_Functional> m_duplicate = m_Specilize.SelectMany(x => x.m_Element_Functional.Where(y => y.Supplier == this.Supplier)).ToList();
                List<Requirement_Functional> m_req_duplicate_ = m_duplicate.SelectMany(x => x.m_Requirement_Functional).ToList();

                if (m_req_duplicate_.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(m_req_duplicate_[i1].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Dublette.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Dublette.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Dublette[0].SubType, repository, database, database.metamodel.m_Afo_Dublette[0].Toolbox, database.metamodel.m_Afo_Dublette[0].direction);

                        i1++;
                    } while (i1 < m_req_duplicate_.Count);
                }
                List<Element_User> m_duplicate2 = m_Specilize.SelectMany(x => x.m_Element_User.Where(y => y.Supplier == this.Supplier)).ToList();
                List<Requirement_User> m_req_duplicate2_ = m_duplicate2.SelectMany(x => x.m_Requirement_User).ToList();

                if (m_req_duplicate2_.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(m_req_duplicate2_[i1].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Dublette.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Dublette.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Dublette[0].SubType, repository, database, database.metamodel.m_Afo_Dublette[0].Toolbox, database.metamodel.m_Afo_Dublette[0].direction);

                        i1++;
                    } while (i1 < m_req_duplicate2_.Count);
                }

            }
            #endregion

            #region Generalisierung hoch
            List<NodeType> m_Specified = this.Client.Get_All_SpecifiedBy(database.m_NodeType);

            if (m_Specified != null)
            {

                List<Element_Functional> m_duplicate = m_Specified.SelectMany(x => x.m_Element_Functional.Where(y => y.Supplier == this.Supplier)).ToList();
                List<Requirement_Functional> m_req_duplicate_ = m_duplicate.SelectMany(x => x.m_Requirement_Functional).ToList();

                if (m_req_duplicate_.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_req_duplicate_[i1].Classifier_ID, database.metamodel.m_Afo_Dublette.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Dublette.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Dublette[0].SubType, repository, database, database.metamodel.m_Afo_Dublette[0].Toolbox, database.metamodel.m_Afo_Dublette[0].direction);

                        i1++;
                    } while (i1 < m_req_duplicate_.Count);
                }
                List<Element_User> m_duplicate2 = m_Specified.SelectMany(x => x.m_Element_User.Where(y => y.Supplier == this.Supplier)).ToList();
                List<Requirement_User> m_req_duplicate2_ = m_duplicate2.SelectMany(x => x.m_Requirement_User).ToList();

                if (m_req_duplicate2_.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_req_duplicate2_[i1].Classifier_ID, database.metamodel.m_Afo_Dublette.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Dublette.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Dublette[0].SubType, repository, database, database.metamodel.m_Afo_Dublette[0].Toolbox, database.metamodel.m_Afo_Dublette[0].direction);

                        i1++;
                    } while (i1 < m_req_duplicate2_.Count);
                }

            }
            #endregion

        }

        private void Create_Connectoren_Process(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();

            List<Requirement_Non_Functional> m_req_process = this.Supplier.Element_Process_Get_NodeType_Requirement(this.Client);

            if (m_req_process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(m_req_process[i1].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines[0].SubType, repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);


                    i1++;
                } while (i1 < m_req_process.Count);
            }


        }
        private void Create_Connectoren_Stakeholder(Requirement_Plugin.Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();

            List<string> m_st = Get_Stakheolder_GUID();
            if (m_st.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.m_Requirement_User[0].Classifier_ID, m_st[i1], database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Element.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Element[0].SubType, repository, database, database.metamodel.m_Derived_Element[0].Toolbox, database.metamodel.m_Derived_Element[0].direction);
                    i1++;
                } while (i1 < m_st.Count);
            }
        }

        public void Create_Refines_Measurement_User(Requirement_Plugin.Database database, EA.Repository repository)
        {
            if (this.m_element_measurement.Count > 0)
            {
                Repository_Connector repository_Connectors = new Repository_Connector();

                int i1 = 0;
                do
                {
                    if (this.m_element_measurement[i1].m_requirement.Count > 0 && this.m_Requirement_User[0] != null)
                    {
                        int i2 = 0;
                        do
                        {
                            if (this.m_element_measurement[i1].m_requirement[i2].Classifier_ID != null && this.m_Requirement_User[0].Classifier_ID != null)
                            {
                                repository_Connectors.Create_Dependency(this.m_element_measurement[i1].m_requirement[i2].Classifier_ID, this.m_Requirement_User[0].Classifier_ID, database.metamodel.m_Afo_Refines.Select(x => x.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.Type).ToList(), database.metamodel.m_Afo_Refines.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Afo_Refines[0].Toolbox, database.metamodel.m_Afo_Refines[0].direction);
                            }

                            i2++;
                        } while (i2 < this.m_element_measurement[i1].m_requirement.Count);
                     
                    }

                    i1++;
                } while (i1 < this.m_element_measurement.Count);
            }
        }
        #endregion
    }//end Element_User



}//end namespace Requirement_Plugin
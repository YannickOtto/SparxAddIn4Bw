///////////////////////////////////////////////////////////
//  Target_Functional.cs
//  Implementation of the Class Target_Functional
//  Generated by Enterprise Architect
//  Created on:      23-Jan-2019 17:23:49
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System.Data.OleDb;
using Requirement_Plugin.Interfaces;

using Requirement_Plugin;
using Repsoitory_Elements;
using Requirements;

namespace Elements
{
	public class Target_Functional : Repository_Connector {

		public Target_Functional(){

		}

		~Target_Functional(){

		}
        #region Get Elements
        public void Check_For_Requirement(EA.Repository repository, Database database, Element_Functional element_Functional)
        {
            //   DB_Command command = new DB_Command();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
         
            if (this.CLient_ID != null && this.Supplier_ID != null)
            {
             //   XML xML = new XML();
             //   TaggedValue taggedValue = new TaggedValue(database.metamodel, database);
                List<string> m_Type_reqfunc = database.metamodel.m_Requirement_Functional.Select(x => x.Type).ToList();
                List<string> m_Stereotype_reqfunc = database.metamodel.m_Requirement_Functional.Select(x => x.Stereotype).ToList();

                List<string> m_Type_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
                List<string> m_Stereotype_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
                ////////////////////////////////////////////////////
                /*   var SQL_NodeType = "SELECT ea_guid FROM t_object WHERE Object_Type IN"+xML.SQL_IN_Array(m_Type_reqfunc.ToArray())+" AND Stereotype IN"+xML.SQL_IN_Array(m_Stereotype_reqfunc.ToArray())+" AND Object_ID IN( SELECT Start_Object_ID FROM t_connector WHERE Stereotype IN" + xML.SQL_IN_Array(m_Stereotype_DerivedElem.ToArray()) + " AND Connector_Type IN" + xML.SQL_IN_Array(m_Type_DerivedElem.ToArray()) + " AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = '" + this.CLient_ID + "'));";
                   var SQL_Activity = "SELECT ea_guid FROM t_object WHERE Object_Type IN"+xML.SQL_IN_Array(m_Type_reqfunc.ToArray())+" AND Stereotype IN"+xML.SQL_IN_Array(m_Stereotype_reqfunc.ToArray())+" AND Object_ID IN( SELECT Start_Object_ID FROM t_connector WHERE Stereotype IN" + xML.SQL_IN_Array(m_Stereotype_DerivedElem.ToArray()) + " AND Connector_Type IN" + xML.SQL_IN_Array(m_Type_DerivedElem.ToArray()) + " AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = '" + this.Supplier_ID + "'));";

                   string xml_String = repository.SQLQuery(SQL_NodeType);
                   List<string> NodeType_Requ = xML.Xml_Read_Attribut("ea_guid", xml_String);

                   string xml_String_2 = repository.SQLQuery(SQL_Activity);
                   List<string> Activity_Requ = xML.Xml_Read_Attribut("ea_guid", xml_String_2);
                   */
                #region SQL NodeType
                List<string> NodeType_Requ = new List<string>();
                List<string> help_id = new List<string>();
                help_id.Add(this.CLient_ID);
                NodeType_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_id, m_Type_reqfunc, m_Stereotype_reqfunc, m_Type_DerivedElem, m_Stereotype_DerivedElem);

              /*  var SQL_NodeType2 = "SELECT ea_guid FROM t_object WHERE Object_Type IN(" + command.Add_Parameters_Pre(m_Type_reqfunc.ToArray()) + ") AND Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype_reqfunc.ToArray()) + ") AND Object_ID IN( SELECT Start_Object_ID FROM t_connector WHERE Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype_DerivedElem.ToArray()) + ") AND Connector_Type IN(" + command.Add_Parameters_Pre(m_Type_DerivedElem.ToArray()) + ") AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = ?));";
            
                OleDbCommand SELECT_NT = new OleDbCommand(SQL_NodeType2, (OleDbConnection)database.oLEDB_Interface.dbConnection);

                List<DB_Input[]> ee = new List<DB_Input[]>();
                List<string> help_id = new List<string>();
                help_id.Add(this.CLient_ID);
                ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());
                ee.Add(m_Stereotype_DerivedElem.Select(x => new DB_Input(-1, x)).ToArray());
                ee.Add(m_Type_DerivedElem.Select(x => new DB_Input(-1, x)).ToArray());
                ee.Add(m_Type_reqfunc.Select(x => new DB_Input(-1, x)).ToArray());
                ee.Add(m_Stereotype_reqfunc.Select(x => new DB_Input(-1, x)).ToArray());

                OleDbType[] m_input_Type = {OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
                database.oLEDB_Interface.Add_Parameters_Select(SELECT_NT, ee, m_input_Type);
                string[] m_output = { "ea_guid" };

                List<DB_Return> m_ret3 = database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT_NT, m_output);

                if (m_ret3[0].Ret.Count > 1)
                {
                    NodeType_Requ = m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList();
                }
                else
                {
                    NodeType_Requ = null;
                }*/
                #endregion SQL NodeType

                #region SQL Activity
                List<string> Activity_Requ = new List<string>();
                List<string> help_id2 = new List<string>();
                help_id2.Add(this.Supplier_ID);

                Activity_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_id2, m_Type_reqfunc, m_Stereotype_reqfunc, m_Type_DerivedElem, m_Stereotype_DerivedElem);

              /*  var SQL_Activity2 = "SELECT ea_guid FROM t_object WHERE Object_Type IN(" + command.Add_Parameters_Pre(m_Type_reqfunc.ToArray()) + ") AND Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype_reqfunc.ToArray()) + ") AND Object_ID IN( SELECT Start_Object_ID FROM t_connector WHERE Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype_DerivedElem.ToArray()) + ") AND Connector_Type IN(" + command.Add_Parameters_Pre(m_Type_DerivedElem.ToArray()) + ") AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = ?));";

                OleDbCommand SELECT_Act = new OleDbCommand(SQL_Activity2, (OleDbConnection)database.oLEDB_Interface.dbConnection);

                List<DB_Input[]> ee2 = new List<DB_Input[]>();
                List<string> help_id2 = new List<string>();
                help_id2.Add(this.Supplier_ID);
                ee2.Add(help_id2.Select(x => new DB_Input(-1, x)).ToArray());
                ee2.Add(m_Stereotype_DerivedElem.Select(x => new DB_Input(-1, x)).ToArray());
                ee2.Add(m_Type_DerivedElem.Select(x => new DB_Input(-1, x)).ToArray());
                ee2.Add(m_Type_reqfunc.Select(x => new DB_Input(-1, x)).ToArray());
                ee2.Add(m_Stereotype_reqfunc.Select(x => new DB_Input(-1, x)).ToArray());

                OleDbType[] m_input_Type2 = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
                database.oLEDB_Interface.Add_Parameters_Select(SELECT_Act, ee2, m_input_Type2);
                string[] m_output2 = { "ea_guid" };

                List<DB_Return> m_ret4 = database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT_Act, m_output2);

                if (m_ret4[0].Ret.Count > 1)
                {
                    Activity_Requ = m_ret4[0].Ret.GetRange(1, m_ret4[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList();
                }
                else
                {
                    Activity_Requ = null;
                }*/
                #endregion SQL Activity


                if (NodeType_Requ != null && Activity_Requ != null)
                {
                    int i1 = 0;
                    do
                    {
                        if (Activity_Requ.Contains(NodeType_Requ[i1]))
                        {
                            Requirement_Functional requirement_Functional = new Requirement_Functional(" ", " ", " ", " ", " ", " ", true, " ", true, null, database.metamodel);
                            requirement_Functional.Classifier_ID = NodeType_Requ[i1];
                            requirement_Functional.Get_Tagged_Values_From_Requirement(NodeType_Requ[i1], repository, database);
                            

                            requirement_Functional.Add_to_Database(database);

                            if (element_Functional.m_Requirement_Functional.Contains(requirement_Functional) == false)
                            {
                                element_Functional.m_Requirement_Functional.Add(requirement_Functional);

                                element_Functional.Check_For_Capability(repository, database);
                                //Check Issue
                                requirement_Functional.Get_Issues(database);
                                //Check Klärungspunkte
                                requirement_Functional.Check_Klärungspunkte(requirement_Functional.m_Issues, database, repository);
                            }
                        }

                        i1++;
                    } while (i1 < NodeType_Requ.Count);
                }

            }
        }//end Element_Functional
        #endregion Get Elements

        #region Transform Elements
        public void Transform_Target_Functional_To_Target_Stakeholder(Database database, Element_User element_User)
        {
            if (element_User.m_Client_ST.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Target_Stakeholder target_Stakeholder = new Target_Stakeholder();
                    target_Stakeholder.CLient_ID = this.CLient_ID;
                    target_Stakeholder.Supplier_ID = this.Supplier_ID;
                    target_Stakeholder.Client_ST = element_User.m_Client_ST[i1].Classifier_ID;

                    element_User.m_Target_User.Add(target_Stakeholder);

                    i1++;
                } while (i1 < element_User.m_Client_ST.Count);
            }

        }
        #endregion Transform Elements



    }//end Target_Functional

}//end namespace Requirement_Plugin
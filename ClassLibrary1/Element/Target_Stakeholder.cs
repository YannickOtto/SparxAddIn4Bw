///////////////////////////////////////////////////////////
//  Target_Stakeholder.cs
//  Implementation of the Class Target_Stakeholder
//  Generated by Enterprise Architect
//  Created on:      23-Jan-2019 17:23:50
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Data.OleDb;
using Requirement_Plugin.Interfaces;


using Requirement_Plugin;
using Requirements;

namespace Elements
{
	public class Target_Stakeholder : Target_Functional {

		public string Client_ST;

		public Target_Stakeholder(){

		}

		~Target_Stakeholder(){

		}

        #region Check Elements

        public void Check_For_Requirement_User(EA.Repository repository, Database database, Element_User element_User)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            if (this.CLient_ID != null && this.Supplier_ID != null)
            {
              //  DB_Command command = new DB_Command();
              //  XML xML = new XML();
              //  TaggedValue taggedValue = new TaggedValue(database.metamodel, database);
                List<string> m_Type_requser = database.metamodel.m_Requirement_User.Select(x => x.Type).ToList();
                List<string> m_Stereotype_requser = database.metamodel.m_Requirement_User.Select(x => x.Stereotype).ToList();

                List<string> m_Type_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
                List<string> m_Stereotype_DerivedElem = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
                ////////////////////////////////////////////////////
           
                #region SQL NodeType
                List<string> NodeType_Requ = new List<string>();
                List<string> help_id = new List<string>();
                help_id.Add(this.CLient_ID);

                NodeType_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_id, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem);
              
                #endregion SQL NodeType

                #region SQL Activity
                List<string> Activity_Requ = new List<string>();
                List<string> help_id2 = new List<string>();
                help_id2.Add(this.Supplier_ID);

                Activity_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_id2, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem);
              
                #endregion SQL Activity

                #region SQL Stakeholder
                List<string> Stakeholder_Requ = new List<string>();
                List<string> help_id3 = new List<string>();
                help_id3.Add(this.Client_ST);

                Stakeholder_Requ = interface_Connectors.Get_Client_Element_By_Connector(database, help_id3, m_Type_requser, m_Stereotype_requser, m_Type_DerivedElem, m_Stereotype_DerivedElem);


          
                #endregion SQL Stakeholder


                if (NodeType_Requ != null && Activity_Requ != null && Stakeholder_Requ != null)
                {
                    int i1 = 0;
                    do
                    {
                        if (Activity_Requ.Contains(NodeType_Requ[i1]) && Stakeholder_Requ.Contains(NodeType_Requ[i1]))
                        {

                            Requirement_User requirement_User = new Requirement_User(" ", " ", " ", " ", " ", " ", true, " ", true, " ", null, database.metamodel);
                            requirement_User.Classifier_ID = NodeType_Requ[i1];
                            requirement_User.Get_Tagged_Values_From_Requirement(NodeType_Requ[i1], repository, database);
                            

                           

                            if (element_User.m_Requirement_User.Select(x => x.OBJECT_ID).ToList().Contains(requirement_User.OBJECT_ID) == false)
                            {
                                requirement_User.Add_to_Database(database);

                                element_User.Check_For_Capability_User(repository, database, element_User.m_Requirement_User.Count - 1);
                                //Check Issue
                                requirement_User.Get_Issues(database);
                                //Check Klärungspunkte
                                requirement_User.Check_Klärungspunkte(requirement_User.m_Issues, database, repository);

                                element_User.m_Requirement_User.Add(requirement_User);
                            }
                        }

                        i1++;
                    } while (i1 < NodeType_Requ.Count);
                }

            }
        }//end Element_Functional

        public bool Check_Stakeholder(string GUID)
        {
            if (this.Client_ST == GUID)
            {
                return (true);
            }
            else
            {
                return (false);
            }
        }

        #endregion Check Elements

    }//end Target_Stakeholder

}//end namespace Requirement_Plugin
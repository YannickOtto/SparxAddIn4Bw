///////////////////////////////////////////////////////////
//  Requirement_Interface.cs
//  Implementation of the Class Requirement_Interface
//  Generated by Enterprise Architect
//  Created on:      16-Aug-2018 20:04:41
//  Original author: OLtzS Yannick Otto
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System.Data.OleDb;
using System.Data.Odbc;

using Database_Connection;
using Ennumerationen;
using Requirement_Plugin;

namespace Requirements
{
	public class Requirement_Interface : Requirement {

		public AFO_CPM_PHASE AFO_CPM_PHASE = AFO_CPM_PHASE.Eins;
        public AFO_FUNKTIONAL AFO_FUNKTIONAL = AFO_FUNKTIONAL.funktional;
        public AFO_QS_STATUS AFO_QS_STATUS = AFO_QS_STATUS.ungeprueft;
        public AFO_STATUS AFO_STATUS = AFO_STATUS.neu;
        public AFO_WV_PHASE AFO_WV_PHASE = AFO_WV_PHASE.phasenübergreifend;
        public bool W_ZU = true;


        public Requirement_Interface(string Titel, string Text, string W_OBJECT, string W_PROZESSWORT, string QUALITÄT, string RANDBEDINGUNG, bool W_SINGULAR, string W_SUBJECT, bool W_zu, string recent_GUID, Metamodels.Metamodel metamodel):base(recent_GUID, metamodel)
        {
            this.AFO_TITEL = Titel;
            this.AFO_TEXT = Text;
            this.W_OBJEKT = W_OBJECT;
            this.W_PROZESSWORT = W_PROZESSWORT;
            this.W_QUALITAET = W_QUALITAET;
            this.W_RANDBEDINGUNG = W_RANDBEDINGUNG;
            this.W_SINGULAR = W_SINGULAR;
            this.W_SUBJEKT = W_SUBJECT;
            this.W_AKTIVITAET = W_AKTIVITAET.fähigsein;
            this.W_ZU = W_zu;
            this.AFO_CPM_PHASE = metamodel.CPM_PHASE;

    }

		~Requirement_Interface(){

		}
        /// <summary>
        /// Anlegen eines Reqirement im Repository von EA
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Package_GUID"></param>
        /// <param name="StereoType"></param>
        /// <param name="Data"></param>
        /// <returns></returns>
        public string Create_Requirement_Interface(EA.Repository Repository, string Package_GUID, string StereoType, Database Data)
        {

            return(this.Create_Requirement(Repository, Package_GUID, StereoType, Data));
         /*   this.ADMBw_Stereotype = Data.metamodel.m_Requirement_ADMBw[0].Stereotype;

            List<DB_Insert> m_Insert = new List<DB_Insert>();

            EA.Package Packages = Repository.GetPackageByGuid(Package_GUID);
         
            //EA.Element Element = Packages.Elements.AddNew(this.AFO_TITEL, Data.metamodel.m_Requirement_Functional[0].Type);
            EA.Element Element = Packages.Elements.AddNew(this.AFO_TITEL, Data.metamodel.m_Requirement_ADMBw[0].Type);
            Element.Stereotype = Data.metamodel.m_Requirement_ADMBw[0].Stereotype;
            Element.Notes = this.AFO_TEXT;

            // MessageBox.Show(this.AFO_Text);

            this.Classifier_ID = Element.ElementGUID;
            this.ID = Element.ElementID;
            this.Notes = this.AFO_TEXT;
            this.Name = this.AFO_TITEL;
            this.Author = Element.Author;
            this.RPI_Stereotype = StereoType;


          
            AFO_ENUM aFO_ENUM = new AFO_ENUM();

            m_Insert.Add(new DB_Insert(Data.metamodel.Afo_Stereotype[0], OleDbType.VarChar, OdbcType.VarChar, StereoType, -1));

            m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABNAHMEKRITERIUM, -1));
            m_Insert.Add(new DB_Insert("AFO_AG_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AG_ID, -1));
            m_Insert.Add(new DB_Insert("AFO_AN_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AN_ID, -1));
            m_Insert.Add(new DB_Insert("AFO_ANSPRECHPARTNER", OleDbType.VarChar, OdbcType.VarChar, this.Author, -1));
            m_Insert.Add(new DB_Insert("AFO_BEZUG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_BEZUG[(int)this.AFO_BEZUG], -1));
            m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_CPM_PHASE[(int)this.AFO_CPM_PHASE], -1));
            m_Insert.Add(new DB_Insert("AFO_DETAILSTUFE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_DETAILSTUFE[(int)this.AFO_DETAILSTUFE], -1));
            m_Insert.Add(new DB_Insert("AFO_FUNKTIONAL", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_FUNKTIONAL[(int)this.AFO_FUNKTIONAL], -1));
            m_Insert.Add(new DB_Insert("AFO_KLAERUNGSPUNKTE", OleDbType.VarChar, OdbcType.VarChar, this.AFO_KLAERUNGSPUNKTE, -1));
            m_Insert.Add(new DB_Insert("AFO_KRITIKALITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_KRITIKALITAET[(int)this.AFO_KRITIKALITAET], -1));
            m_Insert.Add(new DB_Insert("AFO_OPERATIVEBEWERTUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_OPERATIVEBEWERTUNG[(int)this.AFO_OPERATIVEBEWERTUNG], -1));
            m_Insert.Add(new DB_Insert("AFO_PRIORITAET_VERGABE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)this.AFO_PRIORITAET_VERGABE], -1));
            m_Insert.Add(new DB_Insert("AFO_PROJEKTROLLE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)this.AFO_PROJEKTROLLE], -1));
            m_Insert.Add(new DB_Insert("AFO_QS_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_QS_STATUS[(int)this.AFO_QS_STATUS], -1));
            m_Insert.Add(new DB_Insert("AFO_QUELLTEXT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_QUELLTEXT, -1));
            m_Insert.Add(new DB_Insert("AFO_REGELUNGEN", OleDbType.VarChar, OdbcType.VarChar, this.AFO_REGELUNGEN, -1));
            m_Insert.Add(new DB_Insert("AFO_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_STATUS[(int)this.AFO_STATUS], -1));
            this.AFO_TITEL = this.Name;
            m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, this.Name, -1));
            m_Insert.Add(new DB_Insert("AFO_VERERBUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_VERERBUNG[(int)this.AFO_VERERBUNG], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_PHASE[(int)this.AFO_WV_PHASE], -1));
            m_Insert.Add(new DB_Insert("B_BEMERKUNG", OleDbType.VarChar, OdbcType.VarChar, this.B_BEMERKUNG, -1));
            m_Insert.Add(new DB_Insert("CLARIFICATION", OleDbType.VarChar, OdbcType.VarChar, this.CLARIFICATION, -1));
            m_Insert.Add(new DB_Insert("DB_Stand", OleDbType.VarChar, OdbcType.VarChar, this.DB_Stand, -1));
            m_Insert.Add(new DB_Insert("IN_CATEGORY", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.IN_CATEGORY[(int)this.IN_CATEGORY], -1));
            this.OBJECT_ID = this.ID.ToString();
            m_Insert.Add(new DB_Insert("OBJECT_ID", OleDbType.VarChar, OdbcType.VarChar, this.ID.ToString(), -1));
            this.AFO_TEXT = this.Notes;
            m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, this.Notes, -1));
            string UUID = Classifier_ID;
            UUID = UUID.Trim('{', '}');
            this.UUID = UUID;
            m_Insert.Add(new DB_Insert("UUID", OleDbType.VarChar, OdbcType.VarChar, this.UUID, -1));
            m_Insert.Add(new DB_Insert("W_AFO_MANUAL", OleDbType.VarChar, OdbcType.VarChar, this.W_AFO_MANUAL, -1));
            m_Insert.Add(new DB_Insert("W_AKTIVITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET], -1));
            m_Insert.Add(new DB_Insert("W_FREEZE_TITLE", OleDbType.VarChar, OdbcType.VarChar, this.W_FREEZE_TITLE.ToString(), -1));
            m_Insert.Add(new DB_Insert("W_NUTZENDER", OleDbType.VarChar, OdbcType.VarChar, this.W_NUTZENDER, -1));
            m_Insert.Add(new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_OBJEKT, -1));
            m_Insert.Add(new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, this.W_PROZESSWORT, -1));
            m_Insert.Add(new DB_Insert("W_QUALITAET", OleDbType.VarChar, OdbcType.VarChar, this.W_QUALITAET, -1));
            m_Insert.Add(new DB_Insert("W_RANDBEDINGUNG", OleDbType.VarChar, OdbcType.VarChar, this.W_RANDBEDINGUNG, -1));
            m_Insert.Add(new DB_Insert("W_SINGULAR", OleDbType.VarChar, OdbcType.VarChar, this.W_SINGULAR.ToString(), -1));
            m_Insert.Add(new DB_Insert("W_SUBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_SUBJEKT, -1));
            m_Insert.Add(new DB_Insert("W_ZU", OleDbType.VarChar, OdbcType.VarChar, this.W_ZU.ToString(), -1));
            m_Insert.Add(new DB_Insert("AFO_VERBINDLICHKEIT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_VERBINDLICHKEIT, -1));
            m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, this.RPI_Export.ToString(), -1));

           


            #region Update t_object
        
            Requirement_Plugin.Interfaces.Interface_TaggedValue interface_TaggedValue = new Requirement_Plugin.Interfaces.Interface_TaggedValue();
            interface_TaggedValue.Set_Stereotype(Element.ElementGUID, Data.metamodel.m_Requirement_Interface[0].Toolbox, this.ADMBw_Stereotype, Data);
            
            #endregion t_object
            //Updaten
            Element.Update();
            Packages.Elements.Refresh();
            Packages.Update();
            this.Update_TV(m_Insert, Data, Repository);
            //Zur Database hinzufügen
            Add_to_Database(Data);

            //GUID des Requirement zurückgeben
            return (Element.ElementGUID);

            */
        }




    }//end Requirement_Interface

}//end namespace Requirement
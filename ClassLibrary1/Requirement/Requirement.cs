///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
//  Requirement.cs
//  Implementation of the Class Requirement
//  Generated by Enterprise Architect
//  Created on:      16-Aug-2018 20:04:41
//  Original author: OLtzS Yannick Otto
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System.Data.OleDb;
using System.Data.Odbc;
using Requirement_Plugin.Interfaces;

using Database_Connection;
using Metamodels;
using Ennumerationen;
using Repsoitory_Elements;
using Requirement_Plugin;

using System.Text.RegularExpressions;

namespace Requirements
{
    public class Requirement : Repository_Element
    {
        public string Stereotype;
        public string ADMBw_Stereotype;
        public string RPI_Stereotype;
        public List<Requirement>[] m_Requirements;
        public List<Requirement> m_Requirement_Refines;
        public List<Requirement> m_Requirement_Conflict;
        public List<Requirement> m_Requirement_Duplicate;
        public List<Requirement> m_Requirement_Replace;
        public List<Requirement> m_Requirement_Requires;
        public List<Requirement> m_Requirement_InheritsFrom;

        public List<Requirement> m_Requirement_TFL;


        //public string Instantiate_GUID;
        public List<InformationElement> m_InformationElement;
        public List<string> m_InformationElement_Name;
        public List<Capability> m_Capability;
        public List<OperationalConstraint> m_Design;
        public List<OperationalConstraint> m_Umwelt;
        public List<NodeType> m_Typevertreter;
        public NodeType nodeType;
        public List<NodeType> m_nodeTypes;
        public SysElement sysElement;
        public List<SysElement> sysElements;
        public SysElement sysElement_Real;
        public List<SysElement> sysElements_Real;
        public List<Logical> m_Logical;
        public List<Nachweisart> m_Nachweisarten;

        //Require7 TaggedValues
        public string AFO_ABNAHMEKRITERIUM;
        public string AFO_AG_ID;
        public string AFO_AN_ID;
        public string AFO_ANSPRECHPARTNER;
        public AFO_BEZUG AFO_BEZUG;
        public AFO_CPM_PHASE AFO_CPM_PHASE;
        public AFO_DETAILSTUFE AFO_DETAILSTUFE;
        public AFO_FUNKTIONAL AFO_FUNKTIONAL;
        public string AFO_HINWEIS;
        public string AFO_KLAERUNGSPUNKTE;
        public AFO_KRITIKALITAET AFO_KRITIKALITAET;
        public AFO_OPERATIVEBEWERTUNG AFO_OPERATIVEBEWERTUNG;
        public AFO_PRIORITAET_VERGABE AFO_PRIORITAET_VERGABE = AFO_PRIORITAET_VERGABE.unerheblich;
        public AFO_PROJEKTROLLE AFO_PROJEKTROLLE;
        public AFO_QS_STATUS AFO_QS_STATUS;
        public string AFO_QUELLTEXT;
        public string AFO_REGELUNGEN;
        public AFO_STATUS AFO_STATUS;
        public string AFO_TITEL;
        public AFO_VERERBUNG AFO_VERERBUNG = AFO_VERERBUNG.Ja;
        public AFO_WV_ART AFO_WV_ART;
        public AFO_WV_NACHWEISART AFO_WV_NACHWEISART;
        public AFO_WV_PHASE AFO_WV_PHASE;
        public string B_BEMERKUNG;
        public string CLARIFICATION;
        public string DB_Stand;
        public IN_CATEGORY IN_CATEGORY;
        public string OBJECT_ID;
        public string AFO_TEXT;
        public string UUID;
        public bool W_AFO_MANUAL = false;
        public W_AKTIVITAET W_AKTIVITAET;
        public bool W_FREEZE_TITLE = false;
        public string W_NUTZENDER;
        public string W_OBJEKT;
        public string W_PROZESSWORT;
        public string W_QUALITAET;
        public string W_RANDBEDINGUNG;
        public bool W_SINGULAR;
        public string W_SUBJEKT;
        public string AFO_VERBINDLICHKEIT;
        public bool W_ZU;
        public bool RPI_Export;
        public string TagMask;
        public string AFO_ABS_GEWICHT;
        public string AFO_RANG;

        public int abs_gewicht;
        public int rang;
      //  public string AFO_ABNAHMEKRITERIUM;

        public Requirement(string GUID, Metamodel metamodel)
        {
            

            this.AFO_ABNAHMEKRITERIUM = "";
            this.AFO_AG_ID = "";
            this.AFO_AN_ID = "";
            this.AFO_ANSPRECHPARTNER = "";
            this.AFO_BEZUG = AFO_BEZUG.System;
            if(metamodel != null)
            {
                this.AFO_CPM_PHASE = metamodel.CPM_PHASE;
            }
            else
            {
                this.AFO_CPM_PHASE = AFO_CPM_PHASE.Null;
            }
           
            this.AFO_DETAILSTUFE = AFO_DETAILSTUFE.Zwei;
            this.AFO_FUNKTIONAL = AFO_FUNKTIONAL.funktional;
            this.AFO_HINWEIS = "";
            this.AFO_KLAERUNGSPUNKTE = "";
            this.AFO_KRITIKALITAET = AFO_KRITIKALITAET.B2;
            this.AFO_OPERATIVEBEWERTUNG = AFO_OPERATIVEBEWERTUNG.unerheblich;
            this.AFO_PRIORITAET_VERGABE = AFO_PRIORITAET_VERGABE.unerheblich;
            this.AFO_PROJEKTROLLE = AFO_PROJEKTROLLE.AG;
            this.AFO_QS_STATUS = AFO_QS_STATUS.ungeprueft;
            this.AFO_QUELLTEXT = "";
            this.AFO_REGELUNGEN = "";
            this.AFO_STATUS = AFO_STATUS.neu;
            this.AFO_TITEL = "";
            this.AFO_VERERBUNG = AFO_VERERBUNG.Ja;
            this.AFO_WV_ART = AFO_WV_ART.Anforderung;
            this.AFO_WV_NACHWEISART = AFO_WV_NACHWEISART.unbestimmt;
            this.AFO_WV_PHASE = AFO_WV_PHASE.phasenübergreifend;
            this.B_BEMERKUNG = "";
            this.CLARIFICATION = "";
            this.DB_Stand = "";
            this.IN_CATEGORY = IN_CATEGORY.Null;
            this.OBJECT_ID = "";
            this.AFO_TEXT = "";
            this.UUID = "";
            this.W_AFO_MANUAL = false;
            this.W_AKTIVITAET = W_AKTIVITAET.NULL;
            this.W_FREEZE_TITLE = false;
            this.W_NUTZENDER = "";
            this.W_OBJEKT = "";
            this.W_PROZESSWORT = "";
            this.W_QUALITAET = "";
            this.W_RANDBEDINGUNG = "";
            this.W_SINGULAR = true;
            this.W_SUBJEKT = "";
            this.W_ZU = false;
            this.AFO_VERBINDLICHKEIT = "muss";

            this.AFO_ABS_GEWICHT = "";
            this.AFO_RANG = "";

            this.Classifier_ID = GUID;

            this.RPI_Export = true;

            this.TagMask = "0";


            this.m_InformationElement = new List<InformationElement>();
            this.m_InformationElement_Name = new List<string>();
            this.m_Capability = new List<Capability>();
            this.m_Design = new List<OperationalConstraint>();
            this.m_Umwelt = new List<OperationalConstraint>();
            this.m_Typevertreter = new List<NodeType>();
            this.nodeType = new NodeType(null, null, null);
            this.m_nodeTypes = new List<NodeType>();
            this.m_Logical = new List<Logical>();
            this.sysElement = new SysElement(null, null, null);
            this.sysElements = new List<SysElement>();
            this.sysElement_Real = new SysElement(null, null, null);
            this.sysElements_Real = new List<SysElement>();
            this.m_Nachweisarten = new List<Nachweisart>();

            /////////////////////////////////////
            ///Konnektoren
            this.m_Requirement_Conflict = new List<Requirement>();
            this.m_Requirement_Duplicate = new List<Requirement>();
            this.m_Requirement_Replace = new List<Requirement>();
            this.m_Requirement_Requires = new List<Requirement>();
            this.m_Requirement_Refines = new List<Requirement>();
            this.m_Requirement_TFL = new List<Requirement>();
            this.m_Requirement_InheritsFrom = new List<Requirement>();

            this.m_Requirements = new List<Requirement>[6];
            this.m_Requirements[0] = this.m_Requirement_Refines;
            this.m_Requirements[1] = this.m_Requirement_Duplicate;
            this.m_Requirements[2] = this.m_Requirement_Conflict;
            this.m_Requirements[3] = this.m_Requirement_Replace;
            this.m_Requirements[4] = this.m_Requirement_Requires;
            this.m_Requirements[5] = this.m_Requirement_InheritsFrom;
        }

        ~Requirement()
        {

        }

        #region TV
        /// <summary>
        /// Tagged Values aus einem Requirement auslesen und in Requiremnt einfügen
        /// </summary>
        /// <param name="GUID"></param>
        /// <param name="Repository"></param>
        /// <param name="Data"></param>
        public void Get_Tagged_Values_From_Requirement(string GUID, EA.Repository Repository, Database Data)
        {
            EA.Element Requirement = Repository.GetElementByGuid(GUID);

            TaggedValue Tagged = new TaggedValue(Data.metamodel, Data);
            //////////////
            if (GUID != null)
            {
                #region Abfragen und eventuell auf Standardwert setzen
                Get_TV(Data, Repository);
                #endregion Abfragen und ergänzen




            }
        }

        public void Get_RPI_Export(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;

           
                int i1 = 0;
               
                m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, "True", -1));

                
                List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

                if (m_TV != null)
                {
                    int i2 = 0;
                    do
                    {
                        string Value = "";
                        string Note = "";
                        string insert = "";
                        bool flag_insert = false;
                        bool flag = false;
                        string recent = "";
                        i1 = 0;
                        do
                        {
                            flag = false;
                            if (m_TV[i1].Ret.Count > 1)
                            {
                                if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                                {
                                    flag_insert = true;
                                    flag = true;
                                }
                                /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                                   {
                                       flag_insert = true;
                                   }*/
                                else
                                {
                                    if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                    {
                                        recent = (string)m_TV[i1].Ret[1];
                                    }
                                    else
                                    {
                                        recent = (string)m_TV[i1].Ret[2];
                                    }

                                    if (recent == " " || recent == "")
                                    {
                                        recent = null;
                                    }

                                    #region Zuweisung Attribute
                                    switch ((string)m_TV[i1].Ret[0])
                                    {
                                        case "RPI_Export":
                                        if(recent == "True" || recent == "true")
                                        {
                                            this.RPI_Export = true;
                                        }
                                        else
                                        {
                                            this.RPI_Export = false;
                                        }

                                            
                                            break;
                                       
                                    }
                                    #endregion Zuweisung Attribute

                                }

                            }
                            else
                            {
                                flag_insert = true;
                                flag = true;
                            }

                            i1++;
                        } while (i1 < m_TV.Count);


                        i2++;
                    } while (i2 < m_TV.Count);
                }
            
        }

        public void Get_Operative_Bewertung(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;


            int i1 = 0;

            m_Insert.Add(new DB_Insert("Bemerkung", OleDbType.VarChar, OdbcType.VarChar, "", -1));


            List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

            if (m_TV != null)
            {
                int i2 = 0;
                do
                {
                    string Value = "";
                    string Note = "";
                    string insert = "";
                    bool flag_insert = false;
                    bool flag = false;
                    string recent = "";
                    i1 = 0;
                    do
                    {
                        flag = false;
                        if (m_TV[i1].Ret.Count > 1)
                        {
                            if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                            {
                                flag_insert = true;
                                flag = true;
                            }
                            /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                               {
                                   flag_insert = true;
                               }*/
                            else
                            {
                                if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                {
                                    recent = (string)m_TV[i1].Ret[1];
                                }
                                else
                                {
                                    recent = (string)m_TV[i1].Ret[2];
                                }

                                if (recent == " " || recent == "")
                                {
                                    recent = null;
                                }

                                #region Zuweisung Attribute
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "Bemerkung":
                                        if (recent == "True" || recent == "true")
                                        {
                                            this.RPI_Export = true;
                                        }
                                        else
                                        {
                                            this.RPI_Export = false;
                                        }


                                        break;

                                }
                                #endregion Zuweisung Attribute

                            }

                        }
                        else
                        {
                            flag_insert = true;
                            flag = true;
                        }

                        i1++;
                    } while (i1 < m_TV.Count);


                    i2++;
                } while (i2 < m_TV.Count);
            }

        }

        public void Get_Anforderungsart(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;


            int i1 = 0;

            m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, "Anforderung", -1));


            List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

            if (m_TV != null)
            {
                int i2 = 0;
                do
                {
                    string Value = "";
                    string Note = "";
                    string insert = "";
                    bool flag_insert = false;
                    bool flag = false;
                    string recent = "";
                    i1 = 0;
                    do
                    {
                        flag = false;
                        if (m_TV[i1].Ret.Count > 1)
                        {
                            if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                            {
                                flag_insert = true;
                                flag = true;
                            }
                            /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                               {
                                   flag_insert = true;
                               }*/
                            else
                            {
                                if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                {
                                    recent = (string)m_TV[i1].Ret[1];
                                }
                                else
                                {
                                    recent = (string)m_TV[i1].Ret[2];
                                }

                                if (recent == " " || recent == "")
                                {
                                    recent = null;
                                }

                                #region Zuweisung Attribute
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "AFO_WV_ART":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_WV_ART");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_WV_ART = (AFO_WV_ART)database.AFO_ENUM.Get_Index(database.AFO_ENUM.AFO_WV_ART, recent);
                                        }
                                        else
                                        {
                                            this.AFO_WV_ART = (AFO_WV_ART)0;
                                        }
                                        break;

                                }
                                #endregion Zuweisung Attribute

                            }

                        }
                        else
                        {
                            flag_insert = true;
                            flag = true;
                        }

                        i1++;
                    } while (i1 < m_TV.Count);


                    i2++;
                } while (i2 < m_TV.Count);
            }

        }

        public void Get_Titel_AGID(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;


            int i1 = 0;

            m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, "not set", -1));
            m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, "not set", -1));
            m_Insert.Add(new DB_Insert("AFO_AG_ID", OleDbType.VarChar, OdbcType.VarChar, "not set", -1));
            //m_Insert.Add(new DB_Insert("AFO_ANFORDERUNGSART", OleDbType.VarChar, OdbcType.VarChar, "not set", -1));
            //      m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_CPM_PHASE[(int)AFO_CPM_PHASE.Eins], -1));

            List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

            if (m_TV != null)
            {
                int i2 = 0;
                do
                {
                    string Value = "";
                    string Note = "";
                    string insert = "";
                    bool flag_insert = false;
                    bool flag = false;
                    string recent = "";
                    i1 = 0;
                    do
                    {
                        flag = false;
                        if (m_TV[i1].Ret.Count > 1)
                        {
                            if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                            {
                                flag_insert = true;
                                flag = true;
                            }
                            /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                               {
                                   flag_insert = true;
                               }*/
                            else
                            {
                                if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                {
                                    recent = (string)m_TV[i1].Ret[1];
                                }
                                else
                                {
                                    recent = (string)m_TV[i1].Ret[2];
                                }

                                if (recent == " " || recent == "")
                                {
                                    recent = null;
                                }

                                #region Zuweisung Attribute
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "AFO_TITEL":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_TITEL");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_TITEL = recent;
                                        }
                                        else
                                        {
                                            this.AFO_TITEL = "not set";
                                        }
                                        break;
                                    case "AFO_AG_ID":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_AG_ID");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_AG_ID = recent;
                                        }
                                        else
                                        {
                                            this.AFO_AG_ID = "not set";
                                        }
                                        break;
                                    case "AFO_TEXT":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_TEXT");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_TEXT = recent;
                                        }
                                        else
                                        {
                                            this.AFO_TEXT = "not set";
                                        }
                                        break;


                                }
                                #endregion Zuweisung Attribute

                            }

                        }
                        else
                        {
                            flag_insert = true;
                            flag = true;
                        }

                        i1++;
                    } while (i1 < m_TV.Count);


                    i2++;
                } while (i2 < m_TV.Count);
            }
        }

        public void Get_Phase(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;


            int i1 = 0;

            m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_CPM_PHASE[(int)AFO_CPM_PHASE.Eins], -1));
            m_Insert.Add(new DB_Insert("AFO_ABS_GEWICHT", OleDbType.VarChar, OdbcType.VarChar, "", -1));
            m_Insert.Add(new DB_Insert("AFO_RANG", OleDbType.VarChar, OdbcType.VarChar, "", -1));
            m_Insert.Add(new DB_Insert("AFO_OPERATIVEBEWERTUNG", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_OPERATIVEBEWERTUNG[(int)AFO_OPERATIVEBEWERTUNG.unerheblich], -1));
            //      m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_CPM_PHASE[(int)AFO_CPM_PHASE.Eins], -1));

            List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

            if (m_TV != null)
            {
                int i2 = 0;
                do
                {
                    string Value = "";
                    string Note = "";
                    string insert = "";
                    bool flag_insert = false;
                    bool flag = false;
                    string recent = "";
                    i1 = 0;
                    do
                    {
                        flag = false;
                        if (m_TV[i1].Ret.Count > 1)
                        {
                            if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                            {
                                flag_insert = true;
                                flag = true;
                            }
                            /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                               {
                                   flag_insert = true;
                               }*/
                            else
                            {
                                if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                {
                                    recent = (string)m_TV[i1].Ret[1];
                                }
                                else
                                {
                                    recent = (string)m_TV[i1].Ret[2];
                                }

                                if (recent == " " || recent == "")
                                {
                                    recent = null;
                                }

                                #region Zuweisung Attribute
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "AFO_CPM_PHASE":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_CPM_PHASE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_CPM_PHASE = (AFO_CPM_PHASE)database.AFO_ENUM.Get_Index(database.AFO_ENUM.AFO_CPM_PHASE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_CPM_PHASE = database.metamodel.CPM_PHASE;
                                        }
                                        break;
                                    case "AFO_ABS_GEWICHT":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_ABS_GEWICHT");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_ABS_GEWICHT = recent;
                                        }
                                        else
                                        {
                                            this.AFO_ABS_GEWICHT = "";
                                        }
                                        break;
                                    case "AFO_RANG":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_RANG");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_RANG = recent;
                                        }
                                        else
                                        {
                                            this.AFO_RANG = "";
                                        }
                                        break;
                                    case "AFO_OPERATIVEBEWERTUNG":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_OPERATIVEBEWERTUNG");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_OPERATIVEBEWERTUNG = (AFO_OPERATIVEBEWERTUNG)database.AFO_ENUM.Get_Index(database.AFO_ENUM.AFO_OPERATIVEBEWERTUNG, recent);
                                        }
                                        else
                                        {
                                            this.AFO_OPERATIVEBEWERTUNG = (AFO_OPERATIVEBEWERTUNG)0;
                                        }
                                        break;

                                }
                                #endregion Zuweisung Attribute

                            }

                        }
                        else
                        {
                            flag_insert = true;
                            flag = true;
                        }

                        i1++;
                    } while (i1 < m_TV.Count);


                    i2++;
                } while (i2 < m_TV.Count);
            }

        }

        public void Get_Sterotype_Req(Database database, EA.Repository repository)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;
            string tv   = database.metamodel.Afo_Stereotype[0];

            int i1 = 0;

            m_Insert.Add(new DB_Insert(database.metamodel.Afo_Stereotype[0], OleDbType.VarChar, OdbcType.VarChar, "kein", -1));


            List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

            if (m_TV != null)
            {
                int i2 = 0;
                do
                {
                    string Value = "";
                    string Note = "";
                    string insert = "";
                    bool flag_insert = false;
                    bool flag = false;
                    string recent = "";
                    i1 = 0;
                    do
                    {
                        flag = false;
                        if (m_TV[i1].Ret.Count > 1)
                        {
                            if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                            {
                                flag_insert = true;
                                flag = true;
                            }
                            /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                               {
                                   flag_insert = true;
                               }*/
                            else
                            {
                                if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                {
                                    recent = (string)m_TV[i1].Ret[1];
                                }
                                else
                                {
                                    recent = (string)m_TV[i1].Ret[2];
                                }

                                if (recent == " " || recent == "")
                                {
                                    recent = null;
                                }

                                #region Zuweisung Attribute
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "RPI_Stereotype":
                                        help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "RPI_Stereotype");
                                       if(recent == "kein" || recent == "")
                                        {
                                            EA.Element req = repository.GetElementByGuid(this.Classifier_ID);


                                            this.Stereotype = req.Stereotype;
                                        }
                                       else
                                        {
                                            this.Stereotype = recent;
                                        }
                                       
                                        break;

                                }
                                #endregion Zuweisung Attribute

                            }

                        }
                        else
                        {
                            flag_insert = true;
                            flag = true;
                        }

                        i1++;
                    } while (i1 < m_TV.Count);


                    i2++;
                } while (i2 < m_TV.Count);
            }

        }


        public void Update_TV_RPI_Export(Database database, EA.Repository repository)
        {

                List<DB_Insert> m_Insert = new List<DB_Insert>();

                m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, this.RPI_Export, -1));
               
                this.Update_TV(m_Insert, database, repository);
            


        }

        public void Update_TV_WV_Art(Database database, EA.Repository repository)
        {

            List<DB_Insert> m_Insert = new List<DB_Insert>();

            m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART], -1));

            this.Update_TV(m_Insert, database, repository);



        }
        private void Get_TV(Database Data, EA.Repository Repository)
        {
            TV_Map help;

            this.ID = this.Get_Object_ID(Data);
            this.Author = this.Get_Author(Data);
            this.Notes = this.Get_Notes(Data);
            this.Name = this.Get_Name(Data);

            TaggedValue tagged = new TaggedValue(Data.metamodel, Data);
            List<DB_Insert> m_Insert = new List<DB_Insert>();
         /*   string SQL = "SELECT Value, Notes FROM t_objectproperties WHERE Property = ? AND Object_ID = ?";
            string[] output = { "Value", "Notes" };

            OleDbCommand oleDbCommand = new OleDbCommand(SQL, (OleDbConnection)Data.oLEDB_Interface.dbConnection);
            List<DB_Return> m_TV = Data.oLEDB_Interface.oleDB_SELECT_One_Table_Multiple_Property(oleDbCommand, output, Data.metamodel.AFO_Tagged_Values, this.ID);
            */
            Interface_TaggedValue interface_TaggedValue = new Interface_TaggedValue();
            List<DB_Return> m_TV = interface_TaggedValue.Get_Tagged_Value(Data.metamodel.AFO_Tagged_Values, this.ID, Data);

            if (m_TV != null)
            {
                string Value = "";
                string Note = "";
                string insert = "";
                bool flag_insert = false;
                bool flag = false;
                string recent = "";
                int i1 = 0;
                do
                {
                    flag = false;
                    if (m_TV[i1].Ret.Count > 1)
                    {
                        if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                        {
                            flag_insert = true;
                            flag = true;
                        }
                     /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                        {
                            flag_insert = true;
                        }*/
                        else
                        {
                            if (m_TV[i1].Ret[1].ToString() != "<memo>")
                            {
                                recent = (string)m_TV[i1].Ret[1];
                            }
                            else
                            {
                                recent = (string)m_TV[i1].Ret[2];
                            }

                            if(recent == " " || recent == "" || recent =="not set")
                            {
                                recent = null;
                            }

                            #region Zuweisung Attribute
                            if(recent != null)
                            {
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "AFO_ABNAHMEKRITERIUM":
                                        this.AFO_ABNAHMEKRITERIUM = recent;
                                        break;
                                    case "AFO_AG_ID":
                                        this.AFO_AG_ID = recent;
                                        break;
                                    case "AFO_AN_ID":
                                        this.AFO_AN_ID = recent;
                                        break;
                                    case "AFO_ANSPRECHPARTNER":
                                        this.AFO_ANSPRECHPARTNER = recent;
                                        break;
                                    case "AFO_BEZUG":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_BEZUG");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_BEZUG = (AFO_BEZUG)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_BEZUG, recent);
                                        }
                                        else
                                        {
                                            this.AFO_BEZUG = (AFO_BEZUG)0;
                                        }
                                        break;
                                    case "AFO_CPM_PHASE":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_CPM_PHASE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_CPM_PHASE = (AFO_CPM_PHASE)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_CPM_PHASE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_CPM_PHASE = Data.metamodel.CPM_PHASE;
                                        }
                                        break;
                                    case "AFO_DETAILSTUFE":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_DETAILSTUFE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_DETAILSTUFE = (AFO_DETAILSTUFE)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_DETAILSTUFE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_DETAILSTUFE = (AFO_DETAILSTUFE)0;
                                        }
                                        break;
                                    case "AFO_FUNKTIONAL":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_FUNKTIONAL");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_FUNKTIONAL = (AFO_FUNKTIONAL)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_FUNKTIONAL, recent);
                                        }
                                        else
                                        {
                                            this.AFO_FUNKTIONAL = (AFO_FUNKTIONAL)0;
                                        }
                                        break;
                                    case "AFO_HINWEIS":
                                        this.AFO_HINWEIS = recent;
                                        break;
                                    case "AFO_KLAERUNGSPUNKTE":
                                        this.AFO_KLAERUNGSPUNKTE = recent;
                                        break;
                                    case "AFO_KRITIKALITAET":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_KRITIKALITAET");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_KRITIKALITAET = (AFO_KRITIKALITAET)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_KRITIKALITAET, recent);
                                        }
                                        else
                                        {
                                            this.AFO_KRITIKALITAET = (AFO_KRITIKALITAET)0;
                                        }
                                        break;
                                    case "AFO_OPERATIVEBEWERTUNG":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_OPERATIVEBEWERTUNG");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_OPERATIVEBEWERTUNG = (AFO_OPERATIVEBEWERTUNG)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_OPERATIVEBEWERTUNG, recent);
                                        }
                                        else
                                        {
                                            this.AFO_OPERATIVEBEWERTUNG = (AFO_OPERATIVEBEWERTUNG)0;
                                        }
                                        break;
                                    case "AFO_PRIORITAET_VERGABE":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_PRIORITAET_VERGABE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_PRIORITAET_VERGABE = (AFO_PRIORITAET_VERGABE)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_PRIORITAET_VERGABE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_PRIORITAET_VERGABE = (AFO_PRIORITAET_VERGABE)0;
                                        }
                                        break;
                                    case "AFO_PROJEKTROLLE":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_PROJEKTROLLE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_PROJEKTROLLE = (AFO_PROJEKTROLLE)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_PROJEKTROLLE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_PROJEKTROLLE = (AFO_PROJEKTROLLE)0;
                                        }
                                        break;
                                    case "AFO_QS_STATUS":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_QS_STATUS");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_QS_STATUS = (AFO_QS_STATUS)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_QS_STATUS, recent);
                                        }
                                        else
                                        {
                                            this.AFO_QS_STATUS = (AFO_QS_STATUS)0;
                                        }
                                        break;
                                    case "AFO_QUELLTEXT":
                                        this.AFO_QUELLTEXT = recent;
                                        break;
                                    case "AFO_REGELUNGEN":
                                        this.AFO_REGELUNGEN = recent;
                                        break;
                                    case "AFO_STATUS":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_STATUS");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_STATUS = (AFO_STATUS)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_STATUS, recent);
                                        }
                                        else
                                        {
                                            this.AFO_STATUS = (AFO_STATUS)0;
                                        }
                                        break;
                                    case "AFO_TITEL":
                                        this.AFO_TITEL = recent;
                                        break;
                                    case "AFO_VERERBUNG":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_VERERBUNG");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_VERERBUNG = (AFO_VERERBUNG)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_VERERBUNG, recent);
                                        }
                                        else
                                        {
                                            this.AFO_VERERBUNG = (AFO_VERERBUNG)0;
                                        }
                                        break;
                                    case "AFO_WV_ART":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_WV_ART");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_WV_ART = (AFO_WV_ART)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_WV_ART, recent);
                                        }
                                        else
                                        {
                                            this.AFO_WV_ART = (AFO_WV_ART)0;
                                        }
                                        break;
                                    case "AFO_WV_NACHWEISART":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_WV_NACHWEISART");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_WV_NACHWEISART = (AFO_WV_NACHWEISART)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_WV_NACHWEISART, recent);
                                        }
                                        else
                                        {
                                            this.AFO_WV_NACHWEISART = (AFO_WV_NACHWEISART)0;
                                        }
                                        break;
                                    case "AFO_WV_PHASE":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_WV_PHASE");
                                        if (help.Default_Value != recent)
                                        {
                                            this.AFO_WV_PHASE = (AFO_WV_PHASE)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.AFO_WV_PHASE, recent);
                                        }
                                        else
                                        {
                                            this.AFO_WV_PHASE = (AFO_WV_PHASE)0;
                                        }
                                        break;
                                    case "B_BEMERKUNG":
                                        this.B_BEMERKUNG = recent;
                                        break;
                                    case "CLARIFICATION":
                                        this.CLARIFICATION = recent;
                                        break;
                                    case "DB_Stand":
                                        this.DB_Stand = recent;
                                        break;
                                    case "IN_CATEGORY":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "IN_CATEGORY");
                                        if (help.Default_Value != recent)
                                        {
                                            this.IN_CATEGORY = (IN_CATEGORY)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.IN_CATEGORY, recent);
                                        }
                                        else
                                        {
                                            this.IN_CATEGORY = (IN_CATEGORY)0;
                                        }
                                        break;
                                    case "OBJECT_ID":
                                        this.OBJECT_ID = recent;
                                        break;
                                    case "W_PROZESSWORT":
                                        this.W_PROZESSWORT = recent;
                                        break;
                                    case "AFO_TEXT":
                                        this.AFO_TEXT = recent;
                                        break;
                                    case "UUID":
                                        this.UUID = recent;
                                        break;
                                    case "W_AFO_MANUAL":
                                        if (recent == "True" || recent == "true")
                                        {
                                            this.W_AFO_MANUAL = true;
                                        }
                                        else
                                        {
                                            this.W_AFO_MANUAL = false;
                                        }
                                        break;
                                    case "W_AKTIVITAET":
                                        help = Data.metamodel.AFO_Tagged_Values.Find(x => x.Name == "W_AKTIVITAET");
                                        if (recent != help.Default_Value)
                                        {
                                            this.W_AKTIVITAET = (W_AKTIVITAET)Data.AFO_ENUM.Get_Index(Data.AFO_ENUM.W_AKTIVITAET, recent);
                                        }
                                        else
                                        {
                                            this.W_AKTIVITAET = (W_AKTIVITAET)0;
                                        }
                                        break;
                                    case "W_FREEZE_TITLE":
                                        if (recent == "True" || recent == "true")
                                        {
                                            this.W_FREEZE_TITLE = true;
                                        }
                                        else
                                        {
                                            this.W_FREEZE_TITLE = false;
                                        }
                                        break;
                                    case "W_NUTZENDER":
                                        this.W_NUTZENDER = recent;
                                        break;
                                    case "W_OBJEKT":
                                        this.W_OBJEKT = recent;
                                        break;
                                    case "W_QUALITAET":
                                        this.W_QUALITAET = recent;
                                        break;
                                    case "W_RANDBEDINGUNG":
                                        this.W_RANDBEDINGUNG = recent;
                                        break;
                                    case "W_SINGULAR":
                                        if (recent == "True" || recent == "true" || recent == "Values: true,false\r\n")
                                        {
                                            this.W_SINGULAR = true;
                                        }
                                        else
                                        {
                                            this.W_SINGULAR = false;
                                        }
                                        break;
                                    case "W_SUBJEKT":
                                        this.W_SUBJEKT = recent;
                                        break;
                                    case "W_ZU":
                                        if (recent == "True")
                                        {
                                            this.W_ZU = true;
                                        }
                                        else
                                        {
                                            this.W_ZU = false;
                                        }
                                        break;
                                    case "AFO_VERBINDLICHKEIT":
                                        this.AFO_VERBINDLICHKEIT = recent;
                                        break;
                                    case "TagMask":
                                        this.TagMask = recent;
                                        break;
                                    case "RPI_Export":
                                        if (recent == "True" || recent == "true")
                                        {
                                            this.RPI_Export = true;
                                        }
                                        else
                                        {
                                            this.RPI_Export = false;
                                        }
                                        break;
                                    case "AFO_ABS_GEWICHT":
                                        if (recent != "")
                                        {
                                            this.AFO_ABS_GEWICHT = recent;
                                        }
                                        break;
                                    case "AFO_RANG":
                                        if (recent != "")
                                        {
                                            this.AFO_RANG = recent;
                                        }

                                        break;
                                    case "RPI_Stereotype":
                                        if (recent != "")
                                        {
                                            this.RPI_Stereotype = recent;
                                        }

                                        break;
                                }
                            }
                            else
                            {
                                switch ((string)m_TV[i1].Ret[0])
                                {
                                    case "AFO_ABNAHMEKRITERIUM":
                                        this.AFO_ABNAHMEKRITERIUM = "not set";
                                        break;
                                    case "AFO_AG_ID":
                                        this.AFO_AG_ID = "not set"; 
                                        break;
                                    case "AFO_AN_ID":
                                        this.AFO_AN_ID = "not set"; 
                                        break;
                                    case "AFO_ANSPRECHPARTNER":
                                        this.AFO_ANSPRECHPARTNER = this.Get_Author(Data);
                                        break;
                                    case "AFO_BEZUG":
                                            this.AFO_BEZUG = (AFO_BEZUG)0;
                                        break;
                                    case "AFO_CPM_PHASE":
                                            this.AFO_CPM_PHASE = Data.metamodel.CPM_PHASE;
                                        break;
                                    case "AFO_DETAILSTUFE":
                                           this.AFO_DETAILSTUFE = (AFO_DETAILSTUFE)0;
                                        break;
                                    case "AFO_FUNKTIONAL":
                                            this.AFO_FUNKTIONAL = (AFO_FUNKTIONAL)0;
                                        break;
                                    case "AFO_HINWEIS":
                                        this.AFO_HINWEIS = "not set";
                                        break;
                                    case "AFO_KLAERUNGSPUNKTE":
                                        this.AFO_KLAERUNGSPUNKTE = "not set";
                                        break;
                                    case "AFO_KRITIKALITAET":
                                            this.AFO_KRITIKALITAET = (AFO_KRITIKALITAET)0;
                                        break;
                                    case "AFO_OPERATIVEBEWERTUNG":
                                            this.AFO_OPERATIVEBEWERTUNG = (AFO_OPERATIVEBEWERTUNG)0;
                                        break;
                                    case "AFO_PRIORITAET_VERGABE":
                                            this.AFO_PRIORITAET_VERGABE = (AFO_PRIORITAET_VERGABE)0;
                                        break;
                                    case "AFO_PROJEKTROLLE":
                                            this.AFO_PROJEKTROLLE = (AFO_PROJEKTROLLE)0;
                                        break;
                                    case "AFO_QS_STATUS":
                                            this.AFO_QS_STATUS = (AFO_QS_STATUS)0;
                                        break;
                                    case "AFO_QUELLTEXT":
                                        this.AFO_QUELLTEXT = "not set";
                                        break;
                                    case "AFO_REGELUNGEN":
                                        this.AFO_REGELUNGEN = "not set";
                                        break;
                                    case "AFO_STATUS":
                                            this.AFO_STATUS = (AFO_STATUS)0;
                                        break;
                                    case "AFO_TITEL":
                                        this.AFO_TITEL = this.Name;
                                        break;
                                    case "AFO_VERERBUNG":
                                            this.AFO_VERERBUNG = (AFO_VERERBUNG)0;
                                        break;
                                    case "AFO_WV_ART":
                                            this.AFO_WV_ART = (AFO_WV_ART)0;
                                        break;
                                    case "AFO_WV_NACHWEISART":
                                            this.AFO_WV_NACHWEISART = (AFO_WV_NACHWEISART)0;
                                        break;
                                    case "AFO_WV_PHASE":       
                                            this.AFO_WV_PHASE = (AFO_WV_PHASE)0;
                                        break;
                                    case "B_BEMERKUNG":
                                        this.B_BEMERKUNG = "not set";
                                        break;
                                    case "CLARIFICATION":
                                        this.CLARIFICATION = "not set";
                                        break;
                                    case "DB_Stand":
                                        this.DB_Stand = "not set";
                                        break;
                                    case "IN_CATEGORY":
                                            this.IN_CATEGORY = (IN_CATEGORY)0;
                                        break;
                                    case "OBJECT_ID":
                                        this.OBJECT_ID = this.OBJECT_ID;
                                        break;
                                    case "W_PROZESSWORT":
                                        this.W_PROZESSWORT = "not set";
                                        break;
                                    case "AFO_TEXT":
                                       // this.AFO_TEXT = this.AF;
                                        break;
                                    case "UUID":
                                        this.UUID = recent;
                                        break;
                                    case "W_AFO_MANUAL":
                                            this.W_AFO_MANUAL = true;
                                        break;
                                    case "W_AKTIVITAET":
                                            this.W_AKTIVITAET = (W_AKTIVITAET)0;
                                        break;
                                    case "W_FREEZE_TITLE":
                                       
                                        
                                            this.W_FREEZE_TITLE = true;
                                       
                                        break;
                                    case "W_NUTZENDER":
                                        this.W_NUTZENDER = "not set";
                                        break;
                                    case "W_OBJEKT":
                                        this.W_OBJEKT = "not set";
                                        break;
                                    case "W_QUALITAET":
                                        this.W_QUALITAET = "";
                                        break;
                                    case "W_RANDBEDINGUNG":
                                        this.W_RANDBEDINGUNG = "";
                                        break;
                                    case "W_SINGULAR":
                                       
                                            this.W_SINGULAR = true;
                                        
                                        break;
                                    case "W_SUBJEKT":
                                        this.W_SUBJEKT = "not set";
                                        break;
                                    case "W_ZU":
                                       
                                            this.W_ZU = false;
                                        
                                        break;
                                    case "AFO_VERBINDLICHKEIT":
                                        this.AFO_VERBINDLICHKEIT = "not set";
                                        break;
                                    case "TagMask":
                                        this.TagMask = "not set";
                                        break;
                                    case "RPI_Export":
                                       
                                            this.RPI_Export = true;
                                        
                                        break;
                                    case "AFO_ABS_GEWICHT":
                                        
                                            this.AFO_ABS_GEWICHT = "not set";
                                        
                                        break;
                                    case "AFO_RANG":
                                       
                                            this.AFO_RANG = "not set";
                                        

                                        break;
                                    case "RPI_Stereotype":
                                       
                                        break;
                                }
                            }
                            #endregion Zuweisung Attribute

                        }

                    }
                    else
                    {
                        flag_insert = true;
                        flag = true;
                    }


                    if (flag == true)
                    {
                        #region Hinzufügen Attribut Insert Liste

                        switch (m_TV[i1].Ret[0])
                        {
                            case "AFO_ABNAHMEKRITERIUM":
                                if(m_Insert.Select(x => x.Property).ToList().Contains("AFO_ABNAHMEKRITERIUM") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABNAHMEKRITERIUM, -1));
                                }
                                break;
                            case "AFO_AG_ID":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_AG_ID") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_AG_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AG_ID, -1));
                                }
                                break;
                            case "AFO_AN_ID":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_AN_ID") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_AN_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AN_ID, -1));
                                }
                                break;
                            case "AFO_ANSPRECHPARTNER":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_ANSPRECHPARTNER") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_ANSPRECHPARTNER", OleDbType.VarChar, OdbcType.VarChar, this.Author, -1));
                                }
                                break;
                            case "AFO_BEZUG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_BEZUG") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_BEZUG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_BEZUG[(int)this.AFO_BEZUG], -1));
                                }
                                break;
                            case "AFO_CPM_PHASE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_CPM_PHASE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_CPM_PHASE[(int)this.AFO_CPM_PHASE], -1));
                                }
                                    break;
                            case "AFO_DETAILSTUFE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_DETAILSTUFE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_DETAILSTUFE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_DETAILSTUFE[(int)this.AFO_DETAILSTUFE], -1));
                                }
                                    break;
                            case "AFO_FUNKTIONAL":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_FUNKTIONAL") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_FUNKTIONAL", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_FUNKTIONAL[(int)this.AFO_FUNKTIONAL], -1));
                                }
                                    break;
                            case "AFO_HINWEIS":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_HINWEIS") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_HINWEIS", OleDbType.VarChar, OdbcType.VarChar, this.AFO_HINWEIS, -1));
                                }
                                break;
                            case "AFO_KLAERUNGSPUNKTE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_KLAERUNGSPUNKTE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_KLAERUNGSPUNKTE", OleDbType.VarChar, OdbcType.VarChar, this.AFO_KLAERUNGSPUNKTE, -1));
                                }
                                break;
                            case "AFO_KRITIKALITAET":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_KRITIKALITAET") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_KRITIKALITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_KRITIKALITAET[(int)this.AFO_KRITIKALITAET], -1));
                                }
                                    break;
                            case "AFO_OPERATIVEBEWERTUNG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_OPERATIVEBEWERTUNG") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_OPERATIVEBEWERTUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_OPERATIVEBEWERTUNG[(int)this.AFO_OPERATIVEBEWERTUNG], -1));
                                }
                                    break;
                            case "AFO_PRIORITAET_VERGABE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_PRIORITAET_VERGABE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_PRIORITAET_VERGABE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)this.AFO_PRIORITAET_VERGABE], -1));
                                }
                                    break;
                            case "AFO_PROJEKTROLLE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_PROJEKTROLLE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_PROJEKTROLLE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)this.AFO_PROJEKTROLLE], -1));
                                }
                                    break;
                            case "AFO_QS_STATUS":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_QS_STATUS") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_QS_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_QS_STATUS[(int)this.AFO_QS_STATUS], -1));
                                }
                                    break;
                            case "AFO_QUELLTEXT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_QUELLTEXT") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_QUELLTEXT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_QUELLTEXT, -1));
                                }
                                break;
                            case "AFO_REGELUNGEN":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_REGELUNGEN") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_REGELUNGEN", OleDbType.VarChar, OdbcType.VarChar, this.AFO_REGELUNGEN, -1));
                                }
                                break;
                            case "AFO_STATUS":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_STATUS") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_STATUS[(int)this.AFO_STATUS], -1));
                                }
                                break;
                            case "AFO_TITEL":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_TITEL") == false)
                                {
                                    this.AFO_TITEL = this.Name;
                                    m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, this.Name, -1));
                                }
                                break;
                            case "AFO_VERERBUNG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_VERERBUNG") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_VERERBUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_VERERBUNG[(int)this.AFO_VERERBUNG], -1));
                                }
                                    break;
                            case "AFO_WV_ART":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_WV_ART") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART], -1));
                                }
                                    break;
                            case "AFO_WV_NACHWEISART":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_WV_NACHWEISART") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART], -1));
                                }
                                    break;
                            case "AFO_WV_PHASE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_WV_PHASE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_WV_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_PHASE[(int)this.AFO_WV_PHASE], -1));
                                }
                                    break;
                            case "B_BEMERKUNG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("B_BEMERKUNG") == false)
                                {
                                    m_Insert.Add(new DB_Insert("B_BEMERKUNG", OleDbType.VarChar, OdbcType.VarChar, this.B_BEMERKUNG, -1));
                                }
                                break;
                            case "CLARIFICATION":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("CLARIFICATION") == false)
                                {
                                    m_Insert.Add(new DB_Insert("CLARIFICATION", OleDbType.VarChar, OdbcType.VarChar, this.CLARIFICATION, -1));
                                }
                                break;
                            case "DB_Stand":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("DB_Stand") == false)
                                {
                                    m_Insert.Add(new DB_Insert("DB_Stand", OleDbType.VarChar, OdbcType.VarChar, this.DB_Stand, -1));
                                }
                                break;
                            case "IN_CATEGORY":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("IN_CATEGORY") == false)
                                {
                                    m_Insert.Add(new DB_Insert("IN_CATEGORY", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.IN_CATEGORY[(int)this.IN_CATEGORY], -1));
                                }
                                    break;
                            case "OBJECT_ID":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("OBJECT_ID") == false)
                                {
                                    this.OBJECT_ID = this.ID.ToString();
                                    m_Insert.Add(new DB_Insert("OBJECT_ID", OleDbType.VarChar, OdbcType.VarChar, this.ID.ToString(), -1));
                                }
                                break;
                            case "AFO_TEXT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_TEXT") == false)
                                {
                                    this.AFO_TEXT = this.Notes;
                                    m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, this.Notes, -1));
                                }
                                break;
                            case "UUID":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("UUID") == false)
                                {
                                    string UUID = Classifier_ID;
                                    UUID = UUID.Trim('{', '}');
                                    this.UUID = UUID;
                                    m_Insert.Add(new DB_Insert("UUID", OleDbType.VarChar, OdbcType.VarChar, this.UUID, -1));
                                }
                                break;
                            case "W_AFO_MANUAL":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_AFO_MANUAL") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_AFO_MANUAL", OleDbType.VarChar, OdbcType.VarChar, this.W_AFO_MANUAL, -1));
                                }
                                break;
                            case "W_AKTIVITAET":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_AKTIVITAET") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_AKTIVITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET], -1));
                                }
                                    break;
                            case "W_FREEZE_TITLE":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_FREEZE_TITLE") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_FREEZE_TITLE", OleDbType.VarChar, OdbcType.VarChar, this.W_FREEZE_TITLE.ToString(), -1));
                                }
                                break;
                            case "W_NUTZENDER":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_NUTZENDER") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_NUTZENDER", OleDbType.VarChar, OdbcType.VarChar, this.W_NUTZENDER, -1));
                                }
                                break;
                            case "W_OBJEKT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_OBJEKT") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_OBJEKT, -1));
                                }
                                break;
                            case "W_QUALITAET":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_QUALITAET") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_QUALITAET", OleDbType.VarChar, OdbcType.VarChar, this.W_QUALITAET, -1));
                                }
                                break;
                            case "W_RANDBEDINGUNG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_RANDBEDINGUNG") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_RANDBEDINGUNG", OleDbType.VarChar, OdbcType.VarChar, this.W_RANDBEDINGUNG, -1));
                                }
                                break;
                            case "W_SINGULAR":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_SINGULAR") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_SINGULAR", OleDbType.VarChar, OdbcType.VarChar, this.W_SINGULAR.ToString(), -1));
                                }
                                break;
                            case "W_SUBJEKT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_SUBJEKT") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_SUBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_SUBJEKT, -1));
                                }
                                break;
                            case "W_PROZESSWORT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_PROZESSWORT") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, this.W_PROZESSWORT, -1));
                                }
                                break;
                            case "W_ZU":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("W_ZU") == false)
                                {
                                    m_Insert.Add(new DB_Insert("W_ZU", OleDbType.VarChar, OdbcType.VarChar, this.W_ZU.ToString(), -1));
                                }
                                break;
                            case "AFO_VERBINDLICHKEIT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_VERBINDLICHKEIT") == false)
                                {
                                    m_Insert.Add(new DB_Insert("AFO_VERBINDLICHKEIT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_VERBINDLICHKEIT, -1));
                                }
                                break;
                            case "TagMask":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("TagMask") == false)
                                {
                                    m_Insert.Add(new DB_Insert("TagMask", OleDbType.VarChar, OdbcType.VarChar, this.TagMask, -1));
                                }
                                break;
                            case "RPI_Export":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("RPI_Export") == false)
                                {
                                    this.RPI_Export = true;
                                    m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, true.ToString(), -1));
                                }
                                break;
                            case "AFO_ABS_GEWICHT":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_ABS_GEWICHT") == false)
                                {
                                    this.RPI_Export = true;
                                    m_Insert.Add(new DB_Insert("AFO_ABS_GEWICHT", OleDbType.VarChar, OdbcType.VarChar, "", -1));
                                }
                                break;
                            case "AFO_RANG":
                                if (m_Insert.Select(x => x.Property).ToList().Contains("AFO_RANG") == false)
                                {
                                    this.RPI_Export = true;
                                    m_Insert.Add(new DB_Insert("AFO_RANG", OleDbType.VarChar, OdbcType.VarChar, "", -1));
                                }
                                break;
                        }

                        #endregion Hinzufügen Attribut Insert Liste
                    }

                    i1++;
                } while (i1 < m_TV.Count);

                if (flag_insert == true)
                {
                    //Insert Befehl TV
                    string[] m_Input_Property = { "Object_ID", "Property", "Value", "Notes", "ea_guid" };

                    //interface_TaggedValue.Insert_Tagged_Value(Data, m_Insert, tagged,  this.ID, m_Input_Property);
                    this.Update_TV(m_Insert, Data, Repository);
                    //Data.oLEDB_Interface.OLEDB_INSERT_One_Table_Multiple_TV(Data, m_Insert, tagged, "t_objectproperties", this.ID, m_Input_Property);
                }
            }
        }

        public void Update_Requirement_All(EA.Repository Repository, Database Data)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();

            // m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.ADMBw_Stereotype, -1));
            m_Insert.Add(new DB_Insert(Data.metamodel.Afo_Stereotype[0], OleDbType.VarChar, OdbcType.VarChar, Stereotype, -1));

            m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABNAHMEKRITERIUM, -1));
            m_Insert.Add(new DB_Insert("AFO_AG_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AG_ID, -1));
            m_Insert.Add(new DB_Insert("AFO_AN_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AN_ID, -1));
            m_Insert.Add(new DB_Insert("AFO_ANSPRECHPARTNER", OleDbType.VarChar, OdbcType.VarChar, this.Author, -1));
            m_Insert.Add(new DB_Insert("AFO_BEZUG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_BEZUG[(int)this.AFO_BEZUG], -1));
            m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_CPM_PHASE[(int)this.AFO_CPM_PHASE], -1));
            m_Insert.Add(new DB_Insert("AFO_DETAILSTUFE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_DETAILSTUFE[(int)this.AFO_DETAILSTUFE], -1));
            m_Insert.Add(new DB_Insert("AFO_FUNKTIONAL", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_FUNKTIONAL[(int)this.AFO_FUNKTIONAL], -1));
            m_Insert.Add(new DB_Insert("AFO_KLAERUNGSPUNKTE", OleDbType.VarChar, OdbcType.VarChar, this.AFO_KLAERUNGSPUNKTE, -1));
            m_Insert.Add(new DB_Insert("AFO_KRITIKALITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_KRITIKALITAET[(int)this.AFO_KRITIKALITAET], -1));
            m_Insert.Add(new DB_Insert("AFO_OPERATIVEBEWERTUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_OPERATIVEBEWERTUNG[(int)this.AFO_OPERATIVEBEWERTUNG], -1));
            m_Insert.Add(new DB_Insert("AFO_PRIORITAET_VERGABE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)this.AFO_PRIORITAET_VERGABE], -1));
            m_Insert.Add(new DB_Insert("AFO_PROJEKTROLLE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)this.AFO_PROJEKTROLLE], -1));
            m_Insert.Add(new DB_Insert("AFO_QS_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_QS_STATUS[(int)this.AFO_QS_STATUS], -1));
            m_Insert.Add(new DB_Insert("AFO_QUELLTEXT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_QUELLTEXT, -1));
            m_Insert.Add(new DB_Insert("AFO_REGELUNGEN", OleDbType.VarChar, OdbcType.VarChar, this.AFO_REGELUNGEN, -1));
            m_Insert.Add(new DB_Insert("AFO_HINWEIS", OleDbType.VarChar, OdbcType.VarChar, this.AFO_HINWEIS, -1));
            m_Insert.Add(new DB_Insert("AFO_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_STATUS[(int)this.AFO_STATUS], -1));
            this.AFO_TITEL = this.Name;
            m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, this.Name, -1));
            m_Insert.Add(new DB_Insert("AFO_VERERBUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_VERERBUNG[(int)this.AFO_VERERBUNG], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART], -1));
            m_Insert.Add(new DB_Insert("AFO_WV_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_PHASE[(int)this.AFO_WV_PHASE], -1));
            m_Insert.Add(new DB_Insert("B_BEMERKUNG", OleDbType.VarChar, OdbcType.VarChar, this.B_BEMERKUNG, -1));
            m_Insert.Add(new DB_Insert("CLARIFICATION", OleDbType.VarChar, OdbcType.VarChar, this.CLARIFICATION, -1));
            m_Insert.Add(new DB_Insert("DB_Stand", OleDbType.VarChar, OdbcType.VarChar, this.DB_Stand, -1));
            m_Insert.Add(new DB_Insert("IN_CATEGORY", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.IN_CATEGORY[(int)this.IN_CATEGORY], -1));
            this.OBJECT_ID = this.ID.ToString();
            m_Insert.Add(new DB_Insert("OBJECT_ID", OleDbType.VarChar, OdbcType.VarChar, this.ID.ToString(), -1));
            this.Notes = this.AFO_TEXT;
            EA.Element element = Repository.GetElementByGuid(this.Classifier_ID);
            element.Notes = this.AFO_TEXT;
            element.Update();
            this.AFO_TEXT = this.Notes;
            m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, this.Notes, -1));
            string UUID = Classifier_ID;
            UUID = UUID.Trim('{', '}');
            this.UUID = UUID;
            m_Insert.Add(new DB_Insert("UUID", OleDbType.VarChar, OdbcType.VarChar, this.UUID, -1));
            m_Insert.Add(new DB_Insert("W_AFO_MANUAL", OleDbType.VarChar, OdbcType.VarChar, this.W_AFO_MANUAL, -1));
            m_Insert.Add(new DB_Insert("W_AKTIVITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET], -1));
            m_Insert.Add(new DB_Insert("W_FREEZE_TITLE", OleDbType.VarChar, OdbcType.VarChar, this.W_FREEZE_TITLE.ToString(), -1));
            m_Insert.Add(new DB_Insert("W_NUTZENDER", OleDbType.VarChar, OdbcType.VarChar, this.W_NUTZENDER, -1));
            m_Insert.Add(new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_OBJEKT, -1));
            m_Insert.Add(new DB_Insert("W_QUALITAET", OleDbType.VarChar, OdbcType.VarChar, this.W_QUALITAET, -1));
            m_Insert.Add(new DB_Insert("W_RANDBEDINGUNG", OleDbType.VarChar, OdbcType.VarChar, this.W_RANDBEDINGUNG, -1));
            m_Insert.Add(new DB_Insert("W_SINGULAR", OleDbType.VarChar, OdbcType.VarChar, this.W_SINGULAR.ToString(), -1));
            m_Insert.Add(new DB_Insert("W_SUBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_SUBJEKT, -1));
            m_Insert.Add(new DB_Insert("W_ZU", OleDbType.VarChar, OdbcType.VarChar, this.W_ZU.ToString(), -1));
            m_Insert.Add(new DB_Insert("AFO_VERBINDLICHKEIT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_VERBINDLICHKEIT, -1));
            m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, this.RPI_Export.ToString(), -1));
            m_Insert.Add(new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, this.W_PROZESSWORT.ToString(), -1));

            this.Update_TV(m_Insert, Data, Repository);
        }

        public void Get_TV_Nachweisart(Database database)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            TV_Map help;

            if (database.metamodel.Nachweisart_Tagged_Values.Count > 0)
            {
                int i1 = 0;
                do
                {
                    m_Insert.Add(new DB_Insert(database.metamodel.Nachweisart_Tagged_Values[i1].Name, OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_WV_NACHWEISART[0], -1));

                    i1++;
                } while (i1 < database.metamodel.Nachweisart_Tagged_Values.Count);


                List<DB_Return> m_TV = this.Get_TV_ret(m_Insert, database);

                if (m_TV != null)
                {
                    int i2 = 0;
                    do
                    {
                        string Value = "";
                        string Note = "";
                        string insert = "";
                        bool flag_insert = false;
                        bool flag = false;
                        string recent = "";
                        i1 = 0;
                        do
                        {
                            flag = false;
                            if (m_TV[i1].Ret.Count > 1)
                            {
                                if (m_TV[i1].Ret[1] == null)//&& m_TV[i1].Ret[2] == null)
                                {
                                    flag_insert = true;
                                    flag = true;
                                }
                                /*   if (m_TV[i1].Ret[1] == "" && m_TV[i1].Ret[2] == "")
                                   {
                                       flag_insert = true;
                                   }*/
                                else
                                {
                                    if (m_TV[i1].Ret[1].ToString() != "<memo>")
                                    {
                                        recent = (string)m_TV[i1].Ret[1];
                                    }
                                    else
                                    {
                                        recent = (string)m_TV[i1].Ret[2];
                                    }

                                    if (recent == " " || recent == "")
                                    {
                                        recent = null;
                                    }

                                    #region Zuweisung Attribute
                                    switch ((string)m_TV[i1].Ret[0])
                                    {
                                        case "AFO_ABNAHMEKRITERIUM":
                                            this.AFO_ABNAHMEKRITERIUM = recent;
                                            break;
                                        case "AFO_WV_NACHWEISART":
                                            help = database.metamodel.AFO_Tagged_Values.Find(x => x.Name == "AFO_WV_NACHWEISART");
                                            if (help.Default_Value != recent)
                                            {
                                                this.AFO_WV_NACHWEISART = (AFO_WV_NACHWEISART)database.AFO_ENUM.Get_Index(database.AFO_ENUM.AFO_WV_NACHWEISART, recent);
                                            }
                                            else
                                            {
                                                this.AFO_WV_NACHWEISART = (AFO_WV_NACHWEISART)0;
                                            }
                                            break;
                                    }
                                    #endregion Zuweisung Attribute

                                }

                            }
                            else
                            {
                                flag_insert = true;
                                flag = true;
                            }

                            i1++;
                        } while (i1 < m_TV.Count);


                        i2++;
                    } while (i2 < m_TV.Count);
                }
            }
        }

        public void Update_TV_Nachweisart(Database database, EA.Repository repository)
        {
            if(this.m_Nachweisarten.Count > 0)
            {
                this.AFO_ABNAHMEKRITERIUM = this.m_Nachweisarten[0].abnahmekriterium;
                this.AFO_WV_NACHWEISART = this.m_Nachweisarten[0].nachweisart;
                List<DB_Insert> m_Insert = new List<DB_Insert>();

                m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABNAHMEKRITERIUM, -1));
                m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART], -1));


                this.Update_TV(m_Insert, database, repository);
            }


        
        }

        public void Update_TV_Gewichtung(Database database, EA.Repository repository)
        {

                List<DB_Insert> m_Insert = new List<DB_Insert>();

                m_Insert.Add(new DB_Insert("AFO_RANG", OleDbType.VarChar, OdbcType.VarChar, this.AFO_RANG, -1));
                m_Insert.Add(new DB_Insert("AFO_ABS_GEWICHT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABS_GEWICHT, -1));


                this.Update_TV(m_Insert, database, repository);
       }



        
        #endregion TV

        #region Get
        /// <summary>
        /// Alle mit dem Requiremnt verbunden InformationElement erhalten
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Data"></param>
        public void Get_InformationElement(EA.Repository Repository, Database Data)
        {
            //Erdt InfoElem reseten
            this.m_InformationElement.Clear();
            /*  XML xml = new XML();
                  DB_Command command = new DB_Command();
                    List<string> GUIDS = new List<string>();


                    List<string> m_Type_Info = Data.metamodel.m_InformationItem.Select(x => x.Type).ToList();
                    List<string> m_Stereotype = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();

                    string SQL2 = "SELECT ea_guid FROM t_object WHERE Object_Type IN("+command.Add_Parameters_Pre(m_Type_Info.ToArray())+") AND Object_ID IN (SELECT End_Object_ID FROM t_connector WHERE Start_Object_ID = ? AND Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype.ToArray()) + "));";

                    OleDbCommand SELECT1 = new OleDbCommand(SQL2, (OleDbConnection)Data.oLEDB_Interface.dbConnection);

                    List<DB_Input[]> ee = new List<DB_Input[]>();
                    List<int> help_guid = new List<int>();
                    Repository_Element rep = new Repository_Element();
                    rep.Classifier_ID = this.Classifier_ID;
                    help_guid.Add(rep.Get_Object_ID(Data));

                    ee.Add(help_guid.Select(x => new DB_Input(x, null)).ToArray());
                    ee.Add(m_Stereotype.Select(x => new DB_Input(-1, x)).ToArray());
                    ee.Add(m_Type_Info.Select(x => new DB_Input(-1, x)).ToArray());

                    OleDbType[] m_input_Type = { OleDbType.BigInt, OleDbType.VarChar, OleDbType.VarChar };
                    Data.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
                    string[] m_output = { "ea_guid" };

                    List<DB_Return> m_ret3 = Data.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

              // List<string> m_Type_Info = Data.metamodel.m_InformationItem.Select(x => x.Type).ToList();

              //List<string> m_Stereotype = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
             // List<DB_Return> m_ret3 = interface_Collection_OleDB.Get_Elements_GUID(Data, )
             */
            List<string> GUIDS = new List<string>();
            List<string> m_Type_Info = Data.metamodel.m_InformationItem.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Info = Data.metamodel.m_InformationItem.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = Data.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            m_help.Add(this.Classifier_ID);
            GUIDS = interface_Connectors.Get_Supplier_Element_By_Connector(Data, m_help, m_Type_Info, m_Stereotype_Info, m_Type_Con, m_Stereotype_Con);

        /*    if (m_ret3[0].Ret.Count > 1)
            {
                GUIDS = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                GUIDS= (null);
            }*/


            if (GUIDS != null)
            {
                int i1 = 0;
                do
                {
                    InformationElement infoelem = Data.Check_InformationElement(GUIDS[i1]);

                    if (infoelem != null)
                    {
                        if (this.m_InformationElement.Contains(infoelem) == false)
                        {
                            this.m_InformationElement.Add(infoelem);
                            this.m_InformationElement_Name.Add(infoelem.Get_Name(Data));

                        }

                    }

                    i1++;
                } while (i1 < GUIDS.Count);
            }
        }
        #region constraints
        /// <summary>
        /// Alle mit dem Requiremnt verbunden DesignConstraint erhalten
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Data"></param>
        public void Get_DesignConstraint(EA.Repository Repository, Database Data)
        {
            //Erdt InfoElem reseten
            this.m_Design.Clear();
            
            List<string> GUIDS = new List<string>();

            List<string> m_Type_Design = Data.metamodel.m_Design_Constraint.Select(x => x.Type).ToList();
            List<string> m_Stereotype_design = Data.metamodel.m_Design_Constraint.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = Data.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            m_help.Add(this.Classifier_ID);
            GUIDS = interface_Connectors.Get_Supplier_Element_By_Connector(Data, m_help, m_Type_Design, m_Stereotype_design, m_Type_Con, m_Stereotype_Con);

            if (GUIDS != null)
            {
                int i1 = 0;
                do
                {
                    OperationalConstraint opcon = Data.Check_Design_Constraint(GUIDS[i1]);

                    if (opcon != null)
                    {
                        if (this.m_Design.Contains(opcon) == false)
                        {
                            this.m_Design.Add(opcon);
                        }

                    }
                    else
                    {
                        OperationalConstraint opcon_new = new OperationalConstraint(GUIDS[i1], Data, Repository);

                        Data.m_DesignConstraint.Add(opcon_new);
                        this.m_Design.Add(opcon_new);
                    }

                    i1++;
                } while (i1 < GUIDS.Count);
            }
        }
        /// <summary>
        /// Alle mit dem Requiremnt verbunden DesignConstraint erhalten
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Data"></param>
        public void Get_UmweltConstraint(EA.Repository Repository, Database Data)
        {
            //Erdt InfoElem reseten
            this.m_Umwelt.Clear();
           
            List<string> GUIDS = new List<string>();

            List<string> m_Type_Umwelt = Data.metamodel.m_Constraint_Umwelt.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Umwelt = Data.metamodel.m_Constraint_Umwelt.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = Data.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            m_help.Add(this.Classifier_ID);
            GUIDS = interface_Connectors.Get_Supplier_Element_By_Connector(Data, m_help, m_Type_Umwelt, m_Stereotype_Umwelt, m_Type_Con, m_Stereotype_Con);

            if (GUIDS != null)
            {
                int i1 = 0;
                do
                {
                    OperationalConstraint opcon = Data.Check_Umwelt_Constraint(GUIDS[i1]);

                    if (opcon != null)
                    {
                        if (this.m_Umwelt.Contains(opcon) == false)
                        {
                            this.m_Umwelt.Add(opcon);
                        }

                    }
                    else
                    {
                        OperationalConstraint opcon_new = new OperationalConstraint(GUIDS[i1], Data, Repository);

                        Data.m_UmweltConstraint.Add(opcon_new);
                        this.m_Umwelt.Add(opcon_new);
                    }

                    i1++;
                } while (i1 < GUIDS.Count);
            }
        }
        /// <summary>
        /// Alle mit dem Requiremnt verbunden DesignConstraint erhalten
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Data"></param>
        public void Get_Typevertreter(EA.Repository Repository, Database Data)
        {
            //Erdt InfoElem reseten
            this.m_Typevertreter.Clear();

            List<string> GUIDS = new List<string>();

            List<string> m_Type_Typde_def = Data.metamodel.m_Typvertreter_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Type_def = Data.metamodel.m_Typvertreter_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Typde_usage = Data.metamodel.m_Typvertreter_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Type_usage = Data.metamodel.m_Typvertreter_Usage.Select(x => x.Stereotype).ToList();

            List<string> m_Type_Type_elem = new List<string>();
            List<string> m_Stereotype_Type_elem = new List<string>();

            m_Type_Type_elem.AddRange(m_Type_Typde_def);
            m_Type_Type_elem.AddRange(m_Type_Typde_usage);

            m_Stereotype_Type_elem.AddRange(m_Stereotype_Type_def);
            m_Stereotype_Type_elem.AddRange(m_Stereotype_Type_usage);

            List<string> m_Type_Con = Data.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = Data.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            m_help.Add(this.Classifier_ID);
            GUIDS = interface_Connectors.Get_Supplier_Element_By_Connector(Data, m_help, m_Type_Type_elem, m_Stereotype_Type_elem, m_Type_Con, m_Stereotype_Con);

            if (GUIDS != null)
            {
                int i1 = 0;
                do
                {
                    NodeType opcon = Data.Check_Typvertreter(GUIDS[i1]);

                    if (opcon != null)
                    {
                        if (this.m_Typevertreter.Contains(opcon) == false)
                        {
                            this.m_Typevertreter.Add(opcon);
                        }

                    }
                    else
                    {
                        NodeType opcon_new = new NodeType(null, null, null);
                        opcon_new.Classifier_ID = GUIDS[i1];

                        Data.m_Typvertreter.Add(opcon_new);
                        this.m_Typevertreter.Add(opcon_new);
                    }

                    i1++;
                } while (i1 < GUIDS.Count);
            }
        }
        #endregion
        /// <summary>
        /// Es werden die zugehörgigen Capability aus dem Modell gesucht
        /// </summary>
        /// <param name="repository"></param>
        /// <param name="Data"></param>
        public void Check_Capability(EA.Repository repository, Database Data)
        {
           
            List<string> m_Capability_Type = Data.metamodel.m_Capability.Select(x => x.Type).ToList();
            List<string> m_Capability_Stereotype = Data.metamodel.m_Capability.Select(x => x.Stereotype).ToList();
            List<string> m_Stereotype_Con = Data.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = Data.metamodel.m_Derived_Capability.Select(x => x.Type).ToList();
            List<string> m_Connector_GUID = new List<string>();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            m_Connector_GUID = interface_Connectors.Get_Connector_By_Client_GUID(Data, this.Classifier_ID, m_Capability_Type, m_Capability_Stereotype, m_Type_Con, m_Stereotype_Con);

            if (m_Connector_GUID != null)
            {
                int i1 = 0;
                do
                {
                    EA.Connector recent_Con = repository.GetConnectorByGuid(m_Connector_GUID[i1]);
                    EA.Element recent_Ele = repository.GetElementByID(recent_Con.SupplierID);

                    var check = Data.Check_Capability_Database(recent_Ele.ElementGUID);

                    if (check != null)
                    {
                        /* if(check.m_Requirement.Contains(this) == false)
                         {
                             check.m_Requirement.Add(this);
                         }
                         */
                        if (this.m_Capability.Contains(check) == false)
                        {
                            this.m_Capability.Add(check);

                        }

                    }

                    i1++;
                } while (i1 < m_Connector_GUID.Count);
            }


        }

        public void Get_Connector_Requirements(Database database, EA.Repository repository)
        {


            if (database.metamodel.m_Afo_Con.Count > 0)
            {
                DB_Command command = new DB_Command();
                int i1 = 0;
                do
                {
                    //  XML xML = new XML();
                    List<string> m_Type_con = database.metamodel.m_Afo_Con[i1].Select(x => x.Type).ToList();
                    List<string> m_Stereotype_con = database.metamodel.m_Afo_Con[i1].Select(x => x.Stereotype).ToList();

                    List<string> m_Type = database.metamodel.m_Requirement.Select(x => x.Type).ToList();
                    List<string> m_Stereotype = database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList();
                    try
                    {
                        

                        if (database.metamodel.m_Afo_Con[i1].Select(x => x.Type).ToList() != null)
                        {

                            Interface_Connectors_Requirement interface_Connectors = new Interface_Connectors_Requirement();
                            //  List<string> m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type, m_Stereotype);
                            List<string> m_guid = new List<string>();
                            m_guid.Add(this.Classifier_ID);
                            List<string> m_GUID = new List<string>();
                            if (i1 == 0)
                            {
                                m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con, database.metamodel.m_Afo_Con[i1][0].direction);
                            }
                            else
                            {
                                m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_con, m_Stereotype_con);
                            }




                            if (m_GUID != null)
                            {
                                int i2 = 0;

                                do
                                {
                                    Requirement req = database.Check_Requirement(m_GUID[i2]);

                                    if (req != null)
                                    {
                                        if (this.m_Requirements[i1].Contains(req) == false)
                                        {
                                            this.m_Requirements[i1].Add(req);
                                        }
                                    }
                                    else
                                    {
                                        if(i1 == 5)
                                        {
                                            Requirement new_req = new Requirement(m_GUID[i2], database.metamodel);
                                            new_req.Get_Tagged_Values_From_Requirement(m_GUID[i2], repository, database);

                                            database.m_Requirement.Add(new_req);

                                        }
                                    }

                                    i2++;
                                } while (i2 < m_GUID.Count);
                            }

                        }
                    }
                    catch (Exception err)
                    {
                        MessageBox.Show("AFO Relation: " + m_Stereotype_con[i1]+ ": " + err.Message);
                    }
                    

                    i1++;
                } while (i1 < database.metamodel.m_Afo_Con.Count);


            }
        }

        public void Get_Connector_Replaces(Database database, EA.Repository repository)
        {


            if (database.metamodel.m_Afo_Con.Count > 0)
            {
                DB_Command command = new DB_Command();
               
                    //  XML xML = new XML();
                    List<string> m_Type_con = database.metamodel.m_Afo_Con[3].Select(x => x.Type).ToList();
                    List<string> m_Stereotype_con = database.metamodel.m_Afo_Con[3].Select(x => x.Stereotype).ToList();

                    List<string> m_Type = database.metamodel.m_Requirement.Select(x => x.Type).ToList();
                    List<string> m_Stereotype = database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList();
                    try
                    {


                        if (database.metamodel.m_Afo_Con[3].Select(x => x.Type).ToList() != null)
                        {

                            Interface_Connectors_Requirement interface_Connectors = new Interface_Connectors_Requirement();
                            //  List<string> m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type, m_Stereotype);
                            List<string> m_guid = new List<string>();
                            m_guid.Add(this.Classifier_ID);
                            List<string> m_GUID = new List<string>();
                            if (3 == 0)
                            {
                                m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con, database.metamodel.m_Afo_Con[3][0].direction);
                            }
                            else
                            {
                                m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_con, m_Stereotype_con);
                            }




                            if (m_GUID != null)
                            {
                                int i2 = 0;

                                do
                                {
                                    Requirement req = database.Check_Requirement(m_GUID[i2]);

                                    if (req != null)
                                    {
                                        if (this.m_Requirements[3].Contains(req) == false)
                                        {
                                            this.m_Requirements[3].Add(req);
                                        }
                                    }

                                    i2++;
                                } while (i2 < m_GUID.Count);
                            }

                        }
                    }
                    catch (Exception err)
                    {
                        MessageBox.Show("AFO Relation: " + m_Stereotype_con[0] + ": " + err.Message);
                    }



            }
        }

        public void Get_Connector_Refines(Database database, EA.Repository repository)
        {


            if (database.metamodel.m_Afo_Con.Count > 0)
            {
                DB_Command command = new DB_Command();

                //  XML xML = new XML();
                List<string> m_Type_con = database.metamodel.m_Afo_Con[0].Select(x => x.Type).ToList();
                List<string> m_Stereotype_con = database.metamodel.m_Afo_Con[0].Select(x => x.Stereotype).ToList();

                List<string> m_Type = database.metamodel.m_Requirement.Select(x => x.Type).ToList();
                List<string> m_Stereotype = database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList();
                try
                {


                    if (database.metamodel.m_Afo_Con[0].Select(x => x.Type).ToList() != null)
                    {

                        Interface_Connectors interface_Connectors = new Interface_Connectors();
                        //  List<string> m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type, m_Stereotype);
                        List<string> m_guid = new List<string>();
                        m_guid.Add(this.Classifier_ID);
                        List<string> m_GUID = new List<string>();
                        if (0 == 0)
                        {
                            m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con);
                        }
                        else
                        {
                            m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_con, m_Stereotype_con);
                        }




                        if (m_GUID != null)
                        {
                            int i2 = 0;

                            do
                            {
                                Requirement req = database.Check_Requirement(m_GUID[i2]);

                                if (req != null)
                                {
                                    if (this.m_Requirements[0].Contains(req) == false)
                                    {
                                        this.m_Requirements[0].Add(req);
                                    }
                                }

                                i2++;
                            } while (i2 < m_GUID.Count);
                        }

                    }
                }
                catch (Exception err)
                {
                    MessageBox.Show("AFO Relation: " + m_Stereotype_con[0] + ": " + err.Message);
                }



            }
        }

        public void Get_Connector_Duplicate(Database database, EA.Repository repository)
        {


            if (database.metamodel.m_Afo_Con.Count > 0)
            {
                DB_Command command = new DB_Command();

                //  XML xML = new XML();
                List<string> m_Type_con = database.metamodel.m_Afo_Con[1].Select(x => x.Type).ToList();
                List<string> m_Stereotype_con = database.metamodel.m_Afo_Con[1].Select(x => x.Stereotype).ToList();

                List<string> m_Type = database.metamodel.m_Requirement.Select(x => x.Type).ToList();
                List<string> m_Stereotype = database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList();
                try
                {


                    if (database.metamodel.m_Afo_Con[1].Select(x => x.Type).ToList() != null)
                    {

                        Interface_Connectors_Requirement interface_Connectors = new Interface_Connectors_Requirement();
                        //  List<string> m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type, m_Stereotype);
                        List<string> m_guid = new List<string>();
                        m_guid.Add(this.Classifier_ID);
                        List<string> m_GUID = new List<string>();
                        if (0 == 0)
                        {
                            m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con, database.metamodel.m_Afo_Con[1][0].direction);
                        }
                        else
                        {
                            m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_con, m_Stereotype_con);
                        }




                        if (m_GUID != null)
                        {
                            int i2 = 0;

                            do
                            {
                                Requirement req = database.Check_Requirement(m_GUID[i2]);

                                if (req != null)
                                {
                                    if (this.m_Requirements[1].Contains(req) == false)
                                    {
                                        this.m_Requirements[1].Add(req);
                                    }
                                }

                                i2++;
                            } while (i2 < m_GUID.Count);
                        }

                    }
                }
                catch (Exception err)
                {
                    MessageBox.Show("AFO Relation: " + m_Stereotype_con[0] + ": " + err.Message);
                }



            }
        }

        public void Get_Nachweisarten(Database database, EA.Repository repository, bool Nachweisart_uebernahme)
        {
            //Alle Nachweisarten erhalten, welche mit der Anforderung verknüpft sind
            List<string> m_Nachweisart_Type = database.metamodel.m_Nachweisart.Select(x => x.Type).ToList();
            List<string> m_Nachweisart_Stereotype = database.metamodel.m_Nachweisart.Select(x => x.Stereotype).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Con_Nachweisart.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = database.metamodel.m_Con_Nachweisart.Select(x => x.Type).ToList();
            //List<string> m_Connector_GUID = new List<string>();
            List<string> m_GUID = new List<string>();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            //m_Connector_GUID = interface_Connectors.Get_Connector_By_Client_GUID(database, this.Classifier_ID, m_Nachweisart_Type, m_Nachweisart_Stereotype, m_Type_Con, m_Stereotype_Con);
            List<string> m_GUID_Supplier = new List<string>();
            m_GUID_Supplier.Add(this.Classifier_ID);

            // m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_Con, m_Stereotype_Con);
            m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_GUID_Supplier, m_Nachweisart_Type, m_Nachweisart_Stereotype, m_Type_Con, m_Stereotype_Con);
            if (m_GUID != null)
            {
                if(m_GUID.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                       // EA.Connector recent_Con = repository.GetConnectorByGuid(m_Connector_GUID[i1]);
                       // EA.Element recent_Ele = repository.GetElementByID(recent_Con.SupplierID);

                        List<Nachweisart> m_help = database.m_Nachweisarten.Where(x => x.Classifier_ID == m_GUID[i1]).ToList();

                        if(m_help.Count > 0)
                        {
                            if(this.m_Nachweisarten.Contains(m_help[0]) == false)
                            {
                                this.m_Nachweisarten.Add(m_help[0]);

                                if(Nachweisart_uebernahme == true)
                                {
                                    this.AFO_WV_NACHWEISART = m_help[0].nachweisart;
                                }
                             
                            }
                          
                        }
                        else
                        {
                            Nachweisart neu_ = new Nachweisart(m_GUID[i1], database, repository);
                            database.m_Nachweisarten.Add(neu_);
                            if (this.m_Nachweisarten.Contains(neu_) == false)
                            {
                                this.m_Nachweisarten.Add(neu_);
                                if (Nachweisart_uebernahme == true)
                                {
                                    this.AFO_WV_NACHWEISART = neu_.nachweisart;
                                }
                            }
                        }


                        i1++;
                    } while (i1 < m_GUID.Count);
                }
            }
            //mit dieser Anforderung verknüpfen


        }

        public void Get_TF_Leistungswerte(Database database, EA.Repository repository)
        {


            if (database.metamodel.m_Afo_Con.Count > 0 && this.AFO_CPM_PHASE == AFO_CPM_PHASE.Eins && this.RPI_Export == true)
            {
              
                //  XML xML = new XML();
                List<string> m_Type_con = database.metamodel.m_Afo_Con[0].Select(x => x.Type).ToList();
                List<string> m_Stereotype_con = database.metamodel.m_Afo_Con[0].Select(x => x.Stereotype).ToList();

                List<string> m_Type = database.metamodel.m_Requirement.Select(x => x.Type).ToList();
                List<string> m_Stereotype = database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList();
                try
                {


                    if (database.metamodel.m_Afo_Con[0].Select(x => x.Type).ToList() != null)
                    {

                        Interface_Connectors interface_Connectors = new Interface_Connectors();
                        //  List<string> m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type, m_Stereotype);
                        List<string> m_guid = new List<string>();
                        m_guid.Add(this.Classifier_ID);
                        List<string> m_GUID = new List<string>();
                        if (0 == 0)
                        {
                            m_GUID = interface_Connectors.Get_Client_Element_By_Connector(database, m_guid, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con);
                        }
                        else
                        {
                            m_GUID = interface_Connectors.Get_m_Supplier_By_ClientGUID_And_Connector(database, this.Classifier_ID, m_Type_con, m_Stereotype_con);
                        }




                        if (m_GUID != null)
                        {
                            int i2 = 0;

                            do
                            {
                                Requirement req = database.Check_Requirement(m_GUID[i2]);

                                if (req != null)
                                {
                                    if (this.m_Requirements[0].Contains(req) == false)
                                    {
                                        if(req.AFO_CPM_PHASE == AFO_CPM_PHASE.Zwei)
                                        {
                                            this.m_Requirement_TFL.Add(req);
                                        }
                                       
                                    }
                                }
                                else
                                {
                                    Requirement req_new = new Requirement(m_GUID[i2], database.metamodel);
                                    req_new.ID =  req_new.Get_Object_ID(database);
                                    req_new.Get_RPI_Export(database);
                                    req_new.Get_Phase(database);
                                    req_new.Get_Titel_AGID(database);
                                    req_new.Get_Anforderungsart(database);

                                    if(req_new.AFO_CPM_PHASE == AFO_CPM_PHASE.Zwei && req_new.AFO_WV_ART == AFO_WV_ART.Anforderung)
                                    {
                                        this.m_Requirement_TFL.Add(req_new);
                                        database.m_Requirement.Add(req_new);
                                    }
                                }


                                i2++;
                            } while (i2 < m_GUID.Count);
                        }

                    }
                }
                catch (Exception err)
                {
                    MessageBox.Show("AFO Technisch Funktionale Leistungswerte: " + m_Stereotype_con[0] + ": " + err.Message);
                }



            }
        }
        #endregion Get

        #region Check
        public void Check_Klärungspunkte(List<Issue> m_Issue, Database database, EA.Repository repository)
        {
            bool update = false;

            if(database.metamodel.flag_issue_aenderungen_export == true)
            {
                if (m_Issue.Count > 0)
                {
                    if (this.AFO_KLAERUNGSPUNKTE == null)
                    {
                        this.AFO_KLAERUNGSPUNKTE = "";
                    }

                    int i1 = 0;
                    do
                    {


                        if (this.AFO_KLAERUNGSPUNKTE.Contains(m_Issue[i1].Notes) == false)
                        {
                            this.AFO_KLAERUNGSPUNKTE = this.AFO_KLAERUNGSPUNKTE + " \n " + m_Issue[i1].Notes;
                            update = true;
                        }

                        i1++;
                    } while (i1 < m_Issue.Count);
                }

                if (update == true)
                {
                    List<DB_Insert> m_Insert = new List<DB_Insert>();
                    m_Insert.Add(new DB_Insert("AFO_KLAERUNGSPUNKTE", OleDbType.VarChar, OdbcType.VarChar, this.AFO_KLAERUNGSPUNKTE, -1));
                    this.Update_TV(m_Insert, database, repository);
                }
            }
        }

        public List<string> Check_Nachweisarten_Mehrere(Database database, EA.Repository repository)
        {
            List<string> m_ret = new List<string>();
            List<string> m_Multi = new List<string>();

            this.Get_Nachweisarten(database, repository, true);

            #region Mehrere 
            if(this.m_Nachweisarten.Count > 1)
            {

                m_Multi.Add(this.Classifier_ID);
                m_Multi.AddRange(this.m_Nachweisarten.Select(x => x.Classifier_ID).ToList());

                m_ret.AddRange(m_Multi);

                

            }
            else
            {
                m_ret.Add(null); 
            }
            #endregion


            return (m_ret);
        }

        public List<string> Check_Nachweisarten_Abgleich(Database database, EA.Repository repository)
        {
            List<string> m_ret = new List<string>();

            this.Get_TV_Nachweisart(database);

            if(this.m_Nachweisarten.Count > 0)
            {
                if (this.AFO_WV_NACHWEISART != this.m_Nachweisarten[0].nachweisart || this.AFO_ABNAHMEKRITERIUM != this.m_Nachweisarten[0].abnahmekriterium)
                {
                    m_ret.Add(this.Classifier_ID);
                    m_ret.Add(this.m_Nachweisarten[0].Classifier_ID);
                }
                else
                {
                    m_ret.Add(null);
                }
            }
            else
            {
                m_ret.Add(null);
            }



            return (m_ret);
        }

        public void Get_System(Database database, EA.Repository repository)
        {
            //System erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Elements_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Elements_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Elements_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Elements_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client,m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);

            if(m_GUID_Con_Def != null)
            {
                int i1 = 0;
                do
                {
                    //Prüfen, ob NodeType bereits vorhanden
                    List<NodeType> m_check_nt = database.m_NodeType.Where(x => x.Classifier_ID == m_GUID_Con_Def[i1]).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.nodeType = m_check_nt[0];

                        if(this.m_nodeTypes.Contains(m_check_nt[0]) == false)
                        {
                            this.m_nodeTypes.Add(m_check_nt[0]);
                        }
                        
                    }
                    else
                    {
                        NodeType recent = new NodeType(null, null, null);
                        recent.Classifier_ID = m_GUID_Con_Def[0];
                        recent.Get_TV_reduced(database, repository);

                        this.nodeType = recent;
                        if (this.m_nodeTypes.Contains(recent) == false)
                        {
                            this.m_nodeTypes.Add(recent);
                        }
                    }

                    i1++;
                } while (i1 < m_GUID_Con_Def.Count);

              

              
               
                

            }
            //else
            //{ 
                List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                if(m_GUID_Con_Usage != null)
                {
                    NodeType recent = new NodeType(null, null, null);
                    recent.Classifier_ID = m_GUID_Con_Usage[0];

                    NodeType classifier = new NodeType(null, null, null);
                    classifier.Classifier_ID = recent.Get_Classifier(database);
                    //Prüfen, ob NodeType bereits vorhanden
                    List<NodeType> m_check_nt = database.m_NodeType.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                    if(m_check_nt.Count > 0)
                    {
                        this.nodeType = m_check_nt[0];
                        if (this.m_nodeTypes.Contains(m_check_nt[0]) == false)
                        {
                            this.m_nodeTypes.Add(m_check_nt[0]);
                        }
                    }
                    else
                    {
                        classifier.Get_TV_reduced(database, repository);

                        this.nodeType = classifier;
                        if (this.m_nodeTypes.Contains(classifier) == false)
                        {
                            this.m_nodeTypes.Add(classifier);
                        }
                    }
                   
                }

           // }

            if(this.m_nodeTypes.Count > 0)
            {

                List<NodeType> m_recent = new List<NodeType>();

                try
                {
                    m_recent = this.m_nodeTypes.Where(x => this.W_SUBJEKT.Contains(x.SYS_KUERZEL) == true).ToList();
                }
                catch
                {
                    m_recent =  new List<NodeType>();
                }
               

                if(m_recent != null)
                {
                    if(m_recent.Count > 0)
                    {
                        this.nodeType = m_recent[0];
                    }
                }
            }

         /*   if(nodeType.Classifier_ID != null)
            {
                this.W_SUBJEKT = this.nodeType.W_Artikel+" "+ this.nodeType.Name;
               
            }*/

        }

        public void Get_SysElement_Realisierung(Database database, EA.Repository repository)
        {
            //System erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            List<string> m_Type_Con = database.metamodel.m_Derived_SysElement_Realsiserung.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_SysElement_Realsiserung.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Def = new List<string>();

            if (database.metamodel.m_Derived_SysElement_Realsiserung[0].direction == true)
            {
                m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);

            }
            else
            {
                m_GUID_Con_Def = interface_Connectors.Get_Client_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);
            }



            if (m_GUID_Con_Def != null)
            {
                int i1 = 0;
                do
                {
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[i1]).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement_Real = m_check_nt[0];

                        if (this.sysElements_Real.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements_Real.Add(m_check_nt[0]);
                        }

                    }
                    else
                    {
                        SysElement recent = new SysElement(null, null, null);
                        recent.Classifier_ID = m_GUID_Con_Def[0];
                        recent.Get_TV_reduced(database, repository);

                        this.sysElement_Real = recent;
                        if (this.sysElements_Real.Contains(recent) == false)
                        {
                            this.sysElements_Real.Add(recent);
                        }
                    }

                    i1++;
                } while (i1 < m_GUID_Con_Def.Count);

                List<string> m_GUID_Con_Usage = new List<string>();


                if (database.metamodel.m_Derived_SysElement_Realsiserung[0].direction == true)
                {
                    m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                }
                else
                {
                    m_GUID_Con_Usage = interface_Connectors.Get_Client_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);
                }

               

                if (m_GUID_Con_Usage != null)
                {
                    SysElement recent = new SysElement(null, null, null);
                    recent.Classifier_ID = m_GUID_Con_Usage[0];

                    SysElement classifier = new SysElement(null, null, null);
                    classifier.Classifier_ID = recent.Get_Classifier(database);
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement_Real = m_check_nt[0];
                        if (this.sysElements_Real.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements_Real.Add(m_check_nt[0]);
                        }
                    }
                    else
                    {
                        classifier.Get_TV_reduced(database, repository);

                        this.sysElement_Real = classifier;
                        if (this.sysElements_Real.Contains(classifier) == false)
                        {
                            this.sysElements_Real.Add(classifier);
                        }
                    }

                }

                // }

                if (this.sysElements_Real.Count > 0)
                {

                    List<SysElement> m_recent = new List<SysElement>();

                    try
                    {
                        m_recent = this.sysElements_Real.Where(x => this.W_SUBJEKT.Contains(x.SYS_KUERZEL) == true).ToList();
                    }
                    catch
                    {
                        m_recent = new List<SysElement>();
                    }


                    if (m_recent != null)
                    {
                        if (m_recent.Count > 0)
                        {
                            this.sysElement_Real = m_recent[0];
                        }
                    }
                }
            }
            /*  if(m_Type_Def.Count > 0 && m_Type_Con.Count > 0)
              {

                  List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);

                  if (m_GUID_Con_Def != null)
                  {
                      //Prüfen, ob NodeType bereits vorhanden
                      List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[0]).ToList();

                      if (m_check_nt.Count > 0)
                      {
                          this.sysElement = m_check_nt[0];
                      }
                      else
                      {
                          SysElement recent = new SysElement(null, null, null);
                          recent.Classifier_ID = m_GUID_Con_Def[0];
                          recent.Get_TV_reduced(database, repository);

                          this.sysElement = recent;
                      }



                  }
                  else
                  {
                      List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                      if (m_GUID_Con_Usage != null)
                      {
                          SysElement recent = new SysElement(null, null, null);
                          recent.Classifier_ID = m_GUID_Con_Usage[0];

                          SysElement classifier = new SysElement(null, null, null);
                          classifier.Classifier_ID = recent.Get_Classifier(database);
                          //Prüfen, ob NodeType bereits vorhanden
                          List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                          if (m_check_nt.Count > 0)
                          {
                              this.sysElement = m_check_nt[0];
                          }
                          else
                          {
                              classifier.Get_TV_reduced(database, repository);

                              this.sysElement = classifier;
                          }

                      }

                  }

              }
            */

            /*   if(nodeType.Classifier_ID != null)
               {
                   this.W_SUBJEKT = this.nodeType.W_Artikel+" "+ this.nodeType.Name;

               }*/

        }

        public void Get_SysElement(Database database, EA.Repository repository)
        {
            //System erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            List<string> m_Type_Con = database.metamodel.m_Derived_SysElement.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_SysElement.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);


            if (m_GUID_Con_Def != null)
            {
                int i1 = 0;
                do
                {
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[i1]).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement = m_check_nt[0];

                        if (this.sysElements.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements.Add(m_check_nt[0]);
                        }

                    }
                    else
                    {
                        SysElement recent = new SysElement(null, null, null);
                        recent.Classifier_ID = m_GUID_Con_Def[0];
                        recent.Get_TV_reduced(database, repository);

                        this.sysElement = recent;
                        if (this.sysElements.Contains(recent) == false)
                        {
                            this.sysElements.Add(recent);
                        }
                    }

                    i1++;
                } while (i1 < m_GUID_Con_Def.Count);


                List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                if(m_GUID_Con_Usage != null)
                {
                    SysElement recent = new SysElement(null, null, null);
                    recent.Classifier_ID = m_GUID_Con_Usage[0];

                    SysElement classifier = new SysElement(null, null, null);
                    classifier.Classifier_ID = recent.Get_Classifier(database);
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                    if(m_check_nt.Count > 0)
                    {
                        this.sysElement = m_check_nt[0];
                        if (this.sysElements.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements.Add(m_check_nt[0]);
                        }
                    }
                    else
                    {
                        classifier.Get_TV_reduced(database, repository);

                        this.sysElement = classifier;
                        if (this.sysElements.Contains(classifier) == false)
                        {
                            this.sysElements.Add(classifier);
                        }
                    }
                   
                }

           // }

            if(this.sysElements.Count > 0)
            {

                List<SysElement> m_recent = new List<SysElement>();

                try
                {
                    m_recent = this.sysElements.Where(x => this.W_SUBJEKT.Contains(x.SYS_KUERZEL) == true).ToList();
                }
                catch
                {
                    m_recent =  new List<SysElement>();
                }
               

                if(m_recent != null)
                {
                    if(m_recent.Count > 0)
                    {
                        this.sysElement = m_recent[0];
                    }
                }
            }
            }
                /*  if(m_Type_Def.Count > 0 && m_Type_Con.Count > 0)
                  {

                      List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);

                      if (m_GUID_Con_Def != null)
                      {
                          //Prüfen, ob NodeType bereits vorhanden
                          List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[0]).ToList();

                          if (m_check_nt.Count > 0)
                          {
                              this.sysElement = m_check_nt[0];
                          }
                          else
                          {
                              SysElement recent = new SysElement(null, null, null);
                              recent.Classifier_ID = m_GUID_Con_Def[0];
                              recent.Get_TV_reduced(database, repository);

                              this.sysElement = recent;
                          }



                      }
                      else
                      {
                          List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                          if (m_GUID_Con_Usage != null)
                          {
                              SysElement recent = new SysElement(null, null, null);
                              recent.Classifier_ID = m_GUID_Con_Usage[0];

                              SysElement classifier = new SysElement(null, null, null);
                              classifier.Classifier_ID = recent.Get_Classifier(database);
                              //Prüfen, ob NodeType bereits vorhanden
                              List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                              if (m_check_nt.Count > 0)
                              {
                                  this.sysElement = m_check_nt[0];
                              }
                              else
                              {
                                  classifier.Get_TV_reduced(database, repository);

                                  this.sysElement = classifier;
                              }

                          }

                      }

                  }
                */

                /*   if(nodeType.Classifier_ID != null)
                   {
                       this.W_SUBJEKT = this.nodeType.W_Artikel+" "+ this.nodeType.Name;

                   }*/

            }

        public void Get_SysElement_Instances(Database database, EA.Repository repository)
        {
            //System erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            List<string> m_Type_Con = database.metamodel.m_Derived_SysElement.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_SysElement.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Elements_SysArch_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Elements_SysArch_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);


            List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);


            if (m_GUID_Con_Def != null)
            {
                int i1 = 0;
                do
                {
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[i1]).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement = m_check_nt[0];

                        if (this.sysElements.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements.Add(m_check_nt[0]);
                        }

                    }
                    else
                    {
                        SysElement recent = new SysElement(null, null, null);
                        recent.Classifier_ID = m_GUID_Con_Def[0];
                        recent.Get_TV_reduced(database, repository);

                        this.sysElement = recent;
                        if (this.sysElements.Contains(recent) == false)
                        {
                            this.sysElements.Add(recent);
                        }
                    }

                    i1++;
                } while (i1 < m_GUID_Con_Def.Count);


                List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                if (m_GUID_Con_Usage != null)
                {
                    SysElement recent = new SysElement(null, null, null);
                    recent.Classifier_ID = m_GUID_Con_Usage[0];

                    SysElement classifier = new SysElement(null, null, null);
                    classifier.Classifier_ID = recent.Get_Classifier(database);
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement = m_check_nt[0];
                        if (this.sysElements.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements.Add(m_check_nt[0]);
                        }
                    }
                    else
                    {
                        classifier.Get_TV_reduced(database, repository);

                        this.sysElement = classifier;
                        if (this.sysElements.Contains(classifier) == false)
                        {
                            this.sysElements.Add(classifier);
                        }
                    }

                }

                // }

                if (this.sysElements.Count > 0)
                {

                    List<SysElement> m_recent = new List<SysElement>();

                    try
                    {
                        m_recent = this.sysElements.Where(x => this.W_SUBJEKT.Contains(x.SYS_KUERZEL) == true).ToList();
                    }
                    catch
                    {
                        m_recent = new List<SysElement>();
                    }


                    if (m_recent != null)
                    {
                        if (m_recent.Count > 0)
                        {
                            this.sysElement = m_recent[0];
                        }
                    }
                }
            }
            else
            {
                List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                if (m_GUID_Con_Usage != null)
                {
                    SysElement recent = new SysElement(null, null, null);
                    recent.Classifier_ID = m_GUID_Con_Usage[0];

                    SysElement classifier = new SysElement(null, null, null);
                    classifier.Classifier_ID = recent.Get_Classifier(database);
                    //Prüfen, ob NodeType bereits vorhanden
                    List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                    if (m_check_nt.Count > 0)
                    {
                        this.sysElement = m_check_nt[0];
                        if (this.sysElements.Contains(m_check_nt[0]) == false)
                        {
                            this.sysElements.Add(m_check_nt[0]);
                        }
                    }
                    else
                    {
                        classifier.Get_TV_reduced(database, repository);

                        this.sysElement = classifier;
                        if (this.sysElements.Contains(classifier) == false)
                        {
                            this.sysElements.Add(classifier);
                        }
                    }

                }

                // }

                if (this.sysElements.Count > 0)
                {

                    List<SysElement> m_recent = new List<SysElement>();

                    try
                    {
                        m_recent = this.sysElements.Where(x => this.W_SUBJEKT.Contains(x.SYS_KUERZEL) == true).ToList();
                    }
                    catch
                    {
                        m_recent = new List<SysElement>();
                    }


                    if (m_recent != null)
                    {
                        if (m_recent.Count > 0)
                        {
                            this.sysElement = m_recent[0];
                        }
                    }
                }
            }
            /*  if(m_Type_Def.Count > 0 && m_Type_Con.Count > 0)
              {

                  List<string> m_GUID_Con_Def = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);

                  if (m_GUID_Con_Def != null)
                  {
                      //Prüfen, ob NodeType bereits vorhanden
                      List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == m_GUID_Con_Def[0]).ToList();

                      if (m_check_nt.Count > 0)
                      {
                          this.sysElement = m_check_nt[0];
                      }
                      else
                      {
                          SysElement recent = new SysElement(null, null, null);
                          recent.Classifier_ID = m_GUID_Con_Def[0];
                          recent.Get_TV_reduced(database, repository);

                          this.sysElement = recent;
                      }



                  }
                  else
                  {
                      List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

                      if (m_GUID_Con_Usage != null)
                      {
                          SysElement recent = new SysElement(null, null, null);
                          recent.Classifier_ID = m_GUID_Con_Usage[0];

                          SysElement classifier = new SysElement(null, null, null);
                          classifier.Classifier_ID = recent.Get_Classifier(database);
                          //Prüfen, ob NodeType bereits vorhanden
                          List<SysElement> m_check_nt = database.m_SysElemente.Where(x => x.Classifier_ID == classifier.Classifier_ID).ToList();

                          if (m_check_nt.Count > 0)
                          {
                              this.sysElement = m_check_nt[0];
                          }
                          else
                          {
                              classifier.Get_TV_reduced(database, repository);

                              this.sysElement = classifier;
                          }

                      }

                  }

              }
            */

            /*   if(nodeType.Classifier_ID != null)
               {
                   this.W_SUBJEKT = this.nodeType.W_Artikel+" "+ this.nodeType.Name;

               }*/

        }
        public void Get_Logical(Database database)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            Repository_Elements repository_Elements = new Repository_Elements();
            List<Logical> m_Logical = new List<Logical>();  

            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Elements_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Elements_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

            if(m_GUID_Con_Usage != null)
            {
                //Hier Zuordnung zum Technischem System einpflegen

                //Hier muss vom Usage bis zur LA hochgengangen werden und sich die Classifier gmerkt werden, Es muss vorher die Decomposition der Node in der Gesamt LA aufgebaut werden
                

                int i1 = 0;
                do
                {
                    Elements.Target target = new Elements.Target(m_GUID_Con_Usage[i1], null, database);

                    if(target.Logical != null)
                    {
                        if(this.m_Logical.Contains(target.Logical) == false)
                        {
                            this.m_Logical.Add(target.Logical);
                        } 
                    }


                    i1++;
                } while (i1 < m_GUID_Con_Usage.Count);
            }
        }

        public void Get_Logical_SysElem(Database database)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            Repository_Elements repository_Elements = new Repository_Elements();
            List<Logical> m_Logical = new List<Logical>();

            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Szenar.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Szenar.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);

            if (m_GUID_Con_Usage != null)
            {

                int i1 = 0;
                do
                {
                    List<Logical> m_recent_logical = database.m_Logical.Where(x => x.Classifier_ID == m_GUID_Con_Usage[i1]).ToList();

                    if (m_recent_logical.Count > 0)
                    {
                        this.m_Logical.AddRange(m_recent_logical);
                    }
                

                    i1++;
                } while (i1 < m_GUID_Con_Usage.Count);
                
            }
        }

        public List<string> Check_Subject(Database database, EA.Repository repository, List<string> m_package_GUID)
        {
            bool flag_check = false;
            List<string> m_ret = new List<string>();

            m_ret.Add(null);
            m_ret.Add(null);
            m_ret.Add(null);

            if (this.RPI_Export == true)
            {
               

                if(this.W_AFO_MANUAL == false || this.W_SUBJEKT != "")
                {
                    string name = "Anforderung '" + this.Name + " wurde falsches Subject zugeordnet";
                    string notes = "Es müssen die verknüpften Elemente überprüft werden.";
                    string type = "AFO_Subject";
                    //Subject erhalten
                    if (this.sysElement.Classifier_ID != null)
                    {
                        //Syselement abgleichen
                        if (this.W_SUBJEKT != this.sysElement.W_Artikel + " " + this.sysElement.Name)
                        {
                            if(database.metamodel.m_Requirement_Interface.Select(x => x.Stereotype).Contains(this.RPI_Stereotype) == false)
                            {
                                //Issue erzeugen
                                Issue issue = new Issue(database, name, notes, m_package_GUID[0], repository, true, type);
                                m_ret[0] = issue.Classifier_ID;
                            }
                            else
                            {
                                if(this.W_OBJEKT.Contains(this.sysElement.Name) == false)
                                {
                                    //Issue erzeugen
                                    Issue issue = new Issue(database, name, notes, m_package_GUID[0], repository, true, type);
                                    m_ret[0] = issue.Classifier_ID;
                                }
                            }
                          
                          
                          //  repository_Connector.Create_Dependency(issue.Classifier_ID, this.Classifier_ID, database.metamodel.m_Con_Trace.Select(x => x.Stereotype).ToList(), database.metamodel.m_Con_Trace.Select(x => x.Type).ToList(), null, repository, database); ;
                        }
                        //Classifier direkt und alle mit dem DerivedSyselement vergleichen
                    }
                    else
                    {
                        //NodeType abgleichen
                        if (this.W_SUBJEKT != this.nodeType.W_Artikel + " " + this.nodeType.Name)
                        {
                            if (database.metamodel.m_Requirement_Interface.Select(x => x.Stereotype).Contains(this.RPI_Stereotype) == false)
                            {
                                //Issue erzeugen
                                Issue issue = new Issue(database, name, notes, m_package_GUID[0], repository, true, type);
                                m_ret[0] = issue.Classifier_ID;
                            }
                            else
                            {
                                if (this.W_OBJEKT.Contains(this.nodeType.Name) == false)
                                {
                                    //Issue erzeugen
                                    Issue issue = new Issue(database, name, notes, m_package_GUID[0], repository, true, type);
                                    m_ret[0] = issue.Classifier_ID;
                                }
                            }

                            // repository_Connector.Create_Dependency(issue.Classifier_ID, this.Classifier_ID, database.metamodel.m_Con_Trace.Select(x => x.Stereotype).ToList(), database.metamodel.m_Con_Trace.Select(x => x.Type).ToList(), null, repository, database); ;
                        }
                    }

                    if(this.W_AFO_MANUAL == true)
                    {
                        string name2 = "Anforderung '" + this.Name + " wurde nicht mit der Satzschablone erstellt";
                        string notes2 = "Die Anforderung muss überprüft werden.";
                        string type2 = "AFO_Satzschablone";
                        //Issue anlegen, dass Satzschablone nicht genutzt

                        Issue issue = new Issue(database, name2, notes2, m_package_GUID[1], repository, true, type2);
                        m_ret[2] = issue.Classifier_ID;
                        //repository_Connector.Create_Dependency(issue.Classifier_ID, this.Classifier_ID, database.metamodel.m_Con_Trace.Select(x => x.Stereotype).ToList(), database.metamodel.m_Con_Trace.Select(x => x.Type).ToList(), null, repository, database); ;

                    }

                }
                else
                {
                    string name = "Anforderung '" + this.Name + " wurde nicht mit der Satzschablone erstellt";
                    string notes = "Die Anforderung muss überprüft werden.";
                    string type = "AFO_Satzschablone";
                    //Issue anlegen, dass Satzschablone nicht genutzt

                    Issue issue = new Issue(database, name, notes, m_package_GUID[1], repository, true, type);
                    m_ret[2] = issue.Classifier_ID;               
                }
            }

            return (m_ret);
        }

        private List<string> Get_Actions(Database database, EA.Repository repository)
        {
            //Actions erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Aktivity_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Aktivity_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Aktivity_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Aktivity_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Usage, m_Stereotype_Usage, m_Type_Con, m_Stereotype_Con);


            return (m_GUID_Con_Usage);
        }

        private List<string> Get_Activity(Database database, EA.Repository repository)
        {
            //Actions erhalten
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Def = database.metamodel.m_Aktivity_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Def = database.metamodel.m_Aktivity_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Usage = database.metamodel.m_Aktivity_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Usage = database.metamodel.m_Aktivity_Usage.Select(x => x.Stereotype).ToList();
            List<string> m_GUID_Client = new List<string>();
            m_GUID_Client.Add(this.Classifier_ID);

            List<string> m_GUID_Con_Usage = interface_Connectors.Get_Supplier_Element_By_Connector(database, m_GUID_Client, m_Type_Def, m_Stereotype_Def, m_Type_Con, m_Stereotype_Con);


            return (m_GUID_Con_Usage);
        }

        public List<Activity> Check_Action(Database database, EA.Repository repository)
        {
            List<Activity> m_activity = new List<Activity>();


            List<string> m_GUID_Con_Usage = this.Get_Actions(database, repository);


            if (m_GUID_Con_Usage != null)
            {
                Repository_Element repository_Element = new Repository_Element();

                if(m_GUID_Con_Usage.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Element.Classifier_ID = m_GUID_Con_Usage[i1];
                        string classifier = repository_Element.Get_Classifier_Activity(database);

                         List<Activity> m_act = database.m_Activity.Where(x => x.Classifier_ID == classifier).ToList();
                        //List<Activity>  m_act = m_activity.Where(x => x.Classifier_ID == classifier).ToList();

                        if (m_act.Count == 0)
                        {
                            Activity activity = new Activity(classifier, database, repository);
                            activity.m_GUID.Add(m_GUID_Con_Usage[i1]);

                            m_activity.Add(activity);
                            database.m_Activity.Add(activity);
                        }
                        else
                        {
                            if(m_act[0].m_GUID.Contains(m_GUID_Con_Usage[i1]) == false)
                            {
                                m_act[0].m_GUID.Add(m_GUID_Con_Usage[i1]);
                            }

                            if(m_activity.Select(x => x.Classifier_ID).ToList().Contains(m_act[0].Classifier_ID) == false)
                            {
                                m_activity.Add(m_act[0]);
                            }
                        }

                        i1++;
                    } while (i1 < m_GUID_Con_Usage.Count);
                }
            }



            return (m_activity);
        }

        public List<Activity> Check_Activity(Database database, EA.Repository repository)
        {
            List<Activity> m_activity = new List<Activity>();


            List<string> m_GUID_Con_Definition = this.Get_Activity(database, repository);


            if (m_GUID_Con_Definition != null)
            {
                Repository_Element repository_Element = new Repository_Element();

                if (m_GUID_Con_Definition.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Element.Classifier_ID = m_GUID_Con_Definition[i1];
                        //string classifier = repository_Element.Get_Classifier_Activity(database);

                        List<Activity> m_act = database.m_Activity.Where(x => x.Classifier_ID == m_GUID_Con_Definition[i1]).ToList();

                        if (m_act.Count == 0)
                        {
                            Activity activity = new Activity(m_GUID_Con_Definition[i1], database, repository);
                            //activity.m_GUID.Add(m_GUID_Con_Usage[i1]);
                            //Verwendungen erhalten
                            activity.m_GUID = activity.Get_Instanzen_Repository(database);

                            m_activity.Add(activity);
                            database.m_Activity.Add(activity);
                        }
                        else
                        {
                           /* if (m_act[0].m_GUID.Contains(m_GUID_Con_Usage[i1]) == false)
                            {
                                m_act[0].m_GUID.Add(m_GUID_Con_Usage[i1]);
                            }

                            if (m_activity.Select(x => x.Classifier_ID).ToList().Contains(m_act[0].Classifier_ID) == false)
                            {
                                m_activity.Add(m_act[0]);
                            }*/
                        }

                        i1++;
                    } while (i1 < m_GUID_Con_Definition.Count);
                }
            }



            return (m_activity);
        }

        public List<Activity> Check_Begruendung(Database database, EA.Repository repository)
        {
            List<Activity> m_ret = new List<Activity>();

            //Prüfen, ob DesignConstraint vorhanden
            this.Get_DesignConstraint(repository, database);
            if (this.m_Design.Count == 0)
            {
                //database.m_Activity = new List<Activity>();
                //Action an der Anforderungen erhalten
                List<Activity> m_act = this.Check_Action(database, repository);
                if(m_act.Count > 0)
                {
                    //Elternactivity der Action erhalten
                    int i1 = 0;
                    do
                    {
                        m_act[i1].Get_Parents(repository, database);

                        i1++;
                    } while (i1 < m_act.Count);

                    m_ret = m_act;
                }
                else
                {
                    //Activity prüfen
                    List<Activity> m_act2 = this.Check_Activity(database, repository);
                    if (m_act2.Count > 0)
                    {
                        //Elternactivity der Action erhalten
                        int i1 = 0;
                        do
                        {
                            m_act2[i1].Get_Parents(repository, database);

                            i1++;
                        } while (i1 < m_act2.Count);

                        m_ret = m_act2;
                    }
                    else
                    {
                        m_ret = null;
                    }
                  
                }

                
            }

            return (m_ret);
           
        }

        public List<Activity> Check_Begruendung_Variante1(Database database, EA.Repository repository)
        {
            List<Activity> m_ret = new List<Activity>();

            //Prüfen, ob DesignConstraint vorhanden
            this.Get_DesignConstraint(repository, database);
            if (this.m_Design.Count == 0)
            {
                List<Activity> m_act = this.Check_Action(database, repository);
                if (m_act.Count > 0)
                {
                    //Elternactivity der Action erhalten
                    int i1 = 0;
                    do
                    {
                        m_act[i1].Get_Parents(repository, database);

                        i1++;
                    } while (i1 < m_act.Count);

                    m_ret = m_act;
                }


            }

            return (m_ret);

        }

        public bool Check_Export_Child_rekursiv()
        {
            bool ret = false;

            if(this.m_Requirement_Refines.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if(this.m_Requirement_Refines[i1].AFO_WV_ART != AFO_WV_ART.Überschrift_Einleitung && this.m_Requirement_Refines[i1].RPI_Export == true)
                    {
                        ret = true;
                    }

                    bool help = this.m_Requirement_Refines[i1].Check_Export_Child_rekursiv();

                    if(help == true)
                    {
                        ret = true;
                    }
                        
                    i1++;
                } while (i1 < this.m_Requirement_Refines.Count);
            }

            return (ret);
        }
            #endregion Check


            #region Create
            public string Create_Requirement(EA.Repository Repository, string Package_GUID, string StereoType, Database Data)
        {
            string Toolbox = "";
            List<DB_Insert> m_Insert = new List<DB_Insert>();

            if (Data.metamodel.m_Requirement_Quality_Activity.Select(x => x.Stereotype).ToList().Contains(StereoType) || Data.metamodel.m_Requirement_Functional.Select(x => x.Stereotype).ToList().Contains(StereoType) == true || Data.metamodel.m_Requirement_Interface.Select(x => x.Stereotype).ToList().Contains(StereoType) == true || Data.metamodel.m_Requirement_User.Select(x => x.Stereotype).ToList().Contains(StereoType) == true)
            {
                this.AFO_FUNKTIONAL = AFO_FUNKTIONAL.funktional;
                this.ADMBw_Stereotype = Data.metamodel.m_Requirement_ADMBw[0].Stereotype;
                Toolbox = Data.metamodel.m_Requirement_ADMBw[0].Toolbox;
            }
            if (Data.metamodel.m_Requirement_NonFunctional.Select(x => x.Stereotype).ToList().Contains(StereoType) || Data.metamodel.m_Requirement_Design.Select(x => x.Stereotype).ToList().Contains(StereoType) == true || Data.metamodel.m_Requirement_Typvertreter.Select(x => x.Stereotype).ToList().Contains(StereoType) || Data.metamodel.m_Requirement_Quality_Class.Select(x => x.Stereotype).ToList().Contains(StereoType) || Data.metamodel.m_Requirement_Process.Select(x => x.Stereotype).ToList().Contains(StereoType) || Data.metamodel.m_Requirement_Environment.Select(x => x.Stereotype).ToList().Contains(StereoType))
            {
                this.AFO_FUNKTIONAL = AFO_FUNKTIONAL.nicht_funktional;
                this.ADMBw_Stereotype = Data.metamodel.m_Requirement_ADMBw[1].Stereotype;
                Toolbox = Data.metamodel.m_Requirement_ADMBw[1].Toolbox;
            }
            EA.Package Packages = Repository.GetPackageByGuid(Package_GUID);
           

            // string guid = this.Check_Element_Name(this.AFO_TITEL, Data, "Requirement", StereoType, 0);
            string guid = this.Check_Element_Name(this.AFO_TITEL, Data, "Requirement", this.ADMBw_Stereotype, 0);

            if (guid == null)
            {
                EA.Element Element = Packages.Elements.AddNew(this.AFO_TITEL, "Requirement");
                Element.Stereotype = this.ADMBw_Stereotype;
                Element.Notes = this.AFO_TEXT;

                // MessageBox.Show(this.AFO_Text);

                this.Classifier_ID = Element.ElementGUID;
                this.ID = Element.ElementID;
                this.Notes = this.AFO_TEXT;
                this.Name = this.AFO_TITEL;
                this.Author = Element.Author;
                this.RPI_Stereotype = StereoType;

                m_Insert.Add(new DB_Insert(Data.metamodel.Afo_Stereotype[0], OleDbType.VarChar, OdbcType.VarChar, StereoType, -1));

                m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.AFO_ABNAHMEKRITERIUM, -1));
                m_Insert.Add(new DB_Insert("AFO_AG_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AG_ID, -1));
                m_Insert.Add(new DB_Insert("AFO_AN_ID", OleDbType.VarChar, OdbcType.VarChar, this.AFO_AN_ID, -1));
                m_Insert.Add(new DB_Insert("AFO_ANSPRECHPARTNER", OleDbType.VarChar, OdbcType.VarChar, this.Author, -1));
                m_Insert.Add(new DB_Insert("AFO_BEZUG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_BEZUG[(int)this.AFO_BEZUG], -1));
                m_Insert.Add(new DB_Insert("AFO_CPM_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_CPM_PHASE[(int)this.AFO_CPM_PHASE], -1));
                m_Insert.Add(new DB_Insert("AFO_DETAILSTUFE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_DETAILSTUFE[(int)this.AFO_DETAILSTUFE], -1));
                m_Insert.Add(new DB_Insert("AFO_FUNKTIONAL", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_FUNKTIONAL[(int)this.AFO_FUNKTIONAL], -1));
                m_Insert.Add(new DB_Insert("AFO_KLAERUNGSPUNKTE", OleDbType.VarChar, OdbcType.VarChar, this.AFO_KLAERUNGSPUNKTE, -1));
                m_Insert.Add(new DB_Insert("AFO_KRITIKALITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_KRITIKALITAET[(int)this.AFO_KRITIKALITAET], -1));
                m_Insert.Add(new DB_Insert("AFO_OPERATIVEBEWERTUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_OPERATIVEBEWERTUNG[(int)this.AFO_OPERATIVEBEWERTUNG], -1));
                m_Insert.Add(new DB_Insert("AFO_PRIORITAET_VERGABE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)this.AFO_PRIORITAET_VERGABE], -1));
                m_Insert.Add(new DB_Insert("AFO_PROJEKTROLLE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)this.AFO_PROJEKTROLLE], -1));
                m_Insert.Add(new DB_Insert("AFO_QS_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_QS_STATUS[(int)this.AFO_QS_STATUS], -1));
                m_Insert.Add(new DB_Insert("AFO_QUELLTEXT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_QUELLTEXT, -1));
                m_Insert.Add(new DB_Insert("AFO_REGELUNGEN", OleDbType.VarChar, OdbcType.VarChar, this.AFO_REGELUNGEN, -1));
                m_Insert.Add(new DB_Insert("AFO_STATUS", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_STATUS[(int)this.AFO_STATUS], -1));
              
                this.AFO_TITEL = this.Name;
                m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, this.Name, -1));
                m_Insert.Add(new DB_Insert("AFO_VERERBUNG", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_VERERBUNG[(int)this.AFO_VERERBUNG], -1));
                m_Insert.Add(new DB_Insert("AFO_WV_ART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART], -1));
                m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART], -1));
                m_Insert.Add(new DB_Insert("AFO_WV_PHASE", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.AFO_WV_PHASE[(int)this.AFO_WV_PHASE], -1));
                m_Insert.Add(new DB_Insert("B_BEMERKUNG", OleDbType.VarChar, OdbcType.VarChar, this.B_BEMERKUNG, -1));
                m_Insert.Add(new DB_Insert("CLARIFICATION", OleDbType.VarChar, OdbcType.VarChar, this.CLARIFICATION, -1));
                m_Insert.Add(new DB_Insert("DB_Stand", OleDbType.VarChar, OdbcType.VarChar, this.DB_Stand, -1));
                m_Insert.Add(new DB_Insert("IN_CATEGORY", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.IN_CATEGORY[(int)this.IN_CATEGORY], -1));
                this.OBJECT_ID = this.ID.ToString();
                m_Insert.Add(new DB_Insert("OBJECT_ID", OleDbType.VarChar, OdbcType.VarChar, this.ID.ToString(), -1));
                this.AFO_TEXT = this.Notes;
                m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, this.Notes, -1));
                string UUID = Classifier_ID;
                UUID = UUID.Trim('{', '}');
                this.UUID = UUID;
                m_Insert.Add(new DB_Insert("UUID", OleDbType.VarChar, OdbcType.VarChar, this.UUID, -1));
                m_Insert.Add(new DB_Insert("W_AFO_MANUAL", OleDbType.VarChar, OdbcType.VarChar, this.W_AFO_MANUAL, -1));
                m_Insert.Add(new DB_Insert("W_AKTIVITAET", OleDbType.VarChar, OdbcType.VarChar, Data.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET], -1));
                m_Insert.Add(new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, this.W_PROZESSWORT, -1));
                m_Insert.Add(new DB_Insert("W_FREEZE_TITLE", OleDbType.VarChar, OdbcType.VarChar, this.W_FREEZE_TITLE.ToString(), -1));
                m_Insert.Add(new DB_Insert("W_NUTZENDER", OleDbType.VarChar, OdbcType.VarChar, this.W_NUTZENDER, -1));
                m_Insert.Add(new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_OBJEKT, -1));
                m_Insert.Add(new DB_Insert("W_QUALITAET", OleDbType.VarChar, OdbcType.VarChar, this.W_QUALITAET, -1));
                m_Insert.Add(new DB_Insert("W_RANDBEDINGUNG", OleDbType.VarChar, OdbcType.VarChar, this.W_RANDBEDINGUNG, -1));
                m_Insert.Add(new DB_Insert("W_SINGULAR", OleDbType.VarChar, OdbcType.VarChar, this.W_SINGULAR.ToString(), -1));
                m_Insert.Add(new DB_Insert("W_SUBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_SUBJEKT, -1));
                m_Insert.Add(new DB_Insert("W_ZU", OleDbType.VarChar, OdbcType.VarChar, this.W_ZU.ToString(), -1));
                m_Insert.Add(new DB_Insert("AFO_VERBINDLICHKEIT", OleDbType.VarChar, OdbcType.VarChar, this.AFO_VERBINDLICHKEIT, -1));
                m_Insert.Add(new DB_Insert("RPI_Export", OleDbType.VarChar, OdbcType.VarChar, this.RPI_Export.ToString(), -1));
           //     m_Insert.Add(new DB_Insert("RPI_Stereotype", OleDbType.VarChar, OdbcType.VarChar, this.RPI_Stereotype.ToString(), -1));
                //       
                /////////////
                //StereoType hinzufügen
                /* string SQL2 = @"UPDATE t_object SET Stereotype = '" + StereoType +
                     "' WHERE ea_guid = '" + Element.ElementGUID + "';";

                 Repository.Execute(SQL2);*/

                #region Update t_object
                /*DB_Command sQL_Command = new DB_Command();
                string[] m_input_property = { "Stereotype" };
                object[] m_input_value = { StereoType };
                OleDbType[] m_input_Type = { OleDbType.VarChar };
                string[] m_select_property = { "ea_guid" };
                object[] m_v_11 = { Element.ElementGUID };
                List<object[]> m_select_value = new List<object[]>();
                OleDbType[] m_select_Type = { OleDbType.VarChar };
                m_select_value.Add(m_v_11);


                OleDbCommand Update = sQL_Command.Get_Update_Command("t_object", m_input_property, m_input_value, m_select_property, m_select_value, (OleDbConnection)Data.oLEDB_Interface.dbConnection);
                Data.oLEDB_Interface.Add_Parameters_Update(Update, m_input_value, m_input_Type, m_select_value, m_select_Type);
                Data.oLEDB_Interface.OLEDB_UPDATE_One_Table(Update);
                */
                //Interface_Element interface_Element = new Interface_Element();
                //interface_Element.Update_VarChar(Element.ElementGUID, StereoType, "Stereotype", Data);
                #endregion t_object


                //Updaten
                //Element.Update();
                this.Update_TV(m_Insert, Data, Repository);
                //    Packages.Elements.Refresh();
                //    Packages.Update();
                //GUID des Requirement zurückgeben
                //t_xref Updaten
                Requirement_Plugin.Interfaces.Interface_TaggedValue interface_TaggedValue = new Requirement_Plugin.Interfaces.Interface_TaggedValue();
                interface_TaggedValue.Set_Stereotype(Element.ElementGUID, Toolbox, this.ADMBw_Stereotype, Data);
                // interface_Element.Update_Stereotype_Xref(Element.ElementGUID, Data.metamodel.m_Requirement_ADMBw[0].Stereotype, Data.metamodel.m_Requirement_ADMBw[0].Toolbox, Data);
                
                Element.Update();
                //Packages.Elements.Refresh();
                //Packages.Update();

                return (Element.ElementGUID);
            }

            return (guid);

           


        }

        public void Create_Nachweisart(string Package_GUID, Database Data, EA.Repository repository)
        {
            if(this.AFO_ABNAHMEKRITERIUM != "")
            {
                Repository_Connector repository_Connector = new Repository_Connector();

                Nachweisart recent = new Nachweisart(null, null, null);
                recent.Name = Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART] + ": " + this.Name;
                recent.Name = recent.Name[0].ToString().ToUpper() + recent.Name.Substring(1);
                recent.abnahmekriterium = this.AFO_ABNAHMEKRITERIUM;
                recent.nachweisart = this.AFO_WV_NACHWEISART;

                recent.Create_Nachweisart(0, Package_GUID, Data, repository);
                repository_Connector.Create_Dependency(recent.Classifier_ID, this.Classifier_ID, Data.metamodel.m_Con_Nachweisart.Select(x=> x.Stereotype).ToList(), Data.metamodel.m_Con_Nachweisart.Select(x => x.Type).ToList(), Data.metamodel.m_Con_Nachweisart.Select(x => x.SubType).ToList()[0], repository, Data, Data.metamodel.m_Con_Nachweisart.Select(x => x.Toolbox).ToList()[0], Data.metamodel.m_Con_Nachweisart[0].direction);

                if (this.m_Nachweisarten.Contains(recent) == false)
                {


                    this.m_Nachweisarten.Add(recent);
                }
               
            }
        }
        
        public void Update_Nachweisart(Database Data, EA.Repository repository)
        {
            this.m_Nachweisarten[0].Name = Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART] + ": " + this.Name;
            this.m_Nachweisarten[0].Name = this.m_Nachweisarten[0].Name[0].ToString().ToUpper() + this.m_Nachweisarten[0].Name.Substring(1);
            this.m_Nachweisarten[0].abnahmekriterium = this.AFO_ABNAHMEKRITERIUM;
            this.m_Nachweisarten[0].nachweisart = this.AFO_WV_NACHWEISART;

            this.m_Nachweisarten[0].Update_Abnahmekriterium(repository, Data);

            EA.Element element = repository.GetElementByGuid(this.m_Nachweisarten[0].Classifier_ID);
            element.Name = this.m_Nachweisarten[0].Name;
            element.Notes = this.m_Nachweisarten[0].abnahmekriterium;

            //element.Refresh();
            //repository.GetPackageByID(element.PackageID).Update();
            element.Update();
        }
        #endregion Create

        #region Update
        public string Update_Requirement(EA.Repository Repository, Database database, string Titel, string Text, string W_OBJECT, string W_PROZESSWORT, string QUALITÄT, string RANDBEDINGUNG, bool W_SINGULAR, string W_SUBJECT, bool W_zu, string w_NUTZENDER)
        {
            List<DB_Insert> m_Insert = new List<DB_Insert>();
            EA.Element element = Repository.GetElementByGuid(this.Classifier_ID);
            TaggedValue taggedValue = new TaggedValue(database.metamodel, database);
            this.AFO_TITEL = Titel;
            this.Name = Titel;
            element.Name = Titel;
            m_Insert.Add(new DB_Insert("AFO_TITEL", OleDbType.VarChar, OdbcType.VarChar, this.Name, -1));
            this.AFO_TEXT = Text;
            this.Notes = Text;
            element.Notes = Text;
            m_Insert.Add(new DB_Insert("AFO_TEXT", OleDbType.VarChar, OdbcType.VarChar, this.Notes, -1));
            this.W_NUTZENDER = w_NUTZENDER;
            m_Insert.Add(new DB_Insert("W_NUTZENDER", OleDbType.VarChar, OdbcType.VarChar, w_NUTZENDER, -1));
            this.W_OBJEKT = W_OBJECT;
            m_Insert.Add(new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, W_OBJEKT, -1));
            this.W_QUALITAET = QUALITÄT;
            m_Insert.Add(new DB_Insert("W_QUALITAET", OleDbType.VarChar, OdbcType.VarChar, QUALITÄT, -1));
            this.W_RANDBEDINGUNG = RANDBEDINGUNG;
            m_Insert.Add(new DB_Insert("W_RANDBEDINGUNG", OleDbType.VarChar, OdbcType.VarChar, this.W_RANDBEDINGUNG, -1));
            this.W_SINGULAR = W_SINGULAR;
            m_Insert.Add(new DB_Insert("W_SINGULAR", OleDbType.VarChar, OdbcType.VarChar, this.W_SINGULAR.ToString(), -1));
            this.W_SUBJEKT = W_SUBJECT;
            m_Insert.Add(new DB_Insert("W_SUBJEKT", OleDbType.VarChar, OdbcType.VarChar, this.W_SUBJEKT, -1));
            this.W_ZU = W_zu;
            m_Insert.Add(new DB_Insert("W_ZU", OleDbType.VarChar, OdbcType.VarChar, this.W_ZU.ToString(), -1));
            this.W_PROZESSWORT = W_PROZESSWORT;
            m_Insert.Add(new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, this.W_PROZESSWORT, -1));

            this.Update_TV(m_Insert, database, Repository);

            element.Update();
            Repository.GetPackageByID(element.PackageID).Update();

            return (this.Classifier_ID);

        }//end Requirement
      
        public void Update_Nachweisart(EA.Repository repository, Database database)
        {
            if(this.m_Nachweisarten.Count > 0)
            {
                List<DB_Insert> m_Insert = new List<DB_Insert>();
                EA.Element element = repository.GetElementByGuid(this.Classifier_ID);
                TaggedValue taggedValue = new TaggedValue(database.metamodel, database);

                m_Insert.Add(new DB_Insert("AFO_WV_NACHWEISART", OleDbType.VarChar, OdbcType.VarChar, database.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.m_Nachweisarten[0].nachweisart], -1));
                m_Insert.Add(new DB_Insert("AFO_ABNAHMEKRITERIUM", OleDbType.VarChar, OdbcType.VarChar, this.m_Nachweisarten[0].abnahmekriterium, -1));

                this.Update_TV(m_Insert, database, repository);

                element.Update();
            }
          
           

        }

        public void Update_Nachweisart_Satzschablone(EA.Repository repository, Database database)
        {
            if(this.AFO_ABNAHMEKRITERIUM != "" && this.AFO_ABNAHMEKRITERIUM != null)
            {
                this.Get_Nachweisarten(database, repository, false);

                if(this.m_Nachweisarten.Count > 0)
                {
                    this.Update_Nachweisart(database, repository);
                }
                else
                {
                    Repository_Element repository_Element = new Repository_Element();
                    ///PAckages anlegen
                    string Package_Import_GUID = repository_Element.Create_Package_Model("Import - XAC", repository, database);
                    EA.Package Package_Import = repository.GetPackageByGuid(Package_Import_GUID);
                    string Package_Import_Nachweisart_GUID = repository_Element.Create_Package_Model("Import - XAC - Nachweisart", repository, database);
                    EA.Package Package_Nachweisart_AFo = repository.GetPackageByGuid(Package_Import_Nachweisart_GUID);
                    Package_Nachweisart_AFo.ParentID = Package_Import.PackageID;
                    Package_Import.Packages.Refresh();
                    Package_Nachweisart_AFo.Update();

                    this.Create_Nachweisart(Package_Import_Nachweisart_GUID, database, repository);
                }
            }
        }
        #endregion Update

        #region Delete
        public void Delete_All_Connector(EA.Repository Repository, Database database, List<string> m_Type, List<string> m_Stereotype)
        {
            Repository_Connector rep_con = new Repository_Connector();
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            ///Löschen AFO_Elem
         /*   XML xml = new XML();
           
            DB_Command command = new DB_Command();
            List<string> GUID = new List<string>();
         
            List<string> m_Stereotype_Elem = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Elem = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();

            string SQL = "SELECT ea_guid FROM t_connector WHERE Stereotype IN( " + command.Add_Parameters_Pre(m_Stereotype_Elem.ToArray()) + ") AND Connector_Type IN( " + command.Add_Parameters_Pre(m_Type_Elem.ToArray()) + ") AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = ?) AND End_Object_ID IN (SELECT Object_ID FROM t_object WHERE Object_Type IN  (" + command.Add_Parameters_Pre(m_Type.ToArray()) + ") AND Stereotype IN ( " + command.Add_Parameters_Pre(m_Stereotype.ToArray()) + "));";

            OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)database.oLEDB_Interface.dbConnection);

            List<DB_Input[]> ee = new List<DB_Input[]>();
            List<string> help_guid = new List<string>();
            help_guid.Add(this.Classifier_ID);

            ee.Add(help_guid.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Type.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Stereotype.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Stereotype_Elem.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Type_Elem.Select(x => new DB_Input(-1, x)).ToArray());

            OleDbType[] m_input_Type = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
            database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
            string[] m_output = { "ea_guid" };

            List<DB_Return> m_ret3 = database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

            if (m_ret3[0].Ret.Count > 1)
            {
                GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                GUID = (null);
            }*/

            List<string> m_Stereotype_Con = database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Con = database.metamodel.m_Derived_Element.Select(x => x.Type).ToList();

            List<string> GUID = new List<string>();
            GUID = interface_Connectors.Get_Connector_By_Client_GUID_And_Supplier_Type(database, this.Classifier_ID, m_Type, m_Stereotype, m_Type_Con, m_Stereotype_Con);

            if (GUID != null)
            {
                int i1 = 0;
                do
                {
                    rep_con.Delete_Connector(GUID[i1], Repository, database);

                    i1++;
                } while (i1 < GUID.Count);
            }
            //Löschen AFo_Logical
            /*  string SQL2 = "SELECT ea_guid FROM t_connector WHERE Stereotype IN " + xml.SQL_IN_Array(database.metamodel.m_Derived_Logical.Select(x => x.Stereotype).ToList().ToArray()) + " AND Connector_Type IN " + xml.SQL_IN_Array(database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList().ToArray()) + " AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = '" + this.Classifier_ID + "');";
              string xml_Dat2 = Repository.SQLQuery(SQL2);
              List<string> GUID2 = xml.Xml_Read_Attribut("ea_guid", xml_Dat2);*/
            List<string> m_Stereotype_Log = database.metamodel.m_Derived_Logical.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Log = database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
            List<string> GUID2 = new List<string>();


            GUID2 = interface_Connectors.Get_Connector_By_Client_GUID_And_Supplier_Type(database, this.Classifier_ID, m_Type, m_Stereotype, m_Type_Log, m_Stereotype_Log);

            /*  string SQL2 = "SELECT ea_guid FROM t_connector WHERE Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype_Log.ToArray()) + ") AND Connector_Type IN(" + xml.SQL_IN_Array(m_Type_Log.ToArray()) + ") AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = ?);";

              OleDbCommand SELECT2 = new OleDbCommand(SQL2, (OleDbConnection)database.oLEDB_Interface.dbConnection);

              List<DB_Input[]> ee2 = new List<DB_Input[]>();
              List<string> help_guid2 = new List<string>();
              help_guid2.Add(this.Classifier_ID);

              ee2.Add(help_guid2.Select(x => new DB_Input(-1, x)).ToArray());
              ee2.Add(m_Stereotype_Log.Select(x => new DB_Input(-1, x)).ToArray());
              ee2.Add(m_Type_Log.Select(x => new DB_Input(-1, x)).ToArray());

              OleDbType[] m_input_Type2 = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
              database.oLEDB_Interface.Add_Parameters_Select(SELECT2, ee2, m_input_Type2);
              string[] m_output2 = { "ea_guid" };

              List<DB_Return> m_ret4 = database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT2, m_output2);

              if (m_ret4[0].Ret.Count > 1)
              {
                  GUID2 = (m_ret4[0].Ret.GetRange(1, m_ret4[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
              }
              else
              {
                  GUID2 = (null);
              }
              */


            if (GUID2 != null)
            {
                int i1 = 0;
                do
                {
                    rep_con.Delete_Connector(GUID2[i1], Repository, database);

                    i1++;
                } while (i1 < GUID2.Count);
            }
            //Löschen AFo_Capability
            /* string SQL3 = "SELECT ea_guid FROM t_connector WHERE Stereotype IN " + xml.SQL_IN_Array(database.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList().ToArray()) + " AND Connector_Type IN " + xml.SQL_IN_Array(database.metamodel.m_Derived_Capability.Select(x => x.Type).ToList().ToArray()) + " AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = '" + this.Classifier_ID + "');";
             string xml_Dat3 = Repository.SQLQuery(SQL3);
             List<string> GUID3 = xml.Xml_Read_Attribut("ea_guid", xml_Dat3);
             */
            List<string> m_Stereotype_Cap = database.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList();
            List<string> m_Type_Cap = database.metamodel.m_Derived_Capability.Select(x => x.Type).ToList();
            List<string> GUID3 = new List<string>();

            GUID3 = interface_Connectors.Get_Connector_By_Client_GUID_And_Supplier_Type(database, this.Classifier_ID, m_Type, m_Stereotype, m_Type_Cap, m_Stereotype_Cap);
            /*     string SQL3 = "SELECT ea_guid FROM t_connector WHERE Stereotype IN( " + command.Add_Parameters_Pre(m_Stereotype_Cap.ToList().ToArray()) + ") AND Connector_Type IN( " + command.Add_Parameters_Pre(m_Type_Cap.ToArray()) + ") AND Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid = ?);";

                 OleDbCommand SELECT3 = new OleDbCommand(SQL3, (OleDbConnection)database.oLEDB_Interface.dbConnection);

                 List<DB_Input[]> ee3 = new List<DB_Input[]>();
                 List<string> help_guid3 = new List<string>();
                 help_guid3.Add(this.Classifier_ID);

                 ee3.Add(help_guid3.Select(x => new DB_Input(-1, x)).ToArray());
                 ee3.Add(m_Stereotype_Cap.Select(x => new DB_Input(-1, x)).ToArray());
                 ee3.Add(m_Type_Cap.Select(x => new DB_Input(-1, x)).ToArray());

                 OleDbType[] m_input_Type3 = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
                 database.oLEDB_Interface.Add_Parameters_Select(SELECT3, ee3, m_input_Type3);
                 string[] m_output3 = { "ea_guid" };

                 List<DB_Return> m_ret5 = database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT3, m_output3);

                 if (m_ret5[0].Ret.Count > 1)
                 {
                     GUID3 = (m_ret5[0].Ret.GetRange(1, m_ret5[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
                 }
                 else
                 {
                     GUID3 = (null);
                 }
                 */


            if (GUID3 != null)
            {
                int i1 = 0;
                do
                {
                    rep_con.Delete_Connector(GUID3[i1], Repository, database);

                    i1++;
                } while (i1 < GUID3.Count);
            }
        }
        #endregion Delete

        #region Transform
        public void Transform_TF_Leistungswert(Database database, EA.Repository repository)
        {
            //CPM Phase ändern, in der sie erstellt wurden
            this.AFO_CPM_PHASE = AFO_CPM_PHASE.Zwei;
            //Prüfen auf Refines Beziehung auf eine PFK Anforderung
            this.Get_Connector_Refines(database, repository);
            //Isssue erzeugen, was geändert wurde


        }
        #endregion

        #region Misc
        public void Add_to_Database(Database database)
        {
            if (this.Classifier_ID != null)
            {


                //if(database.m_Requirement.Contains(this) == false)
                if (database.m_Requirement.Exists(x => x.Classifier_ID == this.Classifier_ID) == false)
                {
                    database.m_Requirement.Add(this);
                }
            }
        }

        public void Refresh_in_Diagram(EA.Repository Repository, Database database)
        {
            EA.Diagram current_dia = Repository.GetCurrentDiagram();

            if (current_dia != null)
            {
                EA.Collection selectedObjects = current_dia.SelectedObjects;
                //Ein Object vom Type der definierten Requirements wurde gewählt
                if (selectedObjects.Count == 1)
                {
                    if (selectedObjects.GetAt(0) is EA.DiagramObject)
                    {
                        Diagrams.Diagram_Element recent_dia_elem = new Diagrams.Diagram_Element(selectedObjects.GetAt(0).ElementID, database);
                        Element_Metamodel recent_elem = recent_dia_elem.GetElement_Metamodel(database);

                        if (database.metamodel.m_Requirement.Select(x => x.Type).ToList().Contains(recent_elem.Type) == true )//&& database.metamodel.m_Requirement.Select(x => x.Stereotype).ToList().Contains(recent_elem.Stereotype) == true)
                        {
                            if (recent_dia_elem.Element_GUID != null)
                            {
                                EA.Element elem = Repository.GetElementByGuid(recent_dia_elem.Element_GUID);
                                EA.DiagramObject dia_obj = selectedObjects.GetAt(0);

                                elem.Name = this.AFO_TITEL;
                                elem.Notes = this.AFO_TEXT;

                                this.Stereotype = this.RPI_Stereotype;

                                /*if (this.Stereotype == null || this.Stereotype == "kein")
                                {
                                    this.Get_Sterotype_Req(database, Repository);
                                }
                                else
                                {
                                    this.Stereotype = this.RPI_Stereotype;
                                }*/
                               
                                this.Update_Requirement_All(Repository, database);

                                elem.Update();

                                dia_obj.Update();

                                //Nachweisart Updaten
                                this.Update_Nachweisart_Satzschablone(Repository, database);
                            }
                        }
                    }
                }
                if(selectedObjects.Count == 0)
                {
                    EA.Element selected_obj = Repository.GetTreeSelectedObject();
                    this.Get_Sterotype_Req(database, Repository);
                    this.Update_Requirement_All(Repository, database);
                    //Nachweisart Updaten
                    this.Update_Nachweisart_Satzschablone(Repository, database);
                }

            }
            else
            {
                EA.Element selected_obj = Repository.GetTreeSelectedObject();

                if(selected_obj != null)
                {
                    //   var t = selected_obj.ObjectType;
                    this.Get_Sterotype_Req(database, Repository);
                    this.Update_Requirement_All(Repository, database);
                    //Nachweisart Updaten
                    this.Update_Nachweisart_Satzschablone(Repository, database);
                }

            }
        }

        public void Compare_Requirement(Database Data, EA.Repository repository, Requirement Requirement_Copy)
        {
            DateTime date = DateTime.Now;
            string Issue_Name = Requirement_Copy.Name + ": " + date.ToString();
            string Issue_Text = "";
            ////////////////////////////////////////
            //Alle Attribute durchgehen und Unterschiede festhalten
            #region Satzschablone
            //AFO_Text
            if (this.AFO_TEXT != Requirement_Copy.AFO_TEXT)
            {
                Issue_Text = Issue_Text + "AFO_TEXT: " + Requirement_Copy.AFO_TEXT + " --> " + this.AFO_TEXT + "\n";
            }
            //AFO_Titel
            if (this.AFO_TITEL != Requirement_Copy.AFO_TITEL)
            {
                Issue_Text = Issue_Text + "AFO_TITEL: " + Requirement_Copy.AFO_TITEL + " --> " + this.AFO_TITEL + "\n";
            }
            //W_RANDBEDINGUNG
            if (this.W_RANDBEDINGUNG != Requirement_Copy.W_RANDBEDINGUNG)
            {
                if (this.W_RANDBEDINGUNG != "" && Requirement_Copy.W_RANDBEDINGUNG != null)
                {
                    Issue_Text = Issue_Text + "W_RANDBEDINGUNG: " + Requirement_Copy.W_RANDBEDINGUNG + " --> " + this.W_RANDBEDINGUNG + "\n";
                }
            }
            //AFO_VERBINDLICHKEIT
            if (this.AFO_VERBINDLICHKEIT != Requirement_Copy.AFO_VERBINDLICHKEIT)
            {
                if (this.AFO_VERBINDLICHKEIT != "" && Requirement_Copy.AFO_VERBINDLICHKEIT != null)
                {
                    Issue_Text = Issue_Text + "AFO_VERBINDLICHKEIT: " + Requirement_Copy.AFO_VERBINDLICHKEIT + " --> " + this.AFO_VERBINDLICHKEIT + "\n";
                }
            }
            //W_SINGULAR
            if (this.W_SINGULAR != Requirement_Copy.W_SINGULAR)
            {
                Issue_Text = Issue_Text + "W_SINGULAR: " + Requirement_Copy.W_SINGULAR + " --> " + this.W_SINGULAR + "\n";
            }
            //W_SUBJEKT
            if (this.W_SUBJEKT != Requirement_Copy.W_SUBJEKT)
            {
                if (this.W_SUBJEKT != "" && Requirement_Copy.W_SUBJEKT != null)
                {
                    Issue_Text = Issue_Text + "W_SUBJEKT: " + Requirement_Copy.W_SUBJEKT + " --> " + this.W_SUBJEKT + "\n";
                }
            }
            //W_NUTZENDER
            if (this.W_NUTZENDER != Requirement_Copy.W_NUTZENDER)
            {
                if (this.W_NUTZENDER != "" && Requirement_Copy.W_NUTZENDER != null)
                {
                    Issue_Text = Issue_Text + "W_NUTZENDER: " + Requirement_Copy.W_NUTZENDER + " --> " + this.W_NUTZENDER + "\n";
                }
            }
            //W_AKTIVITAET
            if (this.W_AKTIVITAET != Requirement_Copy.W_AKTIVITAET)
            {
                Issue_Text = Issue_Text + "W_AKTIVITAET: " + Data.AFO_ENUM.W_AKTIVITAET[(int)Requirement_Copy.W_AKTIVITAET] + " --> " + Data.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET] + "\n";
            }
            //W_OBJECT
            if (this.W_OBJEKT != Requirement_Copy.W_OBJEKT)
            {
                if (this.W_OBJEKT != "" && Requirement_Copy.W_OBJEKT != null)
                {
                    Issue_Text = Issue_Text + "W_OBJEKT: " + Requirement_Copy.W_OBJEKT + " --> " + this.W_OBJEKT + "\n";
                }
            }
            //W_QUALITAET
            if (this.W_QUALITAET != Requirement_Copy.W_QUALITAET)
            {
                if (this.W_QUALITAET != "" && Requirement_Copy.W_QUALITAET != null)
                {
                    Issue_Text = Issue_Text + "W_QUALITAET: " + Requirement_Copy.W_QUALITAET + " --> " + this.W_QUALITAET + "\n";
                }
            }
            //W_PROZESSWORT
            if (this.W_PROZESSWORT != Requirement_Copy.W_PROZESSWORT)
            {
                Issue_Text = Issue_Text + "W_PROZESSWORT: " + Requirement_Copy.W_PROZESSWORT + " --> " + this.W_PROZESSWORT + "\n";
            }
            //W_ZU
            if (this.W_ZU != Requirement_Copy.W_ZU)
            {
                Issue_Text = Issue_Text + "W_ZU: " + Requirement_Copy.W_ZU.ToString() + " --> " + this.W_ZU.ToString() + "\n";
            }
            //W_AFO_MANUAL
            if (this.W_AFO_MANUAL != Requirement_Copy.W_AFO_MANUAL)
            {
                Issue_Text = Issue_Text + "W_AFO_MANUAL: " + Requirement_Copy.W_AFO_MANUAL.ToString() + " --> " + this.W_AFO_MANUAL.ToString() + "\n";
            }
            //Allgemeine Werte
            if (this.W_FREEZE_TITLE != Requirement_Copy.W_FREEZE_TITLE)
            {
                Issue_Text = Issue_Text + "W_FREEZE_TITLE: " + Requirement_Copy.W_FREEZE_TITLE.ToString() + " --> " + this.W_FREEZE_TITLE.ToString() + "\n";
            }
            this.AFO_VERERBUNG = (AFO_VERERBUNG)0;
            if (this.AFO_VERERBUNG != Requirement_Copy.AFO_VERERBUNG)
            {
                Issue_Text = Issue_Text + "AFO_VERERBUNG: " + Data.AFO_ENUM.AFO_VERERBUNG[(int)Requirement_Copy.AFO_VERERBUNG] + " --> " + Data.AFO_ENUM.AFO_VERERBUNG[(int)this.AFO_VERERBUNG] + "\n";
            }
            #endregion Satzschablone
            ////////////////////////////////////////////////
            #region Textfelder
            //Form Textfelder
            //Autor
            if (this.AFO_ANSPRECHPARTNER != Requirement_Copy.AFO_ANSPRECHPARTNER)
            {
                if (this.AFO_ANSPRECHPARTNER != "" && Requirement_Copy.AFO_ANSPRECHPARTNER != null)
                {
                    Issue_Text = Issue_Text + "AFO_ANSPRECHPARTNER: " + Requirement_Copy.AFO_ANSPRECHPARTNER + " --> " + this.AFO_ANSPRECHPARTNER + "\n";
                }
            }
            //Hinweis
            if (this.AFO_HINWEIS != Requirement_Copy.AFO_HINWEIS)
            {
                if (this.AFO_HINWEIS != "" && Requirement_Copy.AFO_HINWEIS != null)
                {
                    Issue_Text = Issue_Text + "AFO_HINWEIS: " + Requirement_Copy.AFO_HINWEIS + " --> " + this.AFO_HINWEIS + "\n";
                }
            }
            //Mitgeltendes Dokument
            if (this.AFO_REGELUNGEN != Requirement_Copy.AFO_REGELUNGEN)
            {
                if (this.AFO_REGELUNGEN != "" && Requirement_Copy.AFO_REGELUNGEN != null)
                {
                    Issue_Text = Issue_Text + "AFO_REGELUNGEN: " + Requirement_Copy.AFO_REGELUNGEN + " --> " + this.AFO_REGELUNGEN + "\n";
                }
            }
            //Begründung
            if (this.B_BEMERKUNG != Requirement_Copy.B_BEMERKUNG)
            {
                if (this.B_BEMERKUNG != "" && Requirement_Copy.B_BEMERKUNG != null)
                {
                    Issue_Text = Issue_Text + "B_BEMERKUNG: " + Requirement_Copy.B_BEMERKUNG + " --> " + this.B_BEMERKUNG + "\n";
                }
            }
            //Quelltextzitat
            if (this.AFO_QUELLTEXT != Requirement_Copy.AFO_QUELLTEXT)
            {
                if (this.AFO_QUELLTEXT != "" && Requirement_Copy.AFO_QUELLTEXT != null)
                {
                    Issue_Text = Issue_Text + "AFO_QUELLTEXT: " + Requirement_Copy.AFO_QUELLTEXT + " --> " + this.AFO_QUELLTEXT + "\n";
                }
            }
            //Abnahmekriterium
            if (this.AFO_ABNAHMEKRITERIUM != Requirement_Copy.AFO_ABNAHMEKRITERIUM)
            {
                if (this.AFO_ABNAHMEKRITERIUM != "" && Requirement_Copy.AFO_ABNAHMEKRITERIUM != null)
                {
                    Issue_Text = Issue_Text + "AFO_ABNAHMEKRITERIUM: " + Requirement_Copy.AFO_ABNAHMEKRITERIUM + " --> " + this.AFO_ABNAHMEKRITERIUM + "\n";
                }
            }
            #endregion Textfelder
            //////////////////////////////////////////////////
            #region Klärungspunkte
            if (this.AFO_KLAERUNGSPUNKTE != Requirement_Copy.AFO_KLAERUNGSPUNKTE)
            {
                if (this.AFO_KLAERUNGSPUNKTE != "" && Requirement_Copy.AFO_KLAERUNGSPUNKTE != null)
                {
                    Issue_Text = Issue_Text + "AFO_KLAERUNGSPUNKTE: " + Requirement_Copy.AFO_KLAERUNGSPUNKTE + " --> " + this.AFO_KLAERUNGSPUNKTE + "\n";
                }
            }
            #endregion Klärungspunkte
            /////////////////////////////////////////////////
            #region Bewertung
            //Detailstufe
            if (this.AFO_DETAILSTUFE != Requirement_Copy.AFO_DETAILSTUFE)
            {
                Issue_Text = Issue_Text + "AFO_DETAILSTUFE: " + Data.AFO_ENUM.AFO_DETAILSTUFE[(int)Requirement_Copy.AFO_DETAILSTUFE] + " --> " + Data.AFO_ENUM.AFO_DETAILSTUFE[(int)this.AFO_DETAILSTUFE] + "\n";
            }
            //Kategorie
            if (this.IN_CATEGORY != Requirement_Copy.IN_CATEGORY)
            {
                Issue_Text = Issue_Text + "IN_CATEGORY: " + Data.AFO_ENUM.IN_CATEGORY[(int)Requirement_Copy.IN_CATEGORY] + " --> " + Data.AFO_ENUM.IN_CATEGORY[(int)this.IN_CATEGORY] + "\n";
            }
            //Kritikalitaet
            if (this.AFO_KRITIKALITAET != Requirement_Copy.AFO_KRITIKALITAET)
            {
                Issue_Text = Issue_Text + "AFO_KRITIKALITAET: " + Data.AFO_ENUM.AFO_KRITIKALITAET[(int)Requirement_Copy.AFO_KRITIKALITAET] + " --> " + Data.AFO_ENUM.AFO_KRITIKALITAET[(int)this.AFO_KRITIKALITAET] + "\n";
            }
            //Prioritaet Vergabe
            if (this.AFO_PRIORITAET_VERGABE != Requirement_Copy.AFO_PRIORITAET_VERGABE)
            {
                Issue_Text = Issue_Text + "AFO_PRIORITAET_VERGABE: " + Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)Requirement_Copy.AFO_PRIORITAET_VERGABE] + " --> " + Data.AFO_ENUM.AFO_PRIORITAET_VERGABE[(int)this.AFO_PRIORITAET_VERGABE] + "\n";
            }
            //AG_ID
            if (this.AFO_AG_ID != Requirement_Copy.AFO_AG_ID)
            {
                if (this.AFO_AG_ID != "" && Requirement_Copy.AFO_AG_ID != null)
                {
                    Issue_Text = Issue_Text + "AFO_AG_ID: " + Requirement_Copy.AFO_AG_ID + " --> " + this.AFO_AG_ID + "\n";
                }
            }
            //AN_ID
            if (this.AFO_AN_ID != Requirement_Copy.AFO_AN_ID)
            {
                if (this.AFO_AN_ID != "" && Requirement_Copy.AFO_AN_ID != null)
                {
                    Issue_Text = Issue_Text + "AFO_AN_ID: " + Requirement_Copy.AFO_AN_ID + " --> " + this.AFO_AN_ID + "\n";
                }
            }
            #endregion Bewertung
            /////////////////////////////////////////////////
            #region Auswahl
            //AFO_WV_ART
            if (this.AFO_WV_ART != Requirement_Copy.AFO_WV_ART)
            {
                Issue_Text = Issue_Text + "AFO_WV_ART: " + Data.AFO_ENUM.AFO_WV_ART[(int)Requirement_Copy.AFO_WV_ART] + " --> " + Data.AFO_ENUM.AFO_WV_ART[(int)this.AFO_WV_ART] + "\n";
            }
            //funktional
            if (this.AFO_FUNKTIONAL != Requirement_Copy.AFO_FUNKTIONAL)
            {
                Issue_Text = Issue_Text + "AFO_FUNKTIONAL: " + Data.AFO_ENUM.AFO_FUNKTIONAL[(int)Requirement_Copy.AFO_FUNKTIONAL] + " --> " + Data.AFO_ENUM.AFO_FUNKTIONAL[(int)this.AFO_FUNKTIONAL] + "\n";
            }
            //Status
            if (this.AFO_STATUS != Requirement_Copy.AFO_STATUS)
            {
                Issue_Text = Issue_Text + "AFO_STATUS: " + Data.AFO_ENUM.AFO_STATUS[(int)Requirement_Copy.AFO_STATUS] + " --> " + Data.AFO_ENUM.AFO_STATUS[(int)this.AFO_STATUS] + "\n";
            }
            //QS-Status
            if (this.AFO_QS_STATUS != Requirement_Copy.AFO_QS_STATUS)
            {
                Issue_Text = Issue_Text + "AFO_QS_STATUS: " + Data.AFO_ENUM.AFO_QS_STATUS[(int)Requirement_Copy.AFO_QS_STATUS] + " --> " + Data.AFO_ENUM.AFO_QS_STATUS[(int)this.AFO_QS_STATUS] + "\n";
            }
            //Phase
            if (this.AFO_CPM_PHASE != Requirement_Copy.AFO_CPM_PHASE)
            {
                Issue_Text = Issue_Text + "AFO_CPM_PHASE: " + Data.AFO_ENUM.AFO_CPM_PHASE[(int)Requirement_Copy.AFO_CPM_PHASE] + " --> " + Data.AFO_ENUM.AFO_CPM_PHASE[(int)this.AFO_CPM_PHASE] + "\n";
            }
            //Bezug
            if (this.AFO_BEZUG != Requirement_Copy.AFO_BEZUG)
            {
                Issue_Text = Issue_Text + "AFO_BEZUG: " + Data.AFO_ENUM.AFO_BEZUG[(int)Requirement_Copy.AFO_BEZUG] + " --> " + Data.AFO_ENUM.AFO_BEZUG[(int)this.AFO_BEZUG] + "\n";
            }
            //Nachweisart
            if (this.AFO_WV_NACHWEISART != Requirement_Copy.AFO_WV_NACHWEISART)
            {
                Issue_Text = Issue_Text + "AFO_WV_NACHWEISART: " + Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)Requirement_Copy.AFO_WV_NACHWEISART] + " --> " + Data.AFO_ENUM.AFO_WV_NACHWEISART[(int)this.AFO_WV_NACHWEISART] + "\n";
            }
            //Projektrolle
            if (this.AFO_PROJEKTROLLE != Requirement_Copy.AFO_PROJEKTROLLE)
            {
                Issue_Text = Issue_Text + "AFO_PROJEKTROLLE: " + Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)Requirement_Copy.AFO_PROJEKTROLLE] + " --> " + Data.AFO_ENUM.AFO_PROJEKTROLLE[(int)this.AFO_PROJEKTROLLE] + "\n";
            }
            #endregion Auswahl


            //Es wurde etwas geändert
            if (Issue_Text != "")
            {
                Repository_Element repository_Element = new Repository_Element();
                Repository_Connector con = new Repository_Connector();
                List<string> m_Type_con = new List<string>();
                List<string> m_Stereotype_con = new List<string>();
                List<string> m_Toolbox_con = new List<string>();
                m_Type_con.Add("Abstraction");
                m_Stereotype_con.Add("trace");
                m_Toolbox_con.Add("");

                string Package_guid = repository_Element.Create_Package_Model(Data.metamodel.m_Package_Name[2], repository, Data);
                string Package_aenderung = repository_Element.Create_Package_Model(Data.metamodel.m_Package_Name[3], repository, Data);
                EA.Package Package_Infoübertragung = repository.GetPackageByGuid(Package_aenderung);
                EA.Package Package_Requirement = repository.GetPackageByGuid(Package_guid);
                Package_Infoübertragung.ParentID = Package_Requirement.PackageID;
                Package_Requirement.Packages.Refresh();
                Package_Infoübertragung.Update();
                Issue issue = new Issue(Data, Issue_Name, Issue_Text, Package_aenderung, repository, true, null);
                con.Create_Dependency(issue.Classifier_ID, this.Classifier_ID, m_Stereotype_con, m_Type_con, null, repository, Data, m_Toolbox_con[0], true);
            }

        }
        #endregion Misc


        #region Copy
        public void Copy_Elements_Replace(Database database, EA.Repository repository, List<bool> m_auswahl)
        {
           

           
                #region Elements
                //Erhalten Konektoren Elements
                if (database.metamodel.m_Derived_Element.Count > 0 && m_auswahl[0] == true)
                {
                    if (this.m_Requirement_Replace.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            List<string> m_element_guid = this.m_Requirement_Replace[i1].Get_Supplier_Connector(database, database.metamodel.m_Derived_Element.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Element.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Element[0].direction);

                            if (m_element_guid.Count > 0)
                            {
                                m_element_guid.ForEach(x => this.Create_Connector_Supplier(repository, database, x, database.metamodel.m_Derived_Element.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Element.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Element.Select(y => y.SubType).ToList()[0], database.metamodel.m_Derived_Element.Select(y => y.Toolbox).ToList()[0], database.metamodel.m_Derived_Element[0].direction));
                            }


                            i1++;
                        } while (i1 < this.m_Requirement_Replace.Count);
                    }

                }
                #endregion

                #region Logicals
                //Erhalten Konnektoren Logical
                if (database.metamodel.m_Derived_Logical.Count > 0 && m_auswahl[1] == true)
                {
                    if (this.m_Requirement_Replace.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            List<string> m_element_guid = this.m_Requirement_Replace[i1].Get_Supplier_Connector(database, database.metamodel.m_Derived_Logical.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Logical.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Logical[0].direction);

                            if (m_element_guid.Count > 0)
                            {
                                m_element_guid.ForEach(x => this.Create_Connector_Supplier(repository, database, x, database.metamodel.m_Derived_Logical.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Logical.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Logical.Select(y => y.SubType).ToList()[0], database.metamodel.m_Derived_Logical.Select(y => y.Toolbox).ToList()[0], database.metamodel.m_Derived_Logical[0].direction));
                            }


                            i1++;
                        } while (i1 < this.m_Requirement_Replace.Count);
                    }

                }
                #endregion

                #region Capability
                //Erhalten Konnektoren Capability
                if (database.metamodel.m_Derived_Capability.Count > 0 && m_auswahl[2] == true)
                {
                    if (this.m_Requirement_Replace.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            List<string> m_element_guid = this.m_Requirement_Replace[i1].Get_Supplier_Connector(database, database.metamodel.m_Derived_Capability.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Capability.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Capability[0].direction);

                            if (m_element_guid.Count > 0)
                            {
                                m_element_guid.ForEach(x => this.Create_Connector_Supplier(repository, database, x, database.metamodel.m_Derived_Capability.Select(y => y.Type).ToList(), database.metamodel.m_Derived_Capability.Select(y => y.Stereotype).ToList(), database.metamodel.m_Derived_Capability.Select(y => y.SubType).ToList()[0], database.metamodel.m_Derived_Capability.Select(y => y.Toolbox).ToList()[0], database.metamodel.m_Derived_Capability[0].direction));
                            }


                            i1++;
                        } while (i1 < this.m_Requirement_Replace.Count);
                    }

                }
                #endregion

                #region Refines Eltern
                //Refines Beziehung kopieren
                if (database.metamodel.m_Afo_Refines.Count > 0 && m_auswahl[3] == true)
                {
                    if (this.m_Requirement_Replace.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            List<string> m_element_guid = this.m_Requirement_Replace[i1].Get_Supplier_Connector(database, database.metamodel.m_Afo_Refines.Select(y => y.Type).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.Stereotype).ToList(), database.metamodel.m_Afo_Refines[0].direction);

                            if (m_element_guid.Count > 0)
                            {
                                m_element_guid.ForEach(x => this.Create_Connector_Supplier(repository, database, x, database.metamodel.m_Afo_Refines.Select(y => y.Type).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.SubType).ToList()[0], database.metamodel.m_Afo_Refines.Select(y => y.Toolbox).ToList()[0], database.metamodel.m_Afo_Refines[0].direction));
                            }


                            i1++;
                        } while (i1 < this.m_Requirement_Replace.Count);
                    }

                }
                #endregion

                #region Refines Kinder
                //RefeinedBy Beziehung kopieren
                if (database.metamodel.m_Afo_Refines.Count > 0 && m_auswahl[4] == true)
                {
                    if (this.m_Requirement_Replace.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            List<string> m_element_guid = this.m_Requirement_Replace[i1].Get_Client_Connector(database, database.metamodel.m_Afo_Refines.Select(y => y.Type).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.Stereotype).ToList());

                            if (m_element_guid.Count > 0)
                            {
                                m_element_guid.ForEach(x => this.Create_Connector_Client(repository, database, x, database.metamodel.m_Afo_Refines.Select(y => y.Type).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.Stereotype).ToList(), database.metamodel.m_Afo_Refines.Select(y => y.SubType).ToList()[0], database.metamodel.m_Afo_Refines.Select(y => y.Toolbox).ToList()[0], database.metamodel.m_Afo_Refines[0].direction));
                            }


                            i1++;
                        } while (i1 < this.m_Requirement_Replace.Count);
                    }

                }
                #endregion
            


        }


        public void Copy_Requirement(Requirement copyfrom, SysElement sysElement, Database database)
        {
            //Bei Schnittstellen muss das zweite System auch aufdatert werden
       

            //TV übernehmen
            #region TV
            this.AFO_ABNAHMEKRITERIUM = copyfrom.AFO_ABNAHMEKRITERIUM;
            this.AFO_AG_ID = copyfrom.AFO_AG_ID;
            this.AFO_ANSPRECHPARTNER = copyfrom.AFO_ANSPRECHPARTNER;
            this.AFO_AN_ID = copyfrom.AFO_AN_ID;
            this.AFO_BEZUG = copyfrom.AFO_BEZUG;
            this.AFO_CPM_PHASE = copyfrom.AFO_CPM_PHASE;
            this.AFO_DETAILSTUFE = copyfrom.AFO_DETAILSTUFE;
            this.AFO_FUNKTIONAL = copyfrom.AFO_FUNKTIONAL;
            this.AFO_HINWEIS = copyfrom.AFO_HINWEIS;
            this.AFO_KLAERUNGSPUNKTE = copyfrom.AFO_KLAERUNGSPUNKTE;
            this.AFO_KRITIKALITAET = copyfrom.AFO_KRITIKALITAET;
            this.AFO_OPERATIVEBEWERTUNG = copyfrom.AFO_OPERATIVEBEWERTUNG;
            this.AFO_PRIORITAET_VERGABE = copyfrom.AFO_PRIORITAET_VERGABE;
            this.AFO_PROJEKTROLLE = copyfrom.AFO_PROJEKTROLLE;
            this.AFO_QS_STATUS = copyfrom.AFO_QS_STATUS;
            this.AFO_QUELLTEXT = copyfrom.AFO_QUELLTEXT;
            this.AFO_REGELUNGEN = copyfrom.AFO_REGELUNGEN;
            this.AFO_STATUS = copyfrom.AFO_STATUS;
            this.AFO_VERBINDLICHKEIT = copyfrom.AFO_VERBINDLICHKEIT;
            this.AFO_VERERBUNG = copyfrom.AFO_VERERBUNG;
            this.AFO_WV_ART = copyfrom.AFO_WV_ART;
            this.AFO_WV_NACHWEISART = copyfrom.AFO_WV_NACHWEISART;
            this.AFO_WV_PHASE = copyfrom.AFO_WV_PHASE;
            this.B_BEMERKUNG = copyfrom.B_BEMERKUNG;
            this.CLARIFICATION = copyfrom.CLARIFICATION;
            this.IN_CATEGORY = copyfrom.IN_CATEGORY;
            this.RPI_Export = this.RPI_Export;
            this.TagMask = copyfrom.TagMask;
            this.W_AFO_MANUAL = copyfrom.W_AFO_MANUAL;
            this.W_AKTIVITAET = copyfrom.W_AKTIVITAET;
            this.W_FREEZE_TITLE = copyfrom.W_FREEZE_TITLE;
            this.W_NUTZENDER = copyfrom.W_NUTZENDER;
            this.W_OBJEKT = copyfrom.W_OBJEKT;
            this.W_PROZESSWORT = copyfrom.W_PROZESSWORT;
            this.W_QUALITAET = copyfrom.W_QUALITAET;
            this.W_RANDBEDINGUNG = copyfrom.W_RANDBEDINGUNG;
            this.W_ZU = copyfrom.W_ZU;
 

            //Übernahme SysElement
            this.W_SINGULAR = sysElement.W_SINGULAR;
            this.W_SUBJEKT = sysElement.SYS_ARTIKEL + " " + sysElement.SYS_KUERZEL;
            //Änderung AFO_text & AFO_titel
            //this.AFO_TEXT = 
            this.Get_AFO_Text(sysElement, database);

            this.AFO_TITEL = copyfrom.AFO_TITEL;
            string[] m_string = copyfrom.W_SUBJEKT.Split(' ');
            this.AFO_TITEL = this.AFO_TITEL.Replace(m_string[1], sysElement.SYS_KUERZEL);
              //  sysElement.SYS_KUERZEL + " - " + W_PROZESSWORT + " " + W_OBJEKT + " " + W_QUALITAET;

            #endregion TV

        }

        public void Copy_Requirement_Connectoren(Requirement copyfrom, Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            //DerivedFrom Supplier erhalten
            List<string> m_guid_supplier = copyfrom.Get_Supplier_Connector(database, database.metamodel.m_Derived_Element.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Element[0].direction);
            if(m_guid_supplier.Count > 0)
            {
                ////DerivedFrom verknüpfen 
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.Classifier_ID, m_guid_supplier[i1], database.metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Element.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Element.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Derived_Element.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Derived_Element[0].direction);

                    i1++;
                } while (i1 < m_guid_supplier.Count);
            }
            //PartOfCategory Supplier erhalten
            List<string> m_guid_supplier_poc = copyfrom.Get_Supplier_Connector(database, database.metamodel.m_Derived_Capability.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Capability[0].direction);
            if (m_guid_supplier_poc.Count > 0)
            {
                ////PartOfCategory verknüpfen 
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.Classifier_ID, m_guid_supplier_poc[i1], database.metamodel.m_Derived_Capability.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Capability.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Capability.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Derived_Capability.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Derived_Capability[0].direction);

                    i1++;
                } while (i1 < m_guid_supplier_poc.Count);
            }

            if(copyfrom.m_Logical.Count > 0)
            {
                int i1 = 0;
                do
                {
                    repository_Connector.Create_Dependency(this.Classifier_ID, copyfrom.m_Logical[i1].Classifier_ID, database.metamodel.m_Derived_Logical.Select(x => x.Stereotype).ToList(), database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList(), database.metamodel.m_Derived_Logical.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Derived_Logical.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Derived_Logical[0].direction);

                    i1++;
                } while (i1 < copyfrom.m_Logical.Count);
            }

          
        }
        #endregion
        #region Connectoren
        public void Create_SatisfyDesign_Begruendung(OperationalConstraint constraint, Activity parent, Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_action_guid = this.Get_Actions(database, repository);

            if(parent.m_Child.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (parent.m_Child[i1].m_GUID.Count > 0)
                    {
                        //Schnittmenge Actions und m_Guid finden
                        List<string> m_action = m_action_guid.Intersect(parent.m_Child[i1].m_GUID).ToList();

                        if(m_action.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                                repository_Connector.Create_Dependency(m_action[i2], constraint.Classifier_ID, database.metamodel.m_Satisfy_Design.Select(x => x.Stereotype).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.Type).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Satisfy_Design.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Satisfy_Design[0].direction);


                                i2++;
                            } while (i2 < m_action.Count);
                        }
                    }

                    i1++;
                } while (i1 < parent.m_Child.Count);
            }
        }

        public void Create_SatisfyDesign_Begruendung_Variante1(OperationalConstraint constraint, Database database, EA.Repository repository)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_action_guid = this.Get_Actions(database, repository);

            if(m_action_guid != null)
            {
                if (m_action_guid.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(m_action_guid[i1], constraint.Classifier_ID, database.metamodel.m_Satisfy_Design.Select(x => x.Stereotype).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.Type).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Satisfy_Design.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Satisfy_Design[0].direction);


                        i1++;
                    } while (i1 < m_action_guid.Count);

                }
            }
            else
            {
                List<string> m_activity_guid = this.Get_Activity(database, repository);

                if (m_activity_guid.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        repository_Connector.Create_Dependency(m_activity_guid[i1], constraint.Classifier_ID, database.metamodel.m_Satisfy_Design.Select(x => x.Stereotype).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.Type).ToList(), database.metamodel.m_Satisfy_Design.Select(x => x.SubType).ToList()[0], repository, database, database.metamodel.m_Satisfy_Design.Select(x => x.Toolbox).ToList()[0], database.metamodel.m_Satisfy_Design[0].direction);


                        i1++;
                    } while (i1 < m_activity_guid.Count);

                }
            }
            
           
        }
        private void Create_Connector_Supplier(EA.Repository repositroy, Database database, string supplier_guid, List<string> m_Type_Con, List<string> m_Stereotype_Con, string Subtype_con, string toolbox_con, bool direction)
        {
            Repository_Connector repository_Connector = new Repository_Connector();

            if(this.Classifier_ID != supplier_guid)
            {
                repository_Connector.Create_Dependency(this.Classifier_ID, supplier_guid, m_Stereotype_Con, m_Type_Con, Subtype_con, repositroy, database, toolbox_con, direction);
            }

           
        }

        private void Create_Connector_Client(EA.Repository repositroy, Database database, string client_guid, List<string> m_Type_Con, List<string> m_Stereotype_Con, string Subtype_con, string toolbox_con, bool direction)
        {
            Repository_Connector repository_Connector = new Repository_Connector();

            if (this.Classifier_ID != client_guid)
            {
                repository_Connector.Create_Dependency(client_guid, this.Classifier_ID, m_Stereotype_Con, m_Type_Con, Subtype_con, repositroy, database, toolbox_con, direction);
            }
        }


        public List<string>  Get_Supplier_Connector(Database database,List<string> m_Type_Con, List<string> m_Stereotype_Con, bool direction)
        {

            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            List<string> m_ret = new List<string>();
            m_help.Add(this.Classifier_ID);
            List<DB_Return> m_ret_db = interface_Connectors.Get_m_Supplier_From_Client(database, this.ID, m_Type_Con, m_Stereotype_Con, direction);

            if(m_ret_db.Count > 0)
            {
                if(m_ret_db[0] != null)
                {
                    if (m_ret_db[0].Ret != null)
                    {
                        if (m_ret_db[0].Ret.Count > 1)
                        {
                            int i1 = 1;
                            do
                            {

                                string help = (string)m_ret_db[0].Ret[i1];

                                m_ret.Add(help);

                                i1++;
                            } while (i1 < m_ret_db[0].Ret.Count);
                        }
                    }
                }
            }


            return (m_ret);
            
        }

        public  List<string> Get_Client_Connector(Database database, List<string> m_Type_Con, List<string> m_Stereotype_Con)
        {

            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            List<string> m_ret = new List<string>();
            m_help.Add(this.Classifier_ID);
            List<DB_Return> m_ret_db = interface_Connectors.Get_m_Client_From_Supplier(database, this.ID, m_Type_Con, m_Stereotype_Con);

            if (m_ret_db.Count > 0)
            {
                if (m_ret_db[0] != null)
                {
                    if (m_ret_db[0].Ret != null)
                    {
                        if (m_ret_db[0].Ret.Count > 1)
                        {
                            int i1 = 1;
                            do
                            {

                                string help = (string)m_ret_db[0].Ret[i1];

                                m_ret.Add(help);

                                i1++;
                            } while (i1 < m_ret_db[0].Ret.Count);
                        }
                    }
                }
            }


            return (m_ret);

        }




        public List<string> Get_Supplier(Database database, List<string> m_Type_Sup, List<string> m_Stereotype_Sup, List<string> m_Type_Con, List<string> m_Stereotype_Con)
        {
           
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_help = new List<string>();
            m_help.Add(this.Classifier_ID);
            return (interface_Connectors.Get_Supplier_Element_By_Connector(database, m_help, m_Type_Sup, m_Stereotype_Sup, m_Type_Con, m_Stereotype_Con));
        }

        public List<string> Get_Client(Database database, List<string> m_Type_Sup, List<string> m_Stereotype_Sup, List<string> m_Type_Con, List<string> m_Stereotype_Con)
        {
          
           
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> help = new List<string>();
            help.Add(this.Classifier_ID);
            return (interface_Connectors.Get_Client_Element_By_Connector(database, help, m_Type_Sup, m_Stereotype_Sup, m_Type_Con, m_Stereotype_Con));
        }

        #endregion

        #region AFO_TExt
        private void Get_AFO_Text(SysElement sysElement, Database database)
        {
            


            string AFO_Text = "";
            bool pos_quali = false;

            List<string> AFO_Text_List = new List<string>();
            AFO_Text_List.Add(this.W_RANDBEDINGUNG);        //0 Randbedingung
            if (this.W_SINGULAR == false)               //1 
            {
                AFO_Text_List.Add("müssen ");
            }
            else
            {
                AFO_Text_List.Add("muss ");
            }

            if(this.W_SINGULAR == true) //2 Artieke lSystemelement
            {
                AFO_Text_List.Add(database.metamodel.Artikel[(int)sysElement.SYS_ARTIKEL]);
            }
            else
            {
                AFO_Text_List.Add("die");
            }
            AFO_Text_List.Add(sysElement.SYS_KUERZEL); //3 Bezeichnung Systemelement
            AFO_Text_List.Add(this.W_NUTZENDER); //4  Nutzender mit Artikel
            AFO_Text_List.Add(""); //5 Leer

            AFO_Text_List.Add( database.AFO_ENUM.W_AKTIVITAET[(int)this.W_AKTIVITAET]);       //6
            AFO_Text_List.Add(", ");                                //7
            AFO_Text_List.Add(" ");//8
            if (this.W_OBJEKT != null) //9
            {
                AFO_Text_List.Add(this.W_OBJEKT);
            }
            else
            {
                AFO_Text_List.Add("");
            }
            if(this.W_QUALITAET != null) //10
            {
                AFO_Text_List.Add(this.W_QUALITAET);
            }
            else
            {
                AFO_Text_List.Add("");
            }
                    
            AFO_Text_List.Add("zu ");                               //11
            if (this.W_PROZESSWORT != null) //12
            {
                AFO_Text_List.Add(this.W_PROZESSWORT);
            }
            else
            {
                AFO_Text_List.Add("");
            }//  AFO_Text_List.Add(this.comboBox_Prozesswort.Text);     
           
            AFO_Text_List.Add(".");                                 //13

            //Mit Randbedingung
            if (AFO_Text_List[0] != "" && AFO_Text_List[0] != null)
            {
                //Randbedingung
                AFO_Text = AFO_Text_List[0];
                AFO_Text = AFO_Text[0].ToString().ToUpper() + AFO_Text.Substring(1);
                AFO_Text = AFO_Text + AFO_Text_List[8];
                //muss
                AFO_Text = AFO_Text + AFO_Text_List[1];
                //Sys Artikel
                AFO_Text = AFO_Text + AFO_Text_List[2];
                if (AFO_Text_List[2] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }
                //Sys Name
                AFO_Text = AFO_Text + AFO_Text_List[3];
                if (AFO_Text_List[3] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }

            }
            else //ohne Randbedingung
            {
                //Sys Artiekl
                AFO_Text = AFO_Text + AFO_Text_List[2];
                if (AFO_Text_List[2] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }
                AFO_Text = AFO_Text[0].ToString().ToUpper() + AFO_Text.Substring(1);
                //Sys Name
                AFO_Text = AFO_Text + AFO_Text_List[3];
                if (AFO_Text_List[3] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }
                //muss
                AFO_Text = AFO_Text + AFO_Text_List[1];
            }

            //Varante Akteur
            if (AFO_Text_List[6] == database.AFO_ENUM.W_AKTIVITAET[1])
            {
                //Artiek Stakeholder
                AFO_Text = AFO_Text + AFO_Text_List[4] + AFO_Text_List[8];
               /* if (AFO_Text_List[4] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }
                //Name Stakeholder
                AFO_Text = AFO_Text + AFO_Text_List[5];
                if (AFO_Text_List[5] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }*/
            }

            if (AFO_Text_List[6] == database.AFO_ENUM.W_AKTIVITAET[0])
            {
                AFO_Text_List[6] = "";
            }
            //Aktiviaet einfügen
            AFO_Text = AFO_Text + AFO_Text_List[6];

            if (AFO_Text_List[6] != "")
            {
                AFO_Text = AFO_Text + AFO_Text_List[7];
            }
            else
            {
                //  AFO_Text = AFO_Text + AFO_Text_List[8];
            }

            if (AFO_Text_List[9].Contains(database.metamodel.Pos_Qualitaet_Operator) == true)
            {
                pos_quali = true;

                AFO_Text_List[9] = AFO_Text_List[9].Replace(database.metamodel.Pos_Qualitaet_Operator, AFO_Text_List[10]);

            }

            //Objekt
            AFO_Text = AFO_Text + AFO_Text_List[9];
            if (AFO_Text_List[9] != "")
            {
                AFO_Text = AFO_Text + AFO_Text_List[8];
            }

            //Qualitaet
            if (pos_quali == false)
            {
                AFO_Text = AFO_Text + AFO_Text_List[10];
                if (AFO_Text_List[10] != "")
                {
                    AFO_Text = AFO_Text + AFO_Text_List[8];
                }
            }

            //Zu einfügen
            if (AFO_Text_List[6] == database.AFO_ENUM.W_AKTIVITAET[1] || AFO_Text_List[6] == database.AFO_ENUM.W_AKTIVITAET[1])
            {
                if (this.W_ZU == true)
                {
                    AFO_Text = AFO_Text + AFO_Text_List[11];
                }

            }

            //Prozesswort
            AFO_Text = AFO_Text + AFO_Text_List[12];
            //Satzende
            AFO_Text = AFO_Text + AFO_Text_List[13];
            //TextBox beschreiebn
            this.AFO_TEXT = AFO_Text;
           // this.Text_AFO_Text.Refresh();
          
        }


        public void Change_AFO_TExt_Interface(Database database, EA.Repository repository)
        {
            

           
                //Performer durch Systemelement ersetzen
                if (database.m_SysElemente.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        if (database.m_SysElemente[i1].m_Implements.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                            //if (this.AFO_TEXT.Contains() == true)

                                if (this.AFO_TEXT.IndexOf(database.m_SysElemente[i1].m_Implements[i2].SYS_ARTIKEL + " " + database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, StringComparison.CurrentCultureIgnoreCase) >= 0)
                                {
                                    this.AFO_TEXT = Regex.Replace(this.AFO_TEXT,database.m_SysElemente[i1].m_Implements[i2].SYS_ARTIKEL + " " + database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_ARTIKEL + " " + database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);
                                    this.W_OBJEKT = Regex.Replace(this.W_OBJEKT,database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);
                                    this.AFO_TITEL = Regex.Replace(this.AFO_TITEL,database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase );
                                }
                                else
                                {
                                    //if (this.AFO_TEXT.Contains(database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL) == true)
                                    if(this.AFO_TEXT.IndexOf(database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, StringComparison.CurrentCultureIgnoreCase) >= 0)
                                    {
                                        this.AFO_TEXT = Regex.Replace(this.AFO_TEXT,database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);
                                         this.W_OBJEKT = Regex.Replace(this.W_OBJEKT,database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);
                                        this.AFO_TITEL = Regex.Replace(this.AFO_TITEL,database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);
                                     }
                                }

                                if(this.AFO_TITEL.IndexOf(database.m_SysElemente[i1].m_Implements[i2].SYS_ARTIKEL + " " + database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, StringComparison.CurrentCultureIgnoreCase) >=0)
                                {
                                    this.AFO_TITEL = Regex.Replace(this.AFO_TITEL, database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);

                                }
                            else
                                {
                                    if(this.AFO_TITEL.IndexOf(database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, StringComparison.CurrentCultureIgnoreCase) >=0)
                                    {
                                        this.AFO_TITEL = Regex.Replace(this.AFO_TITEL, database.m_SysElemente[i1].m_Implements[i2].SYS_KUERZEL, database.m_SysElemente[i1].SYS_KUERZEL, RegexOptions.IgnoreCase);

                                    }
                            }
                                i2++;
                            } while (i2 < database.m_SysElemente[i1].m_Implements.Count);
                        }

                        i1++;
                    } while (i1 < database.m_SysElemente.Count);
                }
            
        }
        #endregion
    }
}//end namespace Requirement
                            
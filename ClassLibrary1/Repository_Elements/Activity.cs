///////////////////////////////////////////////////////////
//  Activity.cs
//  Implementation of the Class Activity
//  Generated by Enterprise Architect
//  Created on:      23-Jan-2019 17:21:13
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Linq;
using System.Data.OleDb;
using Requirement_Plugin.Interfaces;
using System.Data.Odbc;

using Database_Connection;
using Metamodels;
using Elements;
using Requirement_Plugin;
using Ennumerationen;

namespace Repsoitory_Elements {
	public class Activity : Repository_Element, IEquatable<Activity>, IComparable<Activity>
    {

		public List<Activity> m_Child;
		public List<Element_Functional> m_Element_Functional;
		public List<Element_User> m_Element_User;
		public List<Activity> m_Parent;
        public List<Activity> m_Specialize;
        public List<Element_Process> m_Process;
        public List<string> m_GUID;

        public List<Element_Measurement> m_Element_Measurement_Activity;

        public string W_Object { get; set; }
        public string W_Prozesswort { get; set; }



        public Activity(string GUID, Database database, EA.Repository repository){

            this.Classifier_ID = GUID;
            this.ID = this.Get_Object_ID(database);
         //   this.Author = this.Get_Author(database);
            this.Name = this.Get_Name(database);
         //   this.Notes = this.Get_Notes(repository, this.Classifier_ID, database);
            this.m_Child = new List<Activity>();
            this.m_Element_Functional = new List<Element_Functional>();
            this.m_Element_User = new List<Element_User>();
            this.m_Parent = new List<Activity>();
            this.m_Process = new List<Element_Process>();
            this.m_GUID = new List<string>();
            this.m_Specialize = new List<Activity>();
            this.m_Element_Measurement_Activity = new List<Element_Measurement>();

            if(GUID != null)
            {
                //////////////////////////
                ///W_OBJEKT; W_PROZESSWORT;W_QUALITAET; W_RANDBEDINGUNG;
                //TaggedValue taggedValue = new TaggedValue(metamodel, database);
                ////////////////////////////////////////////////
                ///W_Object
           /*     if (taggedValue.Get_Tagged_Value(this.Classifier_ID, "W_OBJEKT", repository) == null)
                {
                    Get_Activity_Object(repository, metamodel, database);
                }

                this.W_Object = taggedValue.Get_Tagged_Value(this.Classifier_ID, "W_OBJEKT", repository);
                //////////////////////////////////////////////////
                ///W_PROZESSWORT
                if (taggedValue.Get_Tagged_Value(this.Classifier_ID, "W_PROZESSWORT", repository) == null)
                {
                    Get_Activity_Prozesswort(repository, metamodel, database);
                }*/
                DB_Insert act_obj = Get_Activity_Object( database.metamodel, database);
                DB_Insert act_pro = Get_Activity_Prozesswort(database.metamodel, database);
                List<DB_Insert> m_Insert = new List<DB_Insert>();

                if(act_obj != null)
                {
                    m_Insert.Add(act_obj);
                    this.W_Object = act_obj.Value_str.ToString();
                }
                if(act_pro != null)
                {
                    m_Insert.Add(act_pro);
                    this.W_Prozesswort = act_pro.Value_str.ToString();
                }

                if(m_Insert.Count > 0)
                {
                    Update_TV(m_Insert, database, repository);
                }

               // this.W_Prozesswort = taggedValue.Get_Tagged_Value(this.Classifier_ID, "W_PROZESSWORT", repository);
            }
         
        }

		~Activity(){

		}

        #region Check

        #region IEquatable
        public override bool Equals(object obj)
        {
            if (obj == null) return (false);
            Activity recent = obj as Activity;
            if (recent == null) return (false);
            else return (Equals(recent));
        }

        public bool Equals(Activity other)
        {
            if (other == null) return (false);

            if (this.W_Prozesswort == null)
            {
                return (false);
            }
            else
            {
                return (this.W_Prozesswort.Equals(other.W_Prozesswort));
            }
           
        }
        #endregion
        #region IComparable
        public int CompareTo(Activity compareClass)
        {
            if (compareClass == null) return (1);
            else
            {
                if (compareClass.W_Prozesswort == null) return (1);
                if (this.W_Prozesswort == null)
                {
                    return (1);
                }
                else
                { return (this.W_Prozesswort.CompareTo(compareClass.W_Prozesswort)); }
            }
        }
        #endregion
        /// <summary>
        /// Es wird die aktuelle Activity auf Embedded Elements überprüft --> Actions
        /// </summary>
        /// <param name="repository"></param>
        /// <param name="database"></param>
        public void Check_Children(EA.Repository repository, Database database)
        {
            List<string> m_Classifier_ID = new List<string>();

            #region UML
            List<string> m_Type_Action = database.metamodel.m_Aktivity_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_Action = database.metamodel.m_Aktivity_Usage.Select(x => x.Stereotype).ToList();

            //Direkte Kinderelemente
            m_Classifier_ID = this.Get_Children(database, m_Type_Action, m_Stereotype_Action);

            if (m_Classifier_ID != null)
            {
                int i1 = 0;
                do
                {
                    List<Activity> m_Children = database.Check_Activity(m_Classifier_ID[i1]);

                    if(m_Children.Count != null)
                    {
                        int i2 = 0;
                        do
                        {
                            //Es muss das überprüft werden, ob das aktuelle Element ein Parent_Element auf einer höheren Ebene ist
                            if (this.Check_Child_For_Parent(m_Children[i2], this) == false && m_Children[i2] != this)
                            {
                                if(this.m_Child.Contains(m_Children[i2]) == false)
                                {
                                    this.m_Child.Add(m_Children[i2]);
                                    m_Children[i2].m_Parent.Add(this);
                                }
                            
                            }

                            i2++;
                        } while (i2 < m_Children.Count);
                      
                    }

                    i1++;
                } while (i1 < m_Classifier_ID.Count);
            }
            #endregion UML

            #region BPMN

            if(database.metamodel.flag_bpmn == true)
            {
                List<string> m_Type_Action_BPMN = database.metamodel.m_Aktivity_Definition_BPMN.Select(x => x.Type).ToList();
                List<string> m_Stereotype_Action_BPMN = database.metamodel.m_Aktivity_Definition_BPMN.Select(x => x.Stereotype).ToList();

                List<string> m_Type_Lane_BPMN = database.metamodel.m_Lanes_BPMN.Select(x => x.Type).ToList();
                List<string> m_Stereotype_Lane_BPMN = database.metamodel.m_Lanes_BPMN.Select(x => x.Stereotype).ToList();

                List<string> m_Type_Pool_BPMN = database.metamodel.m_Pools_BPMN.Select(x => x.Type).ToList();
                List<string> m_Stereotype_Pool_BPMN = database.metamodel.m_Pools_BPMN.Select(x => x.Stereotype).ToList();


                m_Type_Pool_BPMN.AddRange(m_Type_Lane_BPMN);
                m_Stereotype_Pool_BPMN.AddRange(m_Stereotype_Lane_BPMN);
                //Direkte Kinderelemente überprüfen
                m_Classifier_ID = this.Get_Children(database, m_Type_Action_BPMN, m_Stereotype_Action_BPMN);
                if (m_Classifier_ID != null)
                {
                    int i1 = 0;
                    do
                    {
                        List<Activity> m_Children = database.Check_Activity(m_Classifier_ID[i1]);

                        if (m_Children.Count != null)
                        {
                            int i2 = 0;
                            do
                            {
                                //Es muss das überprüft werden, ob das aktuelle Element ein Parent_Element auf einer höheren Ebene ist
                                if (this.Check_Child_For_Parent(this, m_Children[i2]) == false && m_Children[i2] != this)
                                {
                                    this.m_Child.Add(m_Children[i2]);
                                    m_Children[i2].m_Parent.Add(this);
                                }

                                i2++;
                            } while (i2 < m_Children.Count);

                        }

                        i1++;
                    } while (i1 < m_Classifier_ID.Count);
                }
                //Pool als Kindelement
                m_Classifier_ID = this.Get_Children_Guid(database, m_Type_Pool_BPMN, m_Stereotype_Pool_BPMN);
                if (m_Classifier_ID != null)
                {
                    int i1 = 0;
                    do
                    {
                        Pool help = new Pool();
                        help.Classifier_ID = m_Classifier_ID[i1];

                        help.Get_Lanes(database);
                        help.Get_Activity(database, repository);

                        if (help.m_Activity.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                                if (this.Check_Child_For_Parent(help.m_Activity[i2], this) == false && help.m_Activity[i2] != this)
                                {
                                    this.m_Child.Add(help.m_Activity[i2]);
                                    help.m_Activity[i2].m_Parent.Add(this);
                                }


                                i2++;
                            } while (i2 < help.m_Activity.Count);
                        }

                        i1++;
                    } while (i1 < m_Classifier_ID.Count);
                }



            }


            #endregion BPMN
        }

        public void Check_Generalization(EA.Repository repository, Database database)
        {

            List<string> m_Type = new List<string>();
            m_Type = database.metamodel.m_Aktivity_Definition.Select(x => x.Type).ToList();
            m_Type.AddRange(database.metamodel.m_Aktivity_Definition_BPMN.Select(x => x.Type).ToList());
            List<string> m_Stereotype = new List<string>();
            m_Stereotype = database.metamodel.m_Aktivity_Definition.Select(x => x.Stereotype).ToList();
            m_Stereotype.AddRange(database.metamodel.m_Aktivity_Definition_BPMN.Select(x => x.Stereotype).ToList());
            List<string> m_Type_con = new List<string>();
            m_Type_con = database.metamodel.m_General_Activity.Select(x => x.Type).ToList();
            List<string> m_Stereotype_con = new List<string>();
            m_Stereotype_con = database.metamodel.m_General_Activity.Select(x => x.Stereotype).ToList();

            List<string> m_guid = this.Get_Generalization(database, m_Type, m_Stereotype, m_Type_con, m_Stereotype_con);

            if(m_guid != null)
            {
                int i1 = 0;
                do
                {
                    List<Activity> m_act = database.m_Activity.Where(x => x.Classifier_ID == m_guid[i1]).ToList();

                    if(m_act.Count > 0)
                    {
                        if(this.m_Specialize.Where(x => x.Classifier_ID == m_act[0].Classifier_ID).ToList().Count == 0)
                        {
                            this.m_Specialize.Add(m_act[0]);
                        }
                    }

                    i1++;
                } while (i1 < m_guid.Count);
                
            }
        }

        /// <summary>
        /// Es muss das überprüft werden, ob das aktuelle Element ein Parent_Element auf einer höheren Ebene ist 
        /// </summary>
        /// <param name="activity"></param>
        /// <returns></returns>
        private bool Check_Child_For_Parent(Activity root, Activity recent)
        {
            bool flag = false;

            if(recent.m_Parent.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Activity recent_Parent = recent.m_Parent[i1];

                    if(root.Classifier_ID == recent_Parent.Classifier_ID)
                    {
                        flag = true;
                    }
                    else
                    {
                        flag = Check_Child_For_Parent(root, recent_Parent);
                    }

                    i1++;
                } while (i1 < recent.m_Parent.Count && flag == false);
            }

            return (flag);
        }

        public void Get_Parents(EA.Repository repository, Database database)
        {
            if(this.m_GUID != null)
            {
                if (this.m_GUID.Count > 0)
                {
                    List<string> stereo = database.metamodel.m_Aktivity_Definition.Select(x => x.Stereotype).ToList();
                    Repsoitory_Elements.Repository_Element repository_Element = new Repository_Element();

                    int i1 = 0;
                    do
                    {
                        repository_Element.Classifier_ID = this.m_GUID[i1];
                        bool flag = true;

                        do
                        {
                            string par_guid = repository_Element.Get_Parent_GUID(database);
                            if (par_guid != null)
                            {
                                repository_Element.Classifier_ID = par_guid;

                                if (stereo.Contains(repository_Element.Get_Stereotype(database)))
                                {
                                    flag = false;
                                    List<Activity> m_par = database.m_Activity.Where(x => x.Classifier_ID == par_guid).ToList();

                                    if (m_par.Count == 0)
                                    {
                                        Activity parnet = new Activity(par_guid, database, repository);
                                        database.m_Activity.Add(parnet);
                                        parnet.m_Child.Add(this);
                                        this.m_Parent.Add(parnet);
                                    }
                                    else
                                    {
                                        if (m_par[0].m_Child.Select(x => x.Classifier_ID).ToList().Contains(this.Classifier_ID) == false)
                                        {
                                            m_par[0].m_Child.Add(this);
                                            this.m_Parent.Add(m_par[0]);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                flag = false;
                            }


                        } while (flag == true);





                        i1++;
                    } while (i1 < this.m_GUID.Count);
                }
            }
            else
            {
                this.m_GUID = new List<string>();
            }
        }

        


        private List<Element_Functional> Check_ElementFunctional(string Client_guid)
        {
            List<Element_Functional> m_ret = new List<Element_Functional>();

            m_ret = this.m_Element_Functional.Where(x => x.Supplier.Classifier_ID == this.Classifier_ID && x.Client.Classifier_ID == Client_guid).ToList();

            if(m_ret.Count == 0)
            {
                m_ret = null;
            }


            return (m_ret);
        }

        private List<Element_User> Check_ElementUser(string Client_guid)
        {
            List<Element_User> m_ret = new List<Element_User>();

            m_ret = this.m_Element_User.Where(x => x.Supplier.Classifier_ID == this.Classifier_ID && x.Client.Classifier_ID == Client_guid).ToList();

            if (m_ret.Count == 0)
            {
                m_ret = null;
            }


            return (m_ret);
        }


        public List<List<Elements.Element_Measurement>> Check_Measurements_Dopplung(NodeType nodeType)
        {
            List<List<Element_Measurement>> m_ret = new List<List<Element_Measurement>>();

            List<Elements.Element_Measurement> m_measure_func = this.m_Element_Functional.Where(y => y.Client == nodeType).SelectMany(x => x.m_element_measurement).ToList();
            List<Elements.Element_Measurement> m_measure_user = this.m_Element_User.Where(y => y.Client == nodeType).SelectMany(x => x.m_element_measurement).ToList();

            m_measure_func = m_measure_func.Intersect(m_measure_user).ToList().Distinct().ToList();

            if(m_measure_func.Count > 0)
            {
                int i1 = 0;
                do
                {
                    List<Element_Measurement> m_measure = m_measure_func.Where(x => x.Measurement.measurementType == m_measure_func[i1].Measurement.measurementType).ToList();

                    if(m_measure.Count > 1)
                    {
                        m_ret.Add(m_measure);
                    }

                    i1++;
                } while (i1 < m_measure_func.Count);
            }


            return (m_ret);
        }

        public List<Requirement_Plugin.Repository_Elements.MeasurementType> Get_MeasurementTypes(NodeType nodeType)
        {
            List<Requirement_Plugin.Repository_Elements.MeasurementType> m_type_func = this.m_Element_Functional.SelectMany(x => x.m_element_measurement.Select(y => y.Measurement.measurementType)).ToList();
            List<Requirement_Plugin.Repository_Elements.MeasurementType> m_type_user = this.m_Element_User.SelectMany(x => x.m_element_measurement.Select(y => y.Measurement.measurementType)).ToList();

            m_type_func.AddRange(m_type_user);
            m_type_func = m_type_func.Distinct().ToList();

            return (m_type_func);

        }
        #endregion

        #region Get
        //Voraussetzung Activity PROZESSWORT + OBJECT
        private DB_Insert Get_Activity_Object(Metamodel metamodel, Database database)
        {
            TaggedValue taggedValue = new TaggedValue(metamodel, database);

            string Name = this.Name;

            var splitName = Name.Split(' ');

            if(splitName.Length > 1)
            {
                int i1 = 1;
                string w_object = "";
                do
                {
                    if (i1 != 1)
                    {
                        w_object = w_object + " " + splitName[i1];
                    }
                    else
                    {
                        w_object = splitName[i1];
                    }


                    i1++;
                } while (i1 < splitName.Length);

                return (new DB_Insert("W_OBJEKT", OleDbType.VarChar, OdbcType.VarChar, w_object, -1));
                //taggedValue.Update_Tagged_Value(this.Classifier_ID, "W_OBJEKT", w_object,  null, repository);
            }

            return(null);

        }

        //Voraussetzung Activity PROZESSWORT + OBJECT
        private DB_Insert Get_Activity_Prozesswort( Metamodel metamodel, Database database)
        {
            TaggedValue taggedValue = new TaggedValue(metamodel, database);

            string Name = this.Name;

            var splitName = Name.Split(' ');

            if (splitName.Length > 1)
            {
                //  taggedValue.Update_Tagged_Value(this.Classifier_ID, "W_PROZESSWORT", splitName[0], null, repository);
                return (new DB_Insert("W_PROZESSWORT", OleDbType.VarChar, OdbcType.VarChar, splitName[0], -1));
            }

            return (null);
        }

        public List<Activity> Get_All_SpecifiedBy(List<Activity> m_Activity)
        {
            List<Activity> m_ret = new List<Activity>();

            List<Activity> m_help_General = m_Activity.Where(x => x.m_Specialize.Contains(this) == true).ToList();


            if (m_help_General.Count > 0)
            {
                m_ret = m_help_General;

                int i1 = 0;
                do
                {
                    List<Activity> m_help = new List<Activity>();
                    m_help = m_help_General[i1].Get_All_SpecifiedBy(m_Activity);

                    if (m_help != null)
                    {
                        m_ret.AddRange(m_help);
                    }

                    i1++;
                } while (i1 < m_help_General.Count);

                return (m_ret);

            }
            else
            {
                return (null);
            }

        }

        public List<NodeType> GetNodeTypes()
        {
            List<NodeType> m_ret = new List<NodeType>();

            if (this.m_Element_Functional.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (m_ret.Contains(this.m_Element_Functional[i1].Client) == false)
                    {
                        m_ret.Add(this.m_Element_Functional[i1].Client);
                    }

                    i1++;
                } while (i1 < this.m_Element_Functional.Count);
            }
            if (this.m_Element_User.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (m_ret.Contains(this.m_Element_User[i1].Client) == false)
                    {
                        m_ret.Add(this.m_Element_User[i1].Client);
                    }

                    i1++;
                } while (i1 < this.m_Element_User.Count);
            }


            return (m_ret);
        }

        public void Get_Measurements_Activity(Database database)
        {
            List<Requirement_Plugin.Repository_Elements.Measurement> m_measurement_class = this.Get_Measurement(this.Classifier_ID, database);
            //Prüfen vorhanden
            if (m_measurement_class != null)
            {
                int i2 = 0;
                do
                {
                    List<Element_Measurement> m_test = this.m_Element_Measurement_Activity.Where(x => x.Measurement.Classifier_ID == m_measurement_class[i2].Classifier_ID).ToList();

                    if (m_test.Count == 0) //Neu anlegen
                    {
                        Element_Measurement elem_mes = new Element_Measurement(m_measurement_class[i2], database);
                        elem_mes.m_guid_Instanzen.Add(this.Classifier_ID);
                        this.m_Element_Measurement_Activity.Add(elem_mes);
                    }
                    else //erweitern
                    {
                        if (m_test[0].m_guid_Instanzen.Contains(this.Classifier_ID) == false)
                        {
                            m_test[0].m_guid_Instanzen.Add(this.Classifier_ID);
                        }
                    }



                    i2++;
                } while (i2 < m_measurement_class.Count);
            }

            // List<Element_Measurement> m_eleme_measure = this.m_NodeType[i1].m_element_measure.Where(x => m_measurement_class.Contains(x.Measurement) == true).ToList();


        }
        public void Get_Measurements_Instanzen(Database database)
        {
            if (this.m_GUID.Count > 0)
            {
                int i2 = 0;
                do
                {
                    List<Requirement_Plugin.Repository_Elements.Measurement> m_measurement_class = this.Get_Measurement(this.m_GUID[i2], database);

                    //Prüfen vorhanden
                    if (m_measurement_class != null)
                    {
                        int i3 = 0;
                        do
                        {
                            List<Element_Measurement> m_test = this.m_Element_Measurement_Activity.Where(x => x.Measurement.Classifier_ID == m_measurement_class[i3].Classifier_ID).ToList();

                            if (m_test.Count == 0) //Neu anlegen
                            {
                                Element_Measurement elem_mes = new Element_Measurement(m_measurement_class[i3], database);
                                elem_mes.m_guid_Instanzen.Add(this.Classifier_ID);
                                this.m_Element_Measurement_Activity.Add(elem_mes);
                            }
                            else //erweitern
                            {
                                if (m_test[0].m_guid_Instanzen.Contains(this.Classifier_ID) == false)
                                {
                                    m_test[0].m_guid_Instanzen.Add(this.Classifier_ID);
                                }
                            }

                            i3++;
                        } while (i3 < m_measurement_class.Count);
                    }

                    i2++;
                } while (i2 < this.m_GUID.Count);
            }



            // List<Element_Measurement> m_eleme_measure = this.m_NodeType[i1].m_element_measure.Where(x => m_measurement_class.Contains(x.Measurement) == true).ToList();


        }

        public List<string> Get_Instanzen_Repository(Database database)
        {
            List<string> m_ret = new List<string>();

            Interface_Element interface_Element = new Interface_Element();
            m_ret = interface_Element.Get_Instanzen_Activity(database, this.Classifier_ID);

            return (m_ret);

        }
        #endregion

        #region Transform
        public void Transform_Element_Functional_To_Element_User(EA.Repository repository, Database database, NodeType recent)
        {
           // MessageBox.Show("EleemntFunktional vorher:" +this.m_Element_Functional.Count.ToString());
           // MessageBox.Show("Element User vorher: "+this.m_Element_User.Count.ToString());
            if (this.m_Element_Functional.Count > 0)
            {
                int length = this.m_Element_Functional.Count;
                int i1 = 0;
                //Anlegen
                do
                {
                    var elemente = repository.GetElementByGuid(m_Element_Functional[i1].Client.Classifier_ID).Name;
                    var elementecl = repository.GetElementByGuid(recent.Classifier_ID).Name;


                    if (this.m_Element_Functional[i1].Client != recent && this.m_Element_Functional[i1].Client.m_Stakeholder.Count == 0)
                    {
                        Element_User element_User = new Element_User();

                        element_User.Client = this.m_Element_Functional[i1].Client;
                        element_User.Supplier = this.m_Element_Functional[i1].Supplier;
                        element_User.m_Client_ST = recent.m_Stakeholder;

                        this.m_Element_Functional[i1].Client.m_Element_User.Add(element_User);
                        this.m_Element_User.Add(element_User);
                        //Targets transformieren
                        if (this.m_Element_Functional[i1].m_Target_Functional.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                                this.m_Element_Functional[i1].m_Target_Functional[i2].Transform_Target_Functional_To_Target_Stakeholder(database, element_User);

                                i2++;
                            } while (i2 < this.m_Element_Functional[i1].m_Target_Functional.Count);

                           // MessageBox.Show("Target nachher: "+element_User.m_Target_User.Count.ToString());
                        }

                        element_User.Check_For_Requirement_User(repository, database);



                        

                    }
                    else
                    {
                        if(this.m_Element_Functional[i1].Client == recent)
                        {
                            this.m_Element_Functional.RemoveAt(i1);
                            length--;
                            i1--;
                        }
                       
                    }

                    i1++;
                } while (i1 < length);
            }

           /* if(this.m_Element_User.Count > 0)
            {
                int i2 = 0;
                do
                {


                    i2++;
                } while (i2 < this.m_Element_User.Count);
            }*/

           // MessageBox.Show(this.m_Element_Functional.Count.ToString());
           // MessageBox.Show(this.m_Element_User.Count.ToString());
           

        }

        #endregion

        #region Processvorgabe
        public void Get_Element_Process(Database Data, EA.Repository repository)
        {
            List<string> m_Type_elem = Data.metamodel.m_Process_Constraint.Select(x => x.Type).ToList();
            List<string> m_Stereotype_elem = Data.metamodel.m_Process_Constraint.Select(x => x.Stereotype).ToList();
            List<string> m_Type_con = Data.metamodel.m_Satisfy_Process.Select(x => x.Type).ToList();
            List<string> m_Stereotype_con = Data.metamodel.m_Satisfy_Process.Select(x => x.Stereotype).ToList();

            List<string> m_Type_act_def = Data.metamodel.m_Aktivity_Definition.Select(x => x.Type).ToList();
            List<string> m_Stereotype_act_def = Data.metamodel.m_Aktivity_Definition.Select(x => x.Stereotype).ToList();
            List<string> m_Type_act_usage = Data.metamodel.m_Aktivity_Usage.Select(x => x.Type).ToList();
            List<string> m_Stereotype_act_usage = Data.metamodel.m_Aktivity_Usage.Select(x => x.Stereotype).ToList();

            Interface_Constraint interface_Constraint = new Interface_Constraint();

            List<string> m_GUID = new List<string>();

            OperationalConstraint recent_opcon;
            //Alle NodeType der Activity erhalten
         //   List<NodeType> m_Client = this.GetNodeTypes();

           
                /////////////////////
                ///Activity
                //Direkte auf Aktivität bezogen
                List<string> m_GUID_help = interface_Constraint.Get_Constraint(W_Constraint_Type.Process, Data, this.ID, this.Classifier_ID, m_Type_elem, m_Stereotype_elem, m_Type_con, m_Stereotype_con, m_Stereotype_act_def, m_Stereotype_act_usage);
                if (m_GUID_help.Count > 0)
                {

                    //Schleife über alle Constraint
                    int i1 = 0;
                    do
                    {
                        //Constraint anlegen
                        int ind_con = Data.m_ProcessConstraint.FindIndex(x => x.Classifier_ID == m_GUID_help[i1]);
                        if (ind_con == -1)
                        {
                            recent_opcon = new OperationalConstraint(m_GUID_help[i1], Data, repository);
                            Data.m_ProcessConstraint.Add(recent_opcon);
                        }
                        else
                        {
                            recent_opcon = Data.m_ProcessConstraint[ind_con];
                        }
                        //Element_Process anlegen

                        #region Element Process zu Element Functione & Element User zuordnen
                        //Element_Process element_Process = new Element_Process(this, recent_opcon, true);

                        if(this.m_Element_Functional.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                                if(this.m_Element_Functional[i2].m_element_Processes.Where(x => x.flag_Activity == true && x.activity == this && x.OpConstraint == recent_opcon).ToList().Count == 0)
                                {
                                    
                                    Element_Process element_Process = new Element_Process(this, recent_opcon, true);
                                    element_Process.m_Node_ID = this.m_Element_Functional[i2].Get_Client_GUID_Target();
                                    if(element_Process.m_Node_ID.Count > 0)
                                {
                                    element_Process.m_Action_ID.Add(this.Classifier_ID);
                                    this.m_Element_Functional[i2].m_element_Processes.Add(element_Process);
                                    //Check_Requirement
                                    element_Process.Check_Requirement_Process(Data, repository);
                                }
                                   
                                }

                                i2++;
                            } while (i2 < this.m_Element_Functional.Count);
                        }

                        if (this.m_Element_User.Count > 0)
                        {
                            int i2 = 0;
                            do
                            {
                                if (this.m_Element_User[i2].m_element_Processes.Where(x => x.flag_Activity == true && x.activity == this && x.OpConstraint == recent_opcon).ToList().Count == 0)
                                {
                                    Element_Process element_Process = new Element_Process(this, recent_opcon, true);
                                    element_Process.m_Node_ID = this.m_Element_User[i2].Get_Client_GUID_Target_User();
                                if (element_Process.m_Node_ID.Count > 0)
                                {
                                    element_Process.m_Action_ID.Add(this.Classifier_ID);
                                    this.m_Element_User[i2].m_element_Processes.Add(element_Process);

                                    //Check_Requirement
                                    element_Process.Check_Requirement_Process(Data, repository);
                                
                                }

                                   
                            }

                                i2++;
                            } while (i2 < this.m_Element_User.Count);
                        }
                        #endregion

                        i1++;
                    } while (i1 < (m_GUID_help.Count));


                    //Alle Fälle werden allen Element_Functional und Element_User zugeordnet
                    //  Element_Process element_Process_Activity = new Element_Process(this, this.Classifier_ID, m_GUID_help);
                }
                
                /////////////////////
                //Action
                //Constraint, welche auf die Action der Activity bezogen sind
            if(this.m_GUID.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (this.m_GUID[i1] != this.Classifier_ID)
                    {
                        Repository_Element rep_elem_recent = new Repository_Element();
                        rep_elem_recent.Classifier_ID = this.m_GUID[i1];
                        rep_elem_recent.ID = rep_elem_recent.Get_Object_ID(Data);
                        List<string> m_GUID_Action = interface_Constraint.Get_Constraint(W_Constraint_Type.Process, Data, rep_elem_recent.ID, this.m_GUID[i1], m_Type_elem, m_Stereotype_elem, m_Type_con, m_Stereotype_con, m_Stereotype_act_def, m_Stereotype_act_usage);

                        if(m_GUID_Action.Count > 0)
                        {
                            //Schleife über die Constraint
                            int i2 = 0;
                            do
                            {
                                //Constraint anlegen
                                int ind_con = Data.m_ProcessConstraint.FindIndex(x => x.Classifier_ID == m_GUID_Action[i2]);
                                if (ind_con == -1)
                                {
                                    recent_opcon = new OperationalConstraint(m_GUID_Action[i2], Data, repository);
                                    Data.m_ProcessConstraint.Add(recent_opcon);
                                }
                                else
                                {
                                    recent_opcon = Data.m_ProcessConstraint[ind_con];
                                }

                                #region Element Process zu Element Functional zuordnen
                                //Element_Process element_Process = new Element_Process(this, recent_opcon, true);

                                if (this.m_Element_Functional.Count > 0)
                                {
                                    int i3 = 0;
                                    do
                                    {
                                        List<Element_Process> check = this.m_Element_Functional[i3].m_element_Processes.Where(x => x.flag_Activity == false && x.activity == this && x.OpConstraint == recent_opcon).ToList();

                                        if (check.Count == 0)
                                        {
                                            Element_Process element_Process = new Element_Process(this, recent_opcon, false);

                                            //NodeID zur Action finden
                                            //Targets des Element functional überprüfen und alle Cllient ID's nehmen
                                            List<string> m_Node_ID = this.m_Element_Functional[i3].Get_Client_GUID_Target_By_SupplierID(this.m_GUID[i1]);
                                            if(m_Node_ID.Count > 0)
                                            {
                                                element_Process.m_Node_ID = m_Node_ID;
                                                //Action ID hinzufügen
                                                element_Process.m_Action_ID.Add(this.m_GUID[i1]);

                                                this.m_Element_Functional[i3].m_element_Processes.Add(element_Process);
                                                //Check_Requirement
                                                element_Process.Check_Requirement_Process(Data, repository);
                                            }
                                           
                                        }
                                        else
                                        {
                                            //Jedes Element_Process betrachten
                                            int i4 = 0;
                                            do
                                            {
                                               
                                                //Nodes hinzufügen
                                                List<string> m_Node_ID = this.m_Element_Functional[i3].Get_Client_GUID_Target_By_SupplierID(this.m_GUID[i1]);
                                                if(m_Node_ID.Count > 0)
                                                {
                                                    //Action hinzufügen
                                                    if (check[i4].m_Action_ID.Contains(this.m_GUID[i1]) == false)
                                                    {
                                                        check[i4].m_Action_ID.Add(this.m_GUID[i1]);
                                                    }

                                                    int i5 = 0;
                                                    do
                                                    {
                                                        if (check[i4].m_Node_ID.Contains(m_Node_ID[i5]) == false)
                                                        {
                                                            check[i4].m_Node_ID.Add(m_Node_ID[i5]);
                                                        }

                                                        i5++;
                                                    } while (i5 < m_Node_ID.Count);
                                                }



                                                i4++;
                                            } while (i4 < check.Count);
                                        }

                                            i3++;
                                    } while (i3 < this.m_Element_Functional.Count);
                                }
                                #endregion
                                #region Element User zuordnen
                                if (this.m_Element_User.Count > 0)
                                {
                                    int i3 = 0;
                                    do
                                    {
                                        List<Element_Process> check = this.m_Element_User[i3].m_element_Processes.Where(x => x.flag_Activity == false && x.activity == this && x.OpConstraint == recent_opcon).ToList();

                                        if (check.Count == 0)
                                        {
                                            Element_Process element_Process = new Element_Process(this, recent_opcon, false);

                                            //NodeID zur Action finden
                                            //Targets des Element functional überprüfen und alle Cllient ID's nehmen
                                            List<string> m_Node_ID = this.m_Element_User[i3].Get_Client_GUID_Target_By_SupplierID(this.m_GUID[i1]);
                                            if(m_Node_ID.Count > 0)
                                            {
                                                element_Process.m_Node_ID = m_Node_ID;
                                                //Action ID hinzufügen
                                                element_Process.m_Action_ID.Add(this.m_GUID[i1]);

                                                this.m_Element_User[i3].m_element_Processes.Add(element_Process);
                                                //Check_Requirement
                                                element_Process.Check_Requirement_Process(Data, repository);
                                            }
                                          
                                        }
                                        else
                                        {
                                            //Jedes Element_Process betrachten
                                            int i4 = 0;
                                            do
                                            {
                                             
                                                //Nodes hinzufügen
                                                List<string> m_Node_ID = this.m_Element_User[i3].Get_Client_GUID_Target_By_SupplierID(this.m_GUID[i1]);
                                                if (m_Node_ID.Count > 0)
                                                {
                                                    //Action hinzufügen
                                                    if (check[i4].m_Action_ID.Contains(this.m_GUID[i1]) == false)
                                                    {
                                                        check[i4].m_Action_ID.Add(this.m_GUID[i1]);
                                                    }

                                                    int i5 = 0;
                                                    do
                                                    {
                                                        if (check[i4].m_Node_ID.Contains(m_Node_ID[i5]) == false)
                                                        {
                                                            check[i4].m_Node_ID.Add(m_Node_ID[i5]);
                                                        }

                                                        i5++;
                                                    } while (i5 < m_Node_ID.Count);
                                                }

                                                check[i4].Check_Requirement_Process(Data, repository);

                                                i4++;
                                            } while (i4 < check.Count);
                                        }

                                        i3++;
                                    } while (i3 < this.m_Element_User.Count);
                                }
                                #endregion


                                i2++;
                            } while (i2 < m_GUID_Action.Count);
                        }


                    }

                    i1++;
                } while (i1 < this.m_GUID.Count);

                //int zzz = this.m_Child.Count;
            }
                /* 
                 if(m_GUID_help.Count > 0)
                 {
                     m_GUID = m_GUID_help;
                     int i1 = 0;
                     do
                     {
                         bool flag_check = true;
                         //OperationConstraint anlegen
                         OperationalConstraint opcon = new OperationalConstraint(m_GUID[i1], Data, repository);
                         opcon.m_Activity.Add(this);
                         //Prüfen ob ein Element Design schon vorliegt mit dem OpConstraint
                         if (this.m_Process.Count > 0)
                         {
                             if (this.m_Process.Where(x => x.OpConstraint == opcon && x.Instanz_Process_ID == this.Classifier_ID).ToList().Count == 0)
                             {
                                 flag_check = false;
                             }
                         }
                         else
                         {
                             flag_check = false;
                         }
                         //Anlegen neues Element Design mit dem OpConstraint
                         if (flag_check == false)
                         {
                             Element_Process element_Design = new Element_Process(this, this.Classifier_ID, opcon);
                             element_Design.m_GUID_Client = this.m_GUID;

                             element_Design.Check_Requirement_Process(Data, repository);
                         }

                         i1++;
                     } while (i1 < m_GUID.Count);
                 }
                 if(true)
                 {
                     //Action
                     //Geneutzte Instanzens
                    // List<string> m_GUID_Instanzen = this.m_Element_Functional.Select

                     if (this.m_GUID.Count > 0) //Activity hat Instanzen
                     {
                         int a1 = 0; //Schleife über aktuelle Action
                         do
                         {
                             Repository_Element rep_elem_recent = new Repository_Element();
                             rep_elem_recent.Classifier_ID = this.m_GUID[a1];
                             rep_elem_recent.ID = rep_elem_recent.Get_Object_ID(Data);
                             //Conszraint der aktuellen Action
                             List<string> m_GUID_action = interface_Constraint.Get_Constraint(W_Constraint_Type.Process, Data, rep_elem_recent.ID, this.m_GUID[a1], m_Type_elem, m_Stereotype_elem, m_Type_con, m_Stereotype_con, m_Stereotype_act_def, m_Stereotype_act_usage);

                             //aktion hat Constraint verknüpft
                             if(m_GUID_action.Count > 0)
                             {
                                 int i2 = 0;
                                 do
                                 {
                                     bool flag_check = true;
                                     //OperationConstraint anlegen
                                     OperationalConstraint opcon = new OperationalConstraint(m_GUID_action[i2], Data, repository);
                                     opcon.m_Activity.Add(this);


                                     if (this.m_Process.Count > 0)
                                     {
                                         List<Element_Process> m_help_Constraints = this.m_Process.Where(x => x.OpConstraint == opcon && x.Instanz_Process_ID == this.m_GUID[a1] ).ToList();

                                         if (m_help_Constraints.Count > 0)
                                         {

                                             List<Element_Process> m_help_Actions = m_help_Constraints.Where(x => x.m_GUID_Client.FindIndex(y => y == this.m_GUID[a1]) != -1).ToList();

                                             if (m_help_Actions.Count == 0)
                                             {
                                                 //Hinzufügen
                                                 int a2 = 0;
                                                 do
                                                 {
                                                     m_help_Actions[a2].m_GUID_Client.Add(this.m_GUID[a1]);

                                                     a2++;
                                                 } while (a2 < m_help_Actions.Count);

                                             }


                                         }
                                         else
                                         {
                                             flag_check = false;
                                         }
                                     }
                                     else //Nein --> anlegen
                                     {
                                         flag_check = false;
                                     }

                                     //Anlegen neues Element Design mit dem OpConstraint
                                     if (flag_check == false)
                                     {
                                         Element_Process element_Design = new Element_Process(this, m_GUID[a1], opcon);
                                         element_Design.m_GUID_Client.Add(this.m_GUID[a1]);

                                         element_Design.Check_Requirement_Process(Data, repository);
                                     }

                                     i2++;
                                 } while (i2 < m_GUID_action.Count);
                             }

                             a1++;
                         } while (a1 < this.m_GUID.Count);

                     }
                 }


             */
            }

        public List<Requirements.Requirement_Non_Functional> Element_Process_Get_Requirement(NodeType node, OperationalConstraint operationalConstraint)
        {
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>(); 

            List<Element_Process> m_process = this.Get_Element_Process_By_Node_And_Constraint(node, operationalConstraint);

            if (m_process.Count > 0)
            {
                int i1 = 0;
                do
                {
                   if(m_process[i1].Requirement_Process != null)
                   {
                        if(m_ret.Contains(m_process[i1].Requirement_Process) == false)
                        {
                            m_ret.Add(m_process[i1].Requirement_Process);
                        }
                   }

                    i1++;
                } while (i1 < m_process.Count);

            }


            return (m_ret);
        }

        public List<Requirements.Requirement_Non_Functional> Element_Process_Get_NodeType_Requirement(NodeType node)
        {
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>();

            //Alle Element Process erhalten, bei denen der NodeType in m_NodeID
            if(this.m_Process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if(this.m_Process[i1].Check_For_NodeType(node))
                    {
                        if(m_ret.Contains(this.m_Process[i1].Requirement_Process) == false && this.m_Process[i1].Requirement_Process != null)
                        {
                           
                            m_ret.Add(this.m_Process[i1].Requirement_Process);
                        }
                    }

                    i1++;
                } while (i1 < this.m_Process.Count);
            }

            return (m_ret);
        }
        public List<Requirements.Requirement_Non_Functional> Element_Process_Get_SysEleme_Requirement(SysElement Sys)
        {
            NodeType node;
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>();

            if(Sys.m_Implements.Count > 0)
            {
                int i1 = 0;
                do
                {
                    node = Sys.m_Implements[i1];

                    if(this.m_Process.Count > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            if (this.m_Process[i2].Check_For_NodeType(node))
                            {
                                if (m_ret.Contains(this.m_Process[i2].Requirement_Process) == false)
                                {
                                    m_ret.Add(this.m_Process[i2].Requirement_Process);
                                }
                            }

                            i2++;
                        } while (i2 < this.m_Process.Count);
                    }



                    i1++;
                } while (i1 < Sys.m_Implements.Count);
            }

            return (m_ret);
        }
        public List<Requirements.Requirement_Non_Functional> Element_Process_Get_All_Requirement()
        {
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>();

            if (this.m_Process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (this.m_Process[i1].Requirement_Process != null)
                    {
                        if (m_ret.Contains(this.m_Process[i1].Requirement_Process) == false)
                        {
                            m_ret.Add(this.m_Process[i1].Requirement_Process);
                        }
                    }

                    i1++;
                } while (i1 < this.m_Process.Count);

            }


            return (m_ret);
        }
        public List<Requirements.Requirement_Non_Functional> Element_Process_Get_Requirement_SysElem(SysElement sys, OperationalConstraint operationalConstraint)
        {
            //NodeType node;
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>();

            if (sys.m_Element_Functional.Count > 0 || sys.m_Element_User.Count > 0)
            {
               // int i2 = 0;
               // do
               // {
               //     node = Sys.m_Implements[i2];

                    List<Element_Process> m_process = this.Get_Element_Process_By_Node_And_Constraint_SysElem(sys, operationalConstraint);

                    if (m_process.Count > 0)
                    {
                        int i1 = 0;
                        do
                        {
                            if (m_process[i1].Requirement_Process != null)
                            {
                                if (m_ret.Contains(m_process[i1].Requirement_Process) == false)
                                {
                                    m_ret.Add(m_process[i1].Requirement_Process);
                                }
                            }

                            i1++;
                        } while (i1 < m_process.Count);

                    }

               //     i2++;
               // } while (i2 < Sys.m_Implements.Count);
            }

            return (m_ret);
        }
        public List<string> Element_Process_Get_ActionID_SysElem(SysElement sys, OperationalConstraint operationalConstraint)
        {
            //NodeType node;
            List<string> m_ret = new List<string>();

            if (sys.m_Element_Functional.Count > 0 || sys.m_Element_User.Count > 0)
            {
                // int i2 = 0;
                // do
                // {
                //     node = Sys.m_Implements[i2];

                List<Element_Process> m_process = this.Get_Element_Process_By_Node_And_Constraint_SysElem(sys, operationalConstraint);

                if (m_process.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        if (m_process[i1].m_Action_ID.Count > 0)
                        {
                            m_ret.AddRange(m_process[i1].m_Action_ID);
                        }

                        i1++;
                    } while (i1 < m_process.Count);


                    m_ret.Distinct();
                }

                //     i2++;
                // } while (i2 < Sys.m_Implements.Count);
            }

            return (m_ret);
        }
        public void Element_Process_Set_Requirement(NodeType node, OperationalConstraint operationalConstraint, Requirements.Requirement_Non_Functional requirement)
        {
            List<Element_Process> m_process = this.Get_Element_Process_By_Node_And_Constraint(node, operationalConstraint);

            if(m_process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    m_process[i1].Requirement_Process = requirement;

                    i1++;
                } while (i1 < m_process.Count);

            }
        }

        public void Element_Process_Set_Requirement_SysElem(SysElement Sys, OperationalConstraint operationalConstraint, Requirements.Requirement_Non_Functional requirement)
        {
            List<Element_Process> m_process = this.Get_Element_Process_By_Node_And_Constraint_SysElem(Sys, operationalConstraint);

            if (m_process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    m_process[i1].Requirement_Process = requirement;

                    i1++;
                } while (i1 < m_process.Count);

            }
        }
        private List<Element_Process> Get_Element_Process_By_Node_And_Constraint(NodeType node, OperationalConstraint operationalConstraint)
        {
            List<Element_Process> m_ret = new List<Element_Process>();
            List<Element_Process> m_ret2 = new List<Element_Process>();

            List<Element_Functional> m_func = this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if (m_func.Count > 0)
            {
                List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                m_ret = help.Where(x => x.OpConstraint == operationalConstraint).ToList();
               
            }
            List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                m_ret2 = help.Where(x => x.OpConstraint == operationalConstraint).ToList();
              //  m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }
        private List<Element_Process> Get_Element_Process_By_Node_And_Constraint_SysElem(SysElement Sys, OperationalConstraint operationalConstraint)
        {
            List<Element_Process> m_ret = new List<Element_Process>();
            List<Element_Process> m_ret1 = new List<Element_Process>();
            List<Element_Process> m_ret2 = new List<Element_Process>();

            NodeType node;

            if(Sys.m_Implements.Count > 0)
            {
                int i1 = 0;
                do
                {

                    node = Sys.m_Implements[i1];

                    List<Element_Functional> m_func = this.m_Element_Functional.Where(x => x.Client == node).ToList();
                    if (m_func.Count > 0)
                    {
                        List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                        m_ret1 = help.Where(x => x.OpConstraint == operationalConstraint).ToList();
                        m_ret.AddRange(m_ret1);
                    }
                    List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
                    if (m_user.Count > 0)
                    {
                        List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                        m_ret2 = help.Where(x => x.OpConstraint == operationalConstraint).ToList();
                        //  m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                        m_ret.AddRange(m_ret2);
                    }


                    i1++;
                } while (i1 < Sys.m_Implements.Count);
            }

          
            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }
        public List<OperationalConstraint> Get_Process_Constraint(NodeType node)
        {
            List<OperationalConstraint> m_ret = new List<OperationalConstraint>();
            List<OperationalConstraint> m_ret2 = new List<OperationalConstraint>();

            List<Element_Functional> m_func =  this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if(m_func.Count > 0)
            {
               List<Element_Process> help =  m_func.SelectMany(x => x.m_element_Processes).ToList();
               m_ret = help.Select(x => x.OpConstraint).ToList();
            }
            List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                m_ret2 = help.Select(x => x.OpConstraint).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }

        public List<OperationalConstraint> Get_Process_Constraint_SysElem(SysElement sys)
        {
            //NodeType node;
            List<OperationalConstraint> m_ret = new List<OperationalConstraint>();
            List<OperationalConstraint> m_ret1 = new List<OperationalConstraint>();
            List<OperationalConstraint> m_ret2 = new List<OperationalConstraint>();

            if(sys.m_Element_Functional.Count > 0 ||sys.m_Element_User.Count > 0)
            {
               // int i1 = 0;
               // do
               // {
                    // node = sys.m_Implements[i1];

                    List<Element_Functional> m_func = sys.m_Element_Functional.Where(x => x.Supplier == this).ToList();//this.m_Element_Functional.Where(x => x.Client == sys).ToList();
                    if (m_func.Count > 0)
                    {
                        List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                        m_ret1 = help.Select(x => x.OpConstraint).ToList();
                    }
                    List<Element_User> m_user = sys.m_Element_User.Where(x => x.Supplier == this).ToList();
                    if (m_user.Count > 0)
                    {
                        List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                        m_ret2 = help.Select(x => x.OpConstraint).ToList();

                        m_ret1.AddRange(m_ret2);
                    }

                    m_ret.AddRange(m_ret1);

                //    i1++;
                //} while (i1 < sys.m_Implements.Count);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }

        public List<Requirement_Plugin.Repository_Elements.Measurement> Get_MeasurementActivity()
        {
            List<Requirement_Plugin.Repository_Elements.Measurement> m_ret = new List<Requirement_Plugin.Repository_Elements.Measurement>();

            m_ret = this.m_Element_Measurement_Activity.Select(x => x.Measurement).ToList();

            return (m_ret);
        }

        public List<string> Get_NodeID_ProcessConstraint(NodeType node, OperationalConstraint opcon)
        {
            List<string> m_ret = new List<string>();
            List<string> m_ret2 = new List<string>();

            List<Element_Functional> m_func = this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if (m_func.Count > 0)
            {
                List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                help = help.Where(x => x.OpConstraint == opcon).ToList();
                m_ret = help.SelectMany(x => x.m_Node_ID).ToList();
            }
            List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                help = help.Where(x => x.OpConstraint == opcon).ToList();
                m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }

        public List<string> Get_NodeID_ProcessConstraint_SysElem(SysElement sys, OperationalConstraint opcon)
        {
            NodeType node;
            List<string> m_ret = new List<string>();
            List<string> m_ret1 = new List<string>();
            List<string> m_ret2 = new List<string>();

            if (sys.m_Element_Functional.Count > 0 || sys.m_Element_User.Count> 0)
            {
              //  int i1 = 0;
              //  do
              //  {
              //      node = sys.m_Implements[i1];

                    List<Element_Functional> m_func = sys.m_Element_Functional.Where(x => x.Supplier == this).ToList();
                    if (m_func.Count > 0)
                    {
                        List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                        help = help.Where(x => x.OpConstraint == opcon).ToList();
                        m_ret1 = help.SelectMany(x => x.m_Node_ID).ToList();
                    }
                    List<Element_User> m_user = sys.m_Element_User.Where(x => x.Supplier == this).ToList();
                    if (m_user.Count > 0)
                    {
                        List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                        help = help.Where(x => x.OpConstraint == opcon).ToList();
                        m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                        m_ret1.AddRange(m_ret2);
                    }

                    m_ret.AddRange(m_ret1);

             //       i1++;
             //   } while (i1 < sys.m_Implements.Count);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }

        public List<string> Get_ActionID_ProcessConstraint(NodeType node, OperationalConstraint opcon)
        {
            List<string> m_ret = new List<string>();
            List<string> m_ret2 = new List<string>();

            List<Element_Functional> m_func = this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if (m_func.Count > 0)
            {
                List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                help = help.Where(x => x.OpConstraint == opcon).ToList();
                m_ret = help.SelectMany(x => x.m_Action_ID).ToList();
            }
            List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                help = help.Where(x => x.OpConstraint == opcon).ToList();
                m_ret2 = help.SelectMany(x => x.m_Action_ID).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }

        public List<string> Get_ActionID_ProcessConstraint_SysElem(SysElement sys, OperationalConstraint opcon)
        {
           // NodeType node;
            List<string> m_ret = new List<string>();
            List<string> m_ret1 = new List<string>();
            List<string> m_ret2 = new List<string>();

            if (sys.m_Element_Functional.Count > 0 || sys.m_Element_User.Count > 0)
            {
               // int i1 = 0;
               // do
               // {
                  //  node = sys.m_Implements[i1];

                    List<Element_Functional> m_func = sys.m_Element_Functional.Where(x => x.Supplier == this).ToList();
                    if (m_func.Count > 0)
                    {
                        List<Element_Process> help = m_func.SelectMany(x => x.m_element_Processes).ToList();
                        help = help.Where(x => x.OpConstraint == opcon).ToList();
                        m_ret1 = help.SelectMany(x => x.m_Action_ID).ToList();
                    }
                    List<Element_User> m_user = sys.m_Element_User.Where(x => x.Supplier == this).ToList();
                    if (m_user.Count > 0)
                    {
                        List<Element_Process> help = m_user.SelectMany(x => x.m_element_Processes).ToList();
                        help = help.Where(x => x.OpConstraint == opcon).ToList();
                        m_ret2 = help.SelectMany(x => x.m_Action_ID).ToList();

                        m_ret1.AddRange(m_ret2);
                    }

                    m_ret.AddRange(m_ret1);

               //    i1++;
               // } while (i1 < sys.m_Implements.Count);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }
        #endregion Processvorgabe

        #region Qualitäe_Activity
        public List<Requirements.Requirement_Non_Functional> Element_Measurenent_Get_Requirement(NodeType node, Requirement_Plugin.Repository_Elements.Measurement operationalConstraint, Database database)
        {
            List<Requirements.Requirement_Non_Functional> m_ret = new List<Requirements.Requirement_Non_Functional>();

            List<Element_Measurement> m_process = new List<Element_Measurement>();
            if (database.metamodel.flag_sysarch == false)
            {
                m_process = this.Get_Element_Measurenent_By_Node_And_Measurement(node, operationalConstraint);
            }
            else
            {
                m_process = this.Get_Element_Measurenent_By_Node_And_Measurement_SysElem((SysElement)node, operationalConstraint);
            }

           

            if (m_process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    if (m_process[i1].m_requirement.Count > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            if (m_ret.Contains(m_process[i1].m_requirement[i2]) == false)
                            {
                                m_ret.Add(m_process[i1].m_requirement[i2]);
                            }

                            i2++;
                        } while (i2 < m_process[i1].m_requirement.Count);

                        
                    }

                    i1++;
                } while (i1 < m_process.Count);

            }


            return (m_ret);
        }

        private List<Element_Measurement> Get_Element_Measurenent_By_Node_And_Measurement(NodeType node, Requirement_Plugin.Repository_Elements.Measurement operationalConstraint)
        {
            List<Element_Measurement> m_ret = new List<Element_Measurement>();
            List<Element_Measurement> m_ret2 = new List<Element_Measurement>();

            List<Element_Functional> m_func = this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if (m_func.Count > 0)
            {
                List<Element_Measurement> help = m_func.SelectMany(x => x.m_element_measurement).ToList();
                m_ret = help.Where(x => x.Measurement == operationalConstraint).ToList();

            }
            List<Element_User> m_user = this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Measurement> help = m_user.SelectMany(x => x.m_element_measurement).ToList();
                m_ret2 = help.Where(x => x.Measurement == operationalConstraint).ToList();
                //  m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }
        private List<Element_Measurement> Get_Element_Measurenent_By_Node_And_Measurement_SysElem(SysElement node, Requirement_Plugin.Repository_Elements.Measurement operationalConstraint)
        {
            List<Element_Measurement> m_ret = new List<Element_Measurement>();
            List<Element_Measurement> m_ret2 = new List<Element_Measurement>();

            List<Element_Functional> m_func = node.m_Element_Functional.Where(x => x.Supplier == this).ToList();
              //  this.m_Element_Functional.Where(x => x.Client == node).ToList();
            if (m_func.Count > 0)
            {
                List<Element_Measurement> help = m_func.SelectMany(x => x.m_element_measurement).ToList();
                m_ret = help.Where(x => x.Measurement == operationalConstraint).ToList();

            }
            List<Element_User> m_user = node.m_Element_User.Where(x => x.Supplier == this).ToList();
            //this.m_Element_User.Where(x => x.Client == node).ToList();
            if (m_user.Count > 0)
            {
                List<Element_Measurement> help = m_user.SelectMany(x => x.m_element_measurement).ToList();
                m_ret2 = help.Where(x => x.Measurement == operationalConstraint).ToList();
                //  m_ret2 = help.SelectMany(x => x.m_Node_ID).ToList();

                m_ret.AddRange(m_ret2);
            }

            m_ret = m_ret.Distinct().ToList();

            return (m_ret);
        }
        #endregion

        #region Create
        public void Create_Requirement_Process(Requirement_Plugin.Database database, EA.Repository repository, string Package_GUID, List<NodeType> m_create)
        {
            //Alle ElementProcess erhalten
            if(this.m_Process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    this.m_Process[i1].Create_Requirement_Process(repository, database, Package_GUID, this, m_create);

                    i1++;
                } while (i1 < this.m_Process.Count);
            }
            
        }

        #endregion

        #region Update

        public void Update_Connectoren_Requirement_Process(Requirement_Plugin.Database database, EA.Repository repository)
        {
            //Alle ElementProcess erhalten
            if (this.m_Process.Count > 0)
            {
                int i1 = 0;
                do
                {
                    this.m_Process[i1].Update_Connectoren_Requirement_Process(repository, database, this);

                    i1++;
                } while (i1 < this.m_Process.Count);
            }
        }

        #endregion

        #region Generalisierung

        public void Copy_Generalize(EA.Repository repository, Database database)
        {
            if(this.m_Specialize.Count > 0)
            {
                int i1 = 0;
                do
                {
                    //ElementFunctional übergeben
                    this.Copy_Functional(repository, database, this.m_Specialize[i1]);
                    //ElementUser übergeben
                    this.Copy_User(repository, database, this.m_Specialize[i1]);
                    //ElementProcess übergeben
                 //   this.Copy_Process(repository, database, this.m_Specialize[i1]);

                    i1++;
                } while (i1 < this.m_Specialize.Count);
            }
        }

        private void Copy_Functional(EA.Repository repository, Database database, Activity activity)
        {
            if(this.m_Specialize.Count > 0)
            {
                if (this.m_Element_Functional.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        List<Element_Functional> m_func = activity.Check_ElementFunctional(this.m_Element_Functional[i1].Client.Classifier_ID);

                        
                        if (m_func == null) //anlegen
                        {
                            Element_Functional element_Functional = new Element_Functional();
                            element_Functional.Client = this.m_Element_Functional[i1].Client;
                            element_Functional.Supplier = activity;
                            activity.m_Element_Functional.Add(element_Functional);
                            this.m_Element_Functional[i1].Client.m_Element_Functional.Add(element_Functional);

                            List<string> m_guid_client = this.m_Element_Functional[i1].Get_Client_GUID_Target();

                            if(m_guid_client.Count > 0)
                            {
                                int i2 = 0;
                                do
                                {
                                    Target_Functional target_new = new Target_Functional();
                                    target_new.CLient_ID = m_guid_client[i2];
                                    target_new.Supplier_ID = activity.Classifier_ID;
                                    element_Functional.m_Target_Functional.Add(target_new);


                                    i2++;
                                } while (i2 < m_guid_client.Count);
                            }

                            element_Functional.Check_For_Requirement(repository, database);

                            //Element Process hinzufügen
                            if (this.m_Element_Functional[i1].m_element_Processes.Count > 0)
                            {
                                int i21 = 0;
                                do
                                {      
                                    Element_Process element_Process = new Element_Process(activity, this.m_Element_Functional[i1].m_element_Processes[i21].OpConstraint, true);
                                    element_Process.m_Action_ID.Add(activity.Classifier_ID);
                                    element_Process.m_Node_ID = m_guid_client;

                                    element_Process.Check_Requirement_Process(database, repository);

                                    element_Functional.m_element_Processes.Add(element_Process);


                                    i21++;
                                } while (i21 < this.m_Element_Functional[i1].m_element_Processes.Count);
                            }
                            //Measurements
                            if (this.m_Element_Measurement_Activity.Count > 0)
                            {
                                int m1 = 0;
                                do
                                {
                                    Element_Measurement element_Measurement = new Element_Measurement(this.m_Element_Measurement_Activity[m1].Measurement, database);

                                    element_Measurement.m_guid_Instanzen.Add(activity.Classifier_ID);

                                    element_Measurement.Check_For_Requirement(1, repository, database, this, this.m_Element_Functional[i1].Client);

                                    element_Functional.m_element_measurement.Add(element_Measurement);
                                    

                                    m1++;
                                } while (m1 < this.m_Element_Measurement_Activity.Count);
                            }
                        }
                        else //Targets hinzufügen
                        {
                            List<string> m_guid_client = this.m_Element_Functional[i1].Get_Client_GUID_Target();

                            if (m_guid_client.Count > 0)
                            {
                                int i2 = 0;
                                do
                                {
                                    Target_Functional check = m_func[0].Check_Target(m_guid_client[i2], activity.Classifier_ID);

                                    if (check == null)
                                    {
                                        Target_Functional target_new = new Target_Functional();
                                        target_new.CLient_ID = m_guid_client[i2];
                                        target_new.Supplier_ID = activity.Classifier_ID;
                                        m_func[0].m_Target_Functional.Add(target_new);
                                    }

                                        i2++;
                                } while (i2 < m_guid_client.Count);
                            }

                                m_func[0].Check_For_Requirement(repository, database);

                            //Element Process hinzufügen
                            if (this.m_Element_Functional[i1].m_element_Processes.Count > 0)
                            {
                                int i21 = 0;
                                do
                                {
                                   List<Element_Process> m_process =  m_func[0].m_element_Processes.Where(x => x.OpConstraint == this.m_Element_Functional[i1].m_element_Processes[i21].OpConstraint).ToList();

                                    if(m_process.Count == 0)
                                    {
                                        Element_Process element_Process = new Element_Process(activity, this.m_Element_Functional[i1].m_element_Processes[i21].OpConstraint, true);
                                        element_Process.m_Action_ID.Add(activity.Classifier_ID);
                                        element_Process.m_Node_ID = m_guid_client;
                                        element_Process.Check_Requirement_Process(database, repository);

                                        m_func[0].m_element_Processes.Add(element_Process);
                                    }
                                    else
                                    {
                                        if(m_process[0].m_Action_ID.Contains(activity.Classifier_ID) == false)
                                        {
                                            m_process[0].m_Action_ID.Add(activity.Classifier_ID);
                                        }

                                        if(m_guid_client.Count > 0)
                                        {
                                            int i22 = 0;
                                            do
                                            {
                                                if (m_process[0].m_Node_ID.Contains(m_guid_client[i22]) == false)
                                                {
                                                    m_process[0].m_Node_ID.Add(m_guid_client[i22]);
                                                }

                                                i22++;
                                            } while (i22 < m_guid_client.Count);
                                        }
                                    }

                                    i21++;
                                } while (i21 < this.m_Element_Functional[i1].m_element_Processes.Count);
                            }
                        }
                        

                            i1++;
                    } while (i1 < this.m_Element_Functional.Count);
                }
            }

           
        }

        private void Copy_User(EA.Repository repository, Database database, Activity activity)
        {
            if (this.m_Specialize.Count > 0)
            {
                if (this.m_Element_User.Count > 0)
                {
                    int i1 = 0;
                    do
                    {
                        List<Element_User> m_func = activity.Check_ElementUser(this.m_Element_User[i1].Client.Classifier_ID);


                        if (m_func == null) //anlegen
                        {
                            Element_User element_Functional = new Element_User();
                            element_Functional.Client = this.m_Element_User[i1].Client;
                            element_Functional.Supplier = activity;
                            element_Functional.m_Client_ST = this.m_Element_User[i1].m_Client_ST;
                            activity.m_Element_User.Add(element_Functional);
                            this.m_Element_User[i1].Client.m_Element_User.Add(element_Functional);

                            List<string> m_guid_client = this.m_Element_User[i1].Get_Client_GUID_Target_User();

                            if (m_guid_client.Count > 0)
                            {
                                int i2 = 0;
                                do
                                {
                                    Target_Stakeholder target_new = new Target_Stakeholder();
                                    target_new.CLient_ID = m_guid_client[i2];
                                    target_new.Supplier_ID = activity.Classifier_ID;
                                    target_new.Client_ST = element_Functional.m_Client_ST[0].Classifier_ID;
                                    element_Functional.m_Target_User.Add(target_new);


                                    i2++;
                                } while (i2 < m_guid_client.Count);
                            }

                            element_Functional.Check_For_Requirement_User(repository, database);

                            //Element Process hinzufügen
                            if (this.m_Element_User[i1].m_element_Processes.Count > 0)
                            {
                                int i21 = 0;
                                do
                                {
                                    Element_Process element_Process = new Element_Process(activity, this.m_Element_User[i1].m_element_Processes[i21].OpConstraint, true);
                                    element_Process.m_Action_ID.Add(activity.Classifier_ID);
                                    element_Process.m_Node_ID = m_guid_client;

                                    element_Process.Check_Requirement_Process(database, repository);

                                    element_Functional.m_element_Processes.Add(element_Process);


                                    i21++;
                                } while (i21 < this.m_Element_User[i1].m_element_Processes.Count);
                            }
                            if (this.m_Element_Measurement_Activity.Count > 0)
                            {
                                int m1 = 0;
                                do
                                {
                                    Element_Measurement element_Measurement = new Element_Measurement(this.m_Element_Measurement_Activity[m1].Measurement, database);

                                    element_Measurement.m_guid_Instanzen.Add(activity.Classifier_ID);

                                    element_Measurement.Check_For_Requirement(1, repository, database, activity, this.m_Element_User[i1].Client);

                                    element_Functional.m_element_measurement.Add(element_Measurement);


                                    m1++;
                                } while (m1 < this.m_Element_Measurement_Activity.Count);
                            }

                        }
                        else //Targets hinzufügen
                        {
                            List<string> m_guid_client = this.m_Element_User[i1].Get_Client_GUID_Target_User();

                            if (m_guid_client.Count > 0)
                            {
                                int i2 = 0;
                                do
                                {
                                    Target_Stakeholder check = m_func[0].Check_Target_User(m_guid_client[i2], activity.Classifier_ID);

                                    if (check == null)
                                    {
                                        Target_Stakeholder target_new = new Target_Stakeholder();
                                        target_new.CLient_ID = m_guid_client[i2];
                                        target_new.Supplier_ID = activity.Classifier_ID;
                                        target_new.Client_ST = this.m_Element_User[i1].m_Client_ST[0].Classifier_ID;
                                        m_func[0].m_Target_Functional.Add(target_new);
                                    }

                                    i2++;
                                } while (i2 < m_guid_client.Count);
                            }

                            m_func[0].Check_For_Requirement(repository, database);

                            //Element Process hinzufügen
                            if (this.m_Element_User[i1].m_element_Processes.Count > 0)
                            {
                                int i21 = 0;
                                do
                                {
                                    List<Element_Process> m_process = m_func[0].m_element_Processes.Where(x => x.OpConstraint == this.m_Element_User[i1].m_element_Processes[i21].OpConstraint).ToList();

                                    if (m_process.Count == 0)
                                    {
                                        Element_Process element_Process = new Element_Process(activity, this.m_Element_User[i1].m_element_Processes[i21].OpConstraint, true);
                                        element_Process.m_Action_ID.Add(activity.Classifier_ID);
                                        element_Process.m_Node_ID = m_guid_client;
                                        element_Process.Check_Requirement_Process(database, repository);

                                        m_func[0].m_element_Processes.Add(element_Process);
                                    }
                                    else
                                    {
                                        if (m_process[0].m_Action_ID.Contains(activity.Classifier_ID) == false)
                                        {
                                            m_process[0].m_Action_ID.Add(activity.Classifier_ID);
                                        }

                                        if (m_guid_client.Count > 0)
                                        {
                                            int i22 = 0;
                                            do
                                            {
                                                if (m_process[0].m_Node_ID.Contains(m_guid_client[i22]) == false)
                                                {
                                                    m_process[0].m_Node_ID.Add(m_guid_client[i22]);
                                                }

                                                i22++;
                                            } while (i22 < m_guid_client.Count);
                                        }
                                    }

                                    i21++;
                                } while (i21 < this.m_Element_User[i1].m_element_Processes.Count);
                            }
                        }


                        i1++;
                    } while (i1 < this.m_Element_User.Count);
                }
            }
        }

        /*    private void Copy_Process(EA.Repository repository, Database database, Activity activit)
            {

            }
        */

        #endregion

        #region 
        public void Create_Functional_Measurement(EA.Repository repository, Database database)
        {
            if(this.m_Element_Functional.Count > 0)
            {
                int i1 = 0;
                do
                {
                    // Element_Measurement[] element_Measurements = new Element_Measurement[this.m_Element_Measurement_Activity.Count];
                    // this.m_Element_Measurement_Activity.CopyTo(element_Measurements);
                    //this.m_Element_Functional[i1].m_element_measurement = element_Measurements.ToList();
                    /*if (this.m_Element_Functional[i1].m_element_measurement.Count > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            this.m_Element_Functional[i1].m_element_measurement[i2].Check_For_Requirement(1, repository, database, this, this.m_Element_Functional[i1].Client);

                            i2++;
                        } while (i2 < this.m_Element_Functional[i1].m_element_measurement.Count);
                    }*/
                    if (this.m_Element_Measurement_Activity.Count > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            Element_Measurement recent_neu = new Element_Measurement(this.m_Element_Measurement_Activity[i2].Measurement, database);
                            recent_neu.m_guid_Instanzen = this.m_Element_Measurement_Activity[i2].m_guid_Instanzen;

                            this.m_Element_Functional[i1].m_element_measurement.Add(recent_neu);
                            recent_neu.Check_For_Requirement(1, repository, database, this, this.m_Element_Functional[i1].Client);

                            i2++;
                        } while (i2 < this.m_Element_Measurement_Activity.Count);
                    }

                    i1++;
                } while (i1 < this.m_Element_Functional.Count);
            }
        }

        public void Create_User_Measurement(EA.Repository repository, Database database)
        {
            if (this.m_Element_User.Count > 0)
            {
                int i1 = 0;
                do
                {
                    Element_Measurement[] element_Measurements = new Element_Measurement[this.m_Element_Measurement_Activity.Count];
                    this.m_Element_Measurement_Activity.CopyTo(element_Measurements);

                    this.m_Element_User[i1].m_element_measurement = element_Measurements.ToList();

                    if (this.m_Element_User[i1].m_element_measurement.Count > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            this.m_Element_User[i1].m_element_measurement[i2].Check_For_Requirement(1, repository, database, this, this.m_Element_User[i1].Client);

                            i2++;
                        } while (i2 < this.m_Element_User[i1].m_element_measurement.Count);
                    }

                    i1++;
                } while (i1 < this.m_Element_User.Count);
            }
        }
        #endregion

    }//end Activity

}//end namespace Requirement_Plugin
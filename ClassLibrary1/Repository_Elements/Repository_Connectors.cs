///////////////////////////////////////////////////////////
//  Repository_Connectors.cs
//  Implementation of the Class Repository_Connectors
//  Generated by Enterprise Architect
//  Created on:      14-Jan-2019 19:22:03
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.OleDb;
using System.Xml;
using System.Linq;
using Requirement_Plugin.Interfaces;

using Requirement_Plugin;
using Repsoitory_Elements;
using Database_Connection;

namespace Repsoitory_Elements
{
	public class Repository_Connectors {

		public Repository_Connector m_Repository_Connector;

		public Repository_Connectors(){

		}

		~Repository_Connectors(){

		}

        #region Get
        public List<string> Get_Connector_By_StartID(Database Data, int Start_Object_ID)
        {
            /* List<string> ret = new List<string>();
             string SQL = "SELECT ea_guid FROM t_connector WHERE Start_Object_ID = ?";
             OleDbCommand SELECT2 = new OleDbCommand(SQL, (OleDbConnection)Data.oLEDB_Interface.dbConnection);
             List<DB_Input[]> ee2 = new List<DB_Input[]>();
             List<int> help = new List<int>();
             help.Add(Start_Object_ID);
             ee2.Add(help.Select(x => new DB_Input(x, null)).ToArray());

             OleDbType[] m_input_Type2 = {OleDbType.BigInt};
             Data.oLEDB_Interface.Add_Parameters_Select(SELECT2, ee2, m_input_Type2);
             string[] m_output2 = { "ea_guid" };

             List<DB_Return> m_ret4 = Data.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT2, m_output2);

             if (m_ret4[0].Ret.Count > 1)
             {
                 ret = m_ret4[0].Ret.GetRange(1, m_ret4[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList();
             }
             else
             {
                 ret = null;
             }

             return (ret);*/
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Connector_By_Client_ID(Data, Start_Object_ID));

        }

        public List<int> Get_Connector_Supplier_ID_By_Start_ID(Database database, List<string> m_Stereotype, int Start_ID)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Supplier_ID_By_Client_ID(database, Start_ID, m_Stereotype));

            /*  if (Start_ID != null && m_Stereotype != null)
              {
                  XML xml = new XML();

                  List<int> help = new List<int>();
                  help.Add(Start_ID);

                  List<DB_Input[]> ee = new List<DB_Input[]>();
                  ee.Add(help.Select(x => new DB_Input(x, null)).ToArray());
                  ee.Add(m_Stereotype.Select(x => new DB_Input(-1, x)).ToArray());
                  string[] m_output = { "End_Object_ID" };
                  string table = "t_connector";
                  string[] m_input_Property = { "Start_Object_ID", "Stereotype" };
                  OleDbType[] m_input_Type = { OleDbType.BigInt, OleDbType.VarChar };

                  List<DB_Return> m_ret = xml.Read_Attribut(m_output, table, m_input_Property, ee, m_input_Type, database);

                  if (m_ret[0].Ret.Count > 1)
                  {
                      return (m_ret[0].Ret.GetRange(1, m_ret[0].Ret.Count - 1).ToList().Select(x => (int)x).ToList());
                  }

                  return (null);

              }
              else
              {
                  return (null);
              }
              */
        }

        #endregion Get
     

        public List<string> Get_Connectors_Element(List<string> m_GUID, Database Data, List<string> m_Type_Con, List<string> m_Stereotype_Con)
        {

            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Connector_By_m_Client_GUID(Data, m_GUID, m_Type_Con, m_Stereotype_Con));

           /* List<string> m_Type_Con = new List<string>();
            List<string> m_Stereotype_Con = new List<string>();

            m_Type_Con = Data.metamodel.m_Infoaus.Select(x => x.Type).ToList();
            m_Stereotype_Con = Data.metamodel.m_Infoaus.Select(x => x.Stereotype).ToList();

            DB_Command command = new DB_Command();
            List<string> ret = new List<string>();
            string SQL = "SELECT ea_guid FROM t_connector WHERE Start_Object_ID IN (SELECT Object_ID FROM t_object WHERE ea_guid IN (" + command.Add_Parameters_Pre(m_GUID.ToArray()) + ")) AND Connector_Type IN ("+command.Add_Parameters_Pre(m_Type_Con.ToArray())+") AND Stereotype IN ("+command.Add_Parameters_Pre(m_Stereotype_Con.ToArray())+")";
            OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Data.oLEDB_Interface.dbConnection);

            List<DB_Input[]> ee = new List<DB_Input[]>();
            ee.Add(m_GUID.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Type_Con.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Stereotype_Con.Select(x => new DB_Input(-1, x)).ToArray());

            OleDbType[] m_input_Type = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
            Data.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
            string[] m_output = { "ea_guid" };

            List<DB_Return> m_ret3 = Data.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

            if (m_ret3[0].Ret.Count > 1)
            {
                m_GUID = m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList();
            }
            else
            {
                m_GUID = null;
            }


            return m_GUID;*/
        }

           

        public List<string> m_Get_Supplier(Database Data, int Object_ID, List<string> m_Type_con, List<string> m_Stereotype_con, bool direction)
        {
            //Alle Startpunkte mit Satisfy_Design erhalten
            //  XML xml = new XML();
            DB_Command command = new DB_Command();
            List<string> GUIDS = new List<string>();
            List<string> TYPES = new List<string>();
            List<string> STEREOTYPES = new List<string>();
            List<string> m_ret = new List<string>();

 
            Requirement_Plugin.Interfaces.Interface_Connectors interface_Connectors = new Requirement_Plugin.Interfaces.Interface_Connectors();

            List<DB_Return> m_ret3 = interface_Connectors.Get_m_Supplier_From_Client(Data, Object_ID, m_Type_con, m_Stereotype_con, direction);

            if (m_ret3[0].Ret.Count > 1)
            {
                GUIDS = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                GUIDS = (null);
            }
            if (m_ret3[1].Ret.Count > 1)
            {
                TYPES = (m_ret3[1].Ret.GetRange(1, m_ret3[1].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                TYPES = (null);
            }
            if (m_ret3[2].Ret.Count > 1)
            {
                STEREOTYPES = (m_ret3[2].Ret.GetRange(1, m_ret3[2].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                STEREOTYPES = (null);
            }

            if (GUIDS != null && TYPES != null && STEREOTYPES != null)
            {
                //Schelife über alle Elemente
                int i1 = 0;
                do
                {

                      m_ret.Add(GUIDS[i1]);


                    i1++;
                } while (i1 < GUIDS.Count);
            }

            if (m_ret.Count == 0)
            {
                m_ret = null;
            }

            return (m_ret);

        }

        public List<string> m_Get_Client(Database Data, int Object_ID, List<string> m_Type_con, List<string> m_Stereotype_con)
        {
            //Alle Startpunkte mit Satisfy_Design erhalten
            //  XML xml = new XML();
            DB_Command command = new DB_Command();
            List<string> GUIDS = new List<string>();
            List<string> TYPES = new List<string>();
            List<string> STEREOTYPES = new List<string>();
            List<string> m_ret = new List<string>();


            Requirement_Plugin.Interfaces.Interface_Connectors interface_Connectors = new Requirement_Plugin.Interfaces.Interface_Connectors();

            List<DB_Return> m_ret3 = interface_Connectors.Get_m_Client_From_Supplier(Data, Object_ID, m_Type_con, m_Stereotype_con);

            if (m_ret3[0].Ret.Count > 1)
            {
                GUIDS = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                GUIDS = (null);
            }
            if (m_ret3[1].Ret.Count > 1)
            {
                TYPES = (m_ret3[1].Ret.GetRange(1, m_ret3[1].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                TYPES = (null);
            }
            if (m_ret3[2].Ret.Count > 1)
            {
                STEREOTYPES = (m_ret3[2].Ret.GetRange(1, m_ret3[2].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                STEREOTYPES = (null);
            }

            if (GUIDS != null && TYPES != null && STEREOTYPES != null)
            {
                //Schelife über alle Elemente
                int i1 = 0;
                do
                {

                    m_ret.Add(GUIDS[i1]);


                    i1++;
                } while (i1 < GUIDS.Count);
            }

            if (m_ret.Count == 0)
            {
                m_ret = null;
            }

            return (m_ret);

        }

    }//end Repository_Connectors
}//end namespace Requirement_Plugin
///////////////////////////////////////////////////////////
//  Repository_Connector.cs
//  Implementation of the Class Repository_Connector
//  Generated by Enterprise Architect
//  Created on:      14-Jan-2019 19:22:07
//  Original author: Yannick
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Data.OleDb;
using Requirement_Plugin.Interfaces;

using Metamodels;
using Requirement_Plugin;

namespace Repsoitory_Elements
{
	public class Repository_Connector : Repository_Plugin {

		public string CLient_ID;
		public List<InformationElement> m_Information_Element;
		public string Supplier_ID;

		public Repository_Connector(){
            this.m_Information_Element = new List<InformationElement>();
		}

		~Repository_Connector(){

		}

        
        public string Get_Logical_ID(string Client_ID, string Supplier_ID, Database Data, Metamodel metamodel)
        {
            string Logical_ID_local = "kein";

           // EA.Element element_recent = Repository.GetElementByGuid(Client_ID);
           // EA.Element element_copy = element_recent;

            bool flag_Stereotype = false;

           // int parent_ID = element_copy.ParentID;
           // int parent_ID_copy = parent_ID;

            string parent_guid = Client_ID;
            string parent_guid_copy = Client_ID;
            Repository_Element repository_Element = new Repository_Element();
            repository_Element.Classifier_ID = parent_guid;
            //  MessageBox.Show("parent_ID: " +parent_ID);

            do
            {
                if (parent_guid != null)
                {

                    //string SQL = "SELECT t_object.Object_Type FROM t_object WHERE t_object.Object_ID = " + parent_ID.ToString() + ";";

                    //   XML xml = new XML();
                    //   string xml_String2 = Repository.SQLQuery(SQL);
                    //   List<string> Parent_Type = new List<string>();
                    //   Parent_Type = xml.Xml_Read_Attribut("Object_Type", xml_String2);

                    string Parent_Type = repository_Element.Get_Type(Data);

                    //   MessageBox.Show("Parent_Type: " + Parent_Type[0]);
                  
                    if (metamodel.m_Elements_Usage.Select(x => x.Type).Contains(Parent_Type) == false && Parent_Type != "Package")
                    {
                        List<string> m_Stereotype = metamodel.m_Szenar.Select(x => x.Stereotype).ToList();
                        flag_Stereotype = true;
                        /*  string SQL2 = "SELECT t_object.ea_guid FROM t_object WHERE t_object.Object_ID = " + parent_ID.ToString() + " AND Stereotype IN" + xml.SQL_IN_Array(m_Stereotype.ToArray()) + ";";

                          string xml_String3 = Repository.SQLQuery(SQL2);
                          List<string> Parent_GUID = new List<string>();
                          Parent_GUID = xml.Xml_Read_Attribut("ea_guid", xml_String3);*/
                        string Parent_GUID = repository_Element.Classifier_ID;

                        if (Parent_GUID != null)
                        {
                            Logical_ID_local = Parent_GUID;
                        }
                        else
                        {
                            return (null);
                        }

                    }
                    else
                    {
                        //element_copy = Repository.GetElementByID(parent_ID);
                        parent_guid = repository_Element.Get_Parent_GUID(Data);
                        repository_Element.Classifier_ID = parent_guid;
                    }
                }
                else
                {
                    flag_Stereotype = true;
                }

            } while (flag_Stereotype == false);

            //   MessageBox.Show("Logical_ID: " + Logical_ID_local);
            return (Logical_ID_local);

        }

        /// <summary>
        /// Es werden die InformationElement eines Connectors betrachtet, welcher sich in in einem Logical befindet.
        /// </summary>
        /// <param name="Repository"></param>
        /// <param name="Connector_GUID"></param>
        /// <param name="Logical"></param>
        /// <param name="Database"></param>
        /// <returns></returns>
        public List<InformationElement> Get_Information_Element_Logical(EA.Repository Repository, string Connector_GUID, Logical Logical, Database Database)
        {
            // MessageBox.Show("Activate Get_Information_Element");

            List<InformationElement> Info_Elems = new List<InformationElement>();
            //Info Elem zu Target finden
            //   MessageBox.Show("InfoElem finden");
            /*    string SQL_InfoElem = " SELECT t_xref.Description FROM t_xref WHERE t_xref.Client = '" + Connector_GUID + "' AND t_xref.Behavior = 'conveyed';";
                //  MessageBox.Show(SQL_InfoElem);
                string xml_InfoElem = Repository.SQLQuery(SQL_InfoElem);
                //  MessageBox.Show("SQL durchgeführt");
                XML InfoElem2 = new XML();
                List<string> Info_Elem_GUID = InfoElem2.Xml_Read_Attribut("Description", xml_InfoElem);

        */
            /* List<string> Info_Elem_GUID = new List<string>();
             string SQL_InfoElem = " SELECT Description FROM t_xref WHERE t_xref.Client = ? AND t_xref.Behavior = 'conveyed';";
             OleDbCommand SELECT1 = new OleDbCommand(SQL_InfoElem, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

             List<DB_Input[]> ee = new List<DB_Input[]>();
             List<string> help_guid = new List<string>();
             help_guid.Add(Connector_GUID);
             ee.Add(help_guid.Select(x => new DB_Input(-1, x)).ToArray());

             OleDbType[] m_input_Type = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar, OleDbType.VarChar };
             Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
             string[] m_output = { "Description" };

             List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

             if (m_ret3[0].Ret.Count > 1)
             {
                 Info_Elem_GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
             }
             else
             {
                 Info_Elem_GUID = (null);
             }*/
            Interface_Connectors interface_Connectors = new Interface_Connectors();

            List<string> Info_Elem_GUID = interface_Connectors.GetInformationElements(Database, Connector_GUID);


            if (Info_Elem_GUID != null)
            {
                int i1 = 0;
                do
                {
                    var GUID_splitted = Info_Elem_GUID[i1].Split(',');

                    //  MessageBox.Show("Anzahl InfoElem: "+GUID_splitted.Length.ToString());

                    if (GUID_splitted.Length > 0)
                    {
                        int i2 = 0;
                        do
                        {
                            InformationElement Check = Database.Check_InformationElement(GUID_splitted[i2]);

                            if (Check != null)
                            {
                                //   MessageBox.Show("InfoElem vorhanden");

                                if (Logical != null)
                                {

                                    if (Check.Logicals.Contains(Logical) == false)
                                    {
                                        //  MessageBox.Show("Logical in InfoElem hinterlegen");
                                        Check.Logicals.Add(Logical);
                                    }
                                    if (Logical.m_InformationElement.Contains(Check) == false)
                                    {
                                        //MessageBox.Show("InfoElem in Logical hinterlegen");
                                        Logical.m_InformationElement.Add(Check);
                                    }
                                }

                                // MessageBox.Show("Zur Rückgabe hinzufügen");
                                Info_Elems.Add(Check);


                            }
                            else
                            {
                                //  MessageBox.Show("InfoElem anlegen");
                                InformationElement InfoElem = new InformationElement(GUID_splitted[i2], Database);

                                if (Logical != null && Check != null)
                                {
                                    if (Check.Logicals.Contains(Logical) == false)
                                    {
                                        Check.Logicals.Add(Logical);
                                    }
                                    if (Logical.m_InformationElement.Contains(Check) == false)
                                    {
                                        Logical.m_InformationElement.Add(Check);
                                    }
                                }


                                Database.m_InformationElement.Add(InfoElem);

                                Info_Elems.Add(InfoElem);
                            }


                            i2++;
                        } while (i2 < GUID_splitted.Length);
                    }

                    i1++;
                } while (i1 < Info_Elem_GUID.Count);
            }

            if (Info_Elems.Count == 0)
            {
                return null;
            }

            return (Info_Elems);

        }

        /// <summary>
        /// Es wird der Logical bestimmt, in welchem sich der Connector befindet
        /// </summary>
        /// <param name="Client_ID"></param>
        /// <param name="Supplier_ID"></param>
        /// <param name="Repository"></param>
        /// <param name="Database"></param>
        /// <returns></returns>
        public Logical Get_Logical(string Client_ID, string Supplier_ID, EA.Repository Repository, Database Database)
        {
            string Logical_ID = this.Get_Logical_ID(Client_ID, Supplier_ID, Database, Database.metamodel);

            if (Logical_ID != null)
            {
                Logical logical1 = Database.Check_Logical(Logical_ID);

                if (logical1 != null)
                {
                    return (logical1);
                }
                else
                {
                    return (null);
                }
            }
            else
            {
                return (null);
            }

        }

        /// <summary>
        /// Es wird dem Connector in der Database ein InformationElement hinzugefügt.
        /// </summary>
        /// <param name="Info"></param>
        public void Add_InformationElement(InformationElement Info)
        {
            if (this.m_Information_Element.Contains(Info) == false)
            {
                this.m_Information_Element.Add(Info);
            }

        }

        /// <summary>
        /// Überprüfen, ob Connector vorhanden
        /// </summary>
        /// <param name="Element_GUID"></param>
        /// <param name="StereoType"></param>
        /// <param name="Type"></param>
        /// <param name="Repository"></param>
        /// <returns></returns>
        public List<string> Check_Dependency(string Classifier_ID, string Element_GUID, List<string> StereoType, List<string> Type, Database Database, bool direction)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Check_Connector(Classifier_ID, Element_GUID, Type, StereoType, Database, direction));

          /*  DB_Command command = new DB_Command();
            bool flag = false;
            XML xml = new XML();
            //  EA.Element Element = Repository.GetElementByGuid(Element_GUID);
            //  EA.Element Requirement = Repository.GetElementByGuid(Classifier_ID);
            Repository_Element Requirement = new Repository_Element();
            Requirement.Classifier_ID = Classifier_ID;
            Repository_Element Element = new Repository_Element();
            Element.Classifier_ID = Element_GUID;
            //Hier schauen, ob zwischen dem Requirement und dem Element ein Connector mit dem Type und StereoType besteht. Wenn ja dann true zurück geben
            List<string> Check = new List<string>();
            string SQL = "SELECT ea_guid FROM t_connector WHERE Start_Object_ID = ? AND End_Object_ID = ? AND Stereotype IN(" + command.Add_Parameters_Pre(StereoType.ToArray()) + ") AND Connector_Type IN(" + command.Add_Parameters_Pre(Type.ToArray()) + ");";

            OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

            List<DB_Input[]> ee = new List<DB_Input[]>();
            List<int> help_id = new List<int>();
            List<int> help_id2 = new List<int>();
            help_id.Add(Requirement.Get_Object_ID(Database));
            help_id2.Add(Element.Get_Object_ID(Database));
            ee.Add(help_id.Select(x => new DB_Input(x, null)).ToArray());
            ee.Add(help_id2.Select(x => new DB_Input(x, null)).ToArray());
            ee.Add(StereoType.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(Type.Select(x => new DB_Input(-1, x)).ToArray());

            OleDbType[] m_input_Type = { OleDbType.BigInt, OleDbType.BigInt, OleDbType.VarChar, OleDbType.VarChar};
            Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
            string[] m_output = { "ea_guid" };

            List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

            if (m_ret3[0].Ret.Count > 1)
            {
                Check = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                Check = (null);
            }

            if (Check != null) //Existiert
            {
                flag = true;
            }

            return (flag);*/
            
        }


        public List<string> Check_ProxyConnector_Dependency_Supplier(string Connector_guid, string Element_GUID, List<string> StereoType, List<string> Type, Database Database)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Check_ProxyConnector_Supplier(Connector_guid, Element_GUID, Type, StereoType, Database));
        }
        /// <summary>
        /// Connector anlegen
        /// </summary>
        /// <param name="Element_GUID"></param>
        /// <param name="StereoType"></param>
        /// <param name="Type"></param>
        /// <param name="Repository"></param>
    public string Create_Dependency(string Classifier_ID, string Element_GUID, List<string> m_StereoType, List<string> m_Type, string SubType, EA.Repository Repository, Database Data, string Toolbox, bool direction)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_Check = repository_Connector.Check_Dependency(Classifier_ID, Element_GUID, m_StereoType, m_Type, Data, direction);

            if (m_Check == null) //Exisitiert nicht
            {
                Interface_Connectors interface_Connectors = new Interface_Connectors();

                return (interface_Connectors.Create_Connector(Classifier_ID, Element_GUID, m_StereoType, m_Type, SubType, Repository, Data, Toolbox, direction));

                // EA.Element Element = Repository.GetElementByGuid(Element_GUID);
               /* Repository_Element rep_Elem = new Repository_Element();
                rep_Elem.Classifier_ID = Element_GUID;
                rep_Elem.ID = rep_Elem.Get_Object_ID(Data);
                int elem_ID = rep_Elem.ID;
                EA.Element Requirement = Repository.GetElementByGuid(Classifier_ID);

                string Connector_GUID = this.Generate_GUID("t_connector", Repository, Data);
                string GUID2 = this.Generate_GUID("t_xref", Repository, Data);
                string SQL = "";

                string StereoType = m_StereoType[0];
                string Type = m_Type[0];

                if(SubType == "")
                {
                    SubType = null;
                }

                if (StereoType != "")
                {
                    

                    SQL = "INSERT INTO t_connector (Direction, Connector_Type, SubType, SourceAccess, DestAccess, SourceContainment, DestContainment, DestIsAggregate, Start_Object_ID, End_Object_ID, Btm_Mid_Label, Stereotype, VirtualInheritance, ea_guid, SourceChangeable, DestChangeable, SourceTS, DestTS) VALUES ('Source -> Destination', '" + Type + "', '"+SubType+"', 'Public', 'Public', 'Unspecified', 'Unspecified', '0', " + Requirement.ElementID + ", " + elem_ID + ", '" + "<<" + StereoType + ">>" + "' , '" + StereoType + "', " + 0 + ", '" + Connector_GUID + "', 'none', 'none', 'instance', 'instance');";
                    if(SubType == "Strong")
                    {
                        SQL = "INSERT INTO t_connector (Direction, Connector_Type, SubType, SourceAccess, DestAccess, SourceContainment, DestContainment, DestIsAggregate, Start_Object_ID, End_Object_ID, Btm_Mid_Label, Stereotype, VirtualInheritance, ea_guid, SourceChangeable, DestChangeable, SourceTS, DestTS) VALUES ('Source -> Destination', '" + Type + "', '" + SubType + "', 'Public', 'Public', 'Unspecified', 'Unspecified', '2', " + Requirement.ElementID + ", " + elem_ID + ", '" + "<<" + StereoType + ">>" + "' , '" + StereoType + "', " + 0 + ", '" + Connector_GUID + "', 'none', 'none', 'instance', 'instance');";
                    }

                    Repository.Execute(SQL);
                }
                else
                {
                    SQL = "INSERT INTO t_connector (Direction, Connector_Type, SubTpye, SourceAccess, DestAccess, SourceContainment, DestContainment, Start_Object_ID, End_Object_ID, Btm_Mid_Label, VirtualInheritance, ea_guid, SourceChangeable, DestChangeable, SourceTS, DestTS) VALUES ('Source -> Destination', '" + Type + "', '"+SubType+"', 'Public', 'Public', 'Unspecified', 'Unspecified', " + Requirement.ElementID + ", " + elem_ID + ", '" + "<<" + StereoType + ">>" + "' , " + 0 + ", '" + Connector_GUID + "', 'none', 'none', 'instance', 'instance');";
                    Repository.Execute(SQL);
                }

                //Wenn MDG TechnologY File übernommen wird, muss hier in t_xref noch eingefügt werden; Es folgt ein Beispiel
                SQL = "Insert INTO t_xref(XrefID, Name, Type, Visibility, Partition, Description, Client, Supplier) VALUES ('" + GUID2 + "', 'Stereotypes', 'connector property', 'Public', 0, '@STEREO;Name=" + StereoType + ";FQName=ADMBW::" + StereoType + ";@ENDSTEREO;', '" + Connector_GUID + "','<none>');";

                Repository.Execute(SQL);

            //    Element.Connectors.Refresh();
            //    Requirement.Connectors.Refresh();

                return (true);*/
            }
            else
            {
                return (m_Check[0]);
            }
        }

        public string Create_ConnectorProxy_Dependency_Supplier(string Connector_guid, string Element_GUID, List<string> m_StereoType, List<string> m_Type, string SubType, EA.Repository Repository, Database Data, string Toolbox, bool direction)
        {
            Repository_Connector repository_Connector = new Repository_Connector();
            List<string> m_Check = repository_Connector.Check_ProxyConnector_Dependency_Supplier(Connector_guid, Element_GUID, m_StereoType, m_Type, Data);

            if (m_Check == null) //Exisitiert nicht
            {
                Interface_Connectors interface_Connectors = new Interface_Connectors();

                return (interface_Connectors.Create_ProxyConnector_Supplier(Connector_guid, Element_GUID, m_StereoType, m_Type, SubType, Repository, Data, Toolbox, direction));
            }
            else
            {
                return (m_Check[0]);
            }
        }

        /// <summary>
        /// Löschen Connector
        /// </summary>
        /// <param name="Supplier_GUID"></param>
        /// <param name="Repository"></param>
        public void Delete_Connector_Supplier(string Classifier_ID, string Supplier_GUID, EA.Repository Repository, Metamodel metamodel, Database Database)
        {
         //   XML xml = new XML();
         //   DB_Command command = new DB_Command();

            List<string> m_Stereotype = metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();
            List<string> m_Type = metamodel.m_Derived_Element.Select(x => x.Stereotype).ToList();

            Interface_Connectors interface_Connectors = new Interface_Connectors();

            interface_Connectors.Delete_Connector_by_IDs(Database, Repository, Classifier_ID, Supplier_GUID, m_Stereotype, m_Type);

        /*    Repository_Element Requirement = new Repository_Element();
            Requirement.Classifier_ID = Classifier_ID;
            Repository_Element Element = new Repository_Element();
            Element.Classifier_ID = Supplier_GUID;


            
            List<string> GUID = new List<string>();
            string SQL_2 = "SELECT ea_guid FROM t_connector WHERE Start_Object_ID = ? AND End_Object_ID = ? AND Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype.ToArray()) + ") AND Connector_Type IN(" + command.Add_Parameters_Pre(m_Type.ToArray()) + ");";

            OleDbCommand SELECT1 = new OleDbCommand(SQL_2, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

            List<DB_Input[]> ee = new List<DB_Input[]>();
            List<int> help_id = new List<int>();
            List<int> help_id2 = new List<int>();
            help_id.Add(Requirement.Get_Object_ID(Database));
            help_id2.Add(Element.Get_Object_ID(Database));
            ee.Add(help_id.Select(x => new DB_Input(x, null)).ToArray());
            ee.Add(help_id2.Select(x => new DB_Input(x, null)).ToArray());
            ee.Add(m_Stereotype.Select(x => new DB_Input(-1, x)).ToArray());
            ee.Add(m_Type.Select(x => new DB_Input(-1, x)).ToArray());

            OleDbType[] m_input_Type = { OleDbType.BigInt, OleDbType.BigInt, OleDbType.VarChar, OleDbType.VarChar };
            Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
            string[] m_output = { "ea_guid" };

            List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

            if (m_ret3[0].Ret.Count > 1)
            {
                GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
            }
            else
            {
                GUID = (null);
            }


            if (GUID != null)
            {
                int i1 = 0;
                do
                {
                    EA.Connector Connector = Repository.GetConnectorByGuid(GUID[i1]);

                    string SQL1 = "DELETE FROM t_connectortag WHERE t_connectortag.ElementID = " + Connector.ConnectorID + ";"; // 	t_connectortag

                    string SQL2 = "DELETE FROM t_xref WHERE t_xref.Client = " + Connector.ConnectorGUID + ";"; // t_xref

                    string SQL3 = "DELETE FROM t_connector WHERE t_connector.Connector_ID = " + Connector.ConnectorID + ";"; // t_connector

                    string SQL4 = "DELETE FROM t_diagramlinks WHERE t_diagramlinks.ConnectorID = " + Connector.ConnectorID + ";"; // t_connector

                    Repository.Execute(SQL4);
                    Repository.Execute(SQL1);
                    Repository.Execute(SQL2);
                    Repository.Execute(SQL3);

                    i1++;
                } while (i1 < GUID.Count);

            }
            */


        }
        public void Delete_Connector(string Connector_GUID, EA.Repository repository, Database Database)
        {

            Repository_Connector repository_Connector = new Repository_Connector();

            repository_Connector.Delete_Connector(Connector_GUID, repository, Database);
         /*   DB_Command command = new DB_Command();
            XML xML = new XML();
          
            List<int> m_Connector_ID = new List<int>();
            string SQL = "SELECT Connector_ID FROM t_connector WHERE ea_guid = ?;";
            OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

            List<DB_Input[]> ee = new List<DB_Input[]>();
            List<string> help_id = new List<string>();
            help_id.Add(Connector_GUID);
            ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());


            OleDbType[] m_input_Type = { OleDbType.VarChar};
            Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
            string[] m_output = { "Connector_ID" };

            List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

            if (m_ret3[0].Ret.Count > 1)
            {
                m_Connector_ID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => (int)x).ToList());
            }
            else
            {
                m_Connector_ID = (null);
            }


            if (m_Connector_ID != null)
            {
                var SQL1 = "DELETE FROM t_connectortag WHERE t_connectortag.ElementID = " + m_Connector_ID[0] + ";"; // 	t_connectortag

                var SQL2 = "DELETE FROM t_xref WHERE t_xref.Client = '" + Connector_GUID + "';"; // t_xref

                var SQL3 = "DELETE FROM t_connector WHERE t_connector.Connector_ID = " + m_Connector_ID[0] + ";"; // t_connector

                var SQL4 = "DELETE FROM t_diagramlinks WHERE t_diagramlinks.ConnectorID = " + m_Connector_ID[0] + ";"; // t_connector

                repository.Execute(SQL4);
                repository.Execute(SQL1);
                repository.Execute(SQL2);
                repository.Execute(SQL3);

            }
            */
        }

        public void Update_Connector_Logical(EA.Repository repository, Database Database, string Connector_GUID, string Sys_GUID)
        {
            /*   DB_Command command = new DB_Command();
               XML xML = new XML();
               TaggedValue tagged = new TaggedValue(Database.metamodel, Database);

               List<string> m_Type = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
               List<string> m_Stereotype = Database.metamodel.m_Derived_Logical.Select(x => x.Stereotype).ToList();
               //Prüfen ob Konnektor schon vorhanden

               List<string> m_ea_guid = new List<string>();
               string SQL_Check = "SELECT ea_guid FROM t_connector WHERE Start_Object_ID IN (SELECT Start_Object_ID FROM t_connector WHERE ea_guid = ?) AND End_Object_ID = ? AND Connector_Type IN(" + m_Type.ToArray() + ") AND Stereotype IN(" + command.Add_Parameters_Pre(m_Stereotype.ToArray()) + ")";

               OleDbCommand SELECT1 = new OleDbCommand(SQL_Check, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

               List<DB_Input[]> ee = new List<DB_Input[]>();
               List<string> help_id = new List<string>();
               List<int> help_id2 = new List<int>();
               help_id.Add(Connector_GUID);
               Repository_Element repository_Element = new Repository_Element();
               repository_Element.Classifier_ID = Sys_GUID;
               help_id2.Add(repository_Element.Get_Object_ID(Database));
               ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());
               ee.Add(help_id2.Select(x => new DB_Input(x, null)).ToArray());
               ee.Add(m_Type.Select(x => new DB_Input(-1, x)).ToArray());
               ee.Add(m_Stereotype.Select(x => new DB_Input(-1, x)).ToArray());

               OleDbType[] m_input_Type = { OleDbType.VarChar, OleDbType.BigInt, OleDbType.VarChar, OleDbType.VarChar };
               Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
               string[] m_output = { "ea_guid" };

               List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

               if (m_ret3[0].Ret.Count > 1)
               {
                   m_ea_guid = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
               }
               else
               {
                   m_ea_guid = (null);
               }*/

            List<string> m_Type = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
            List<string> m_Stereotype = Database.metamodel.m_Derived_Logical.Select(x => x.Stereotype).ToList();
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            List<string> m_ea_guid = interface_Connectors.Get_Connector_By_Supplier_GUID(Database, Connector_GUID, Sys_GUID, m_Type, m_Stereotype);


            if (m_ea_guid == null)
            {
                /*  //Updaten
                  DB_Command sQL_Command = new DB_Command();


                  List<string> m_Type_1 = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
                  List<string> m_Stereoype_1 = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
                  Repository_Element rep = new Repository_Element();
                  rep.Classifier_ID = Sys_GUID;

                  string[] m_input_property4 = { "Connector_Type", "Stereotype", "End_Object_ID" };
                  object[] m_input_value4 = { m_Type_1[0], m_Stereoype_1[0], rep.Get_Object_ID(Database) };
                  OleDbType[] m_input_Type4 = { OleDbType.VarChar, OleDbType.VarChar, OleDbType.BigInt };
                  string[] m_select_property4 = { "ea_guid" };
                  object[] m_v_1 = { Connector_GUID };
                  List<object[]> m_select_value = new List<object[]>();
                  OleDbType[] m_select_Type4 = { OleDbType.BigInt, OleDbType.VarChar };
                  m_select_value.Add(m_v_1);

                  OleDbCommand Update = sQL_Command.Get_Update_Command("t_connector", m_input_property4, m_input_value4, m_select_property4, m_select_value, (OleDbConnection)Database.oLEDB_Interface.dbConnection);
                  Database.oLEDB_Interface.Add_Parameters_Update(Update, m_input_value4, m_input_Type4, m_select_value, m_select_Type4);
                  Database.oLEDB_Interface.OLEDB_UPDATE_One_Table(Update);
                  */
                List<string> m_Type_1 = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
                List<string> m_Stereoype_1 = Database.metamodel.m_Derived_Logical.Select(x => x.Type).ToList();
                interface_Connectors.Update_Connector(Database, m_Type_1, m_Stereoype_1, Sys_GUID, Connector_GUID);
            }
            else
            {
                //Löschen
                this.Delete_Connector(Connector_GUID, repository, Database);
            }


        }

        #region Supplier GUID & Classfier



        /// <summary>
        /// Es wird die GUID des Suppliers des Connectors zurückgegeben 
        /// </summary>
        /// <param name="repository"></param>
        /// <returns></returns>
        public string Get_Connector_Supplier_GUID(EA.Repository repository, string GUID_Connector, Database Database)
        {
           // XML xML = new XML();
            //List<string> m_Supplier_GUID = new List<string>();

            /*    string SQL = "SELECT ea_guid FROM t_object WHERE Object_ID IN (SELECT End_Object_ID FROM t_connector WHERE ea_guid = '" + GUID_Connector + "');";
                string SQL_Dat = repository.SQLQuery(SQL);
                m_Supplier_GUID = xML.Xml_Read_Attribut("ea_guid", SQL_Dat);
                */
            /*   List<string> m_Supplier_GUID = new List<string>();
               string SQL = "SELECT ea_guid FROM t_object WHERE Object_ID IN (SELECT End_Object_ID FROM t_connector WHERE ea_guid = ?);";

               OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

               List<DB_Input[]> ee = new List<DB_Input[]>();
               List<string> help_id = new List<string>();
               help_id.Add(GUID_Connector);
               ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());

               OleDbType[] m_input_Type = { OleDbType.VarChar };
               Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
               string[] m_output = { "ea_guid" };

               List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

               if (m_ret3[0].Ret.Count > 1)
               {
                   m_Supplier_GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
               }
               else
               {
                   m_Supplier_GUID = (null);
               }


               if (m_Supplier_GUID != null)
               {
                   return (m_Supplier_GUID[0]);
               }
               else
               {
                   return (null);
               }
               */
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Supplier_GUID(Database, GUID_Connector, null, null));
        }
      
        /// <summary>
        /// Es wird die GUID des Classifiers des Suppliers des Connectors zurückgegeben 
        /// </summary>
        /// <param name="repository"></param>
        /// <returns></returns>
        public string Get_Connector_Supplier_Classifier_GUID(EA.Repository repository, string GUID_Connector, string t_object_row, Database Database)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Supplier_Classifier(Database, t_object_row, GUID_Connector));
            /*    XML xML = new XML();
                List<string> m_Supplier_GUID = new List<string>();
                string[] m_output = new string[1];

                string SQL = "";

                if(t_object_row != "Classifier")
                {
                    SQL = "SELECT " + t_object_row + " FROM t_object WHERE Object_ID IN (SELECT End_Object_ID FROM t_connector WHERE ea_guid = ?);";
                    m_output[0] = t_object_row;
                }
                else
                {
                    SQL = "SELECT ea_guid FROM t_object WHERE Object_ID IN(SELECT " + t_object_row + " FROM t_object WHERE Object_ID IN (SELECT End_Object_ID FROM t_connector WHERE ea_guid = ?));";
                    m_output[0] = "ea_guid";
                }

                //   string SQL_Dat = repository.SQLQuery(SQL);
                //   m_Supplier_GUID = xML.Xml_Read_Attribut(t_object_row, SQL_Dat);
                OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

                List<DB_Input[]> ee = new List<DB_Input[]>();
                List<string> help_id = new List<string>();
                help_id.Add(GUID_Connector);
                ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());

                OleDbType[] m_input_Type = { OleDbType.VarChar };
                Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);


                List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

                if (m_ret3[0].Ret.Count > 1)
                {
                    m_Supplier_GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
                }
                else
                {
                    m_Supplier_GUID = (null);
                }

                if (m_Supplier_GUID != null)
                {
                    if(m_Supplier_GUID[0].Length > 5)
                    {
                        return (m_Supplier_GUID[0]);
                    }
                    else
                    {
                        return (null);
                    } 
                }
                else
                {
                    return (null);
                }
                */
        }
        #endregion Supplier
        #region Client GUID & Classifier
        /// <summary>
        /// Es wird die GUID des Client des Connectors zurückgegeben 
        /// </summary>
        /// <param name="repository"></param>
        /// <returns></returns>
        public string Get_Connector_Client_GUID(EA.Repository repository, string GUID_Connector, Database Database, List<string> m_Type, List<string> m_Stereotype)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Client_GUID(Database, GUID_Connector, m_Type, m_Stereotype));
            /*   XML xML = new XML();
               List<string> m_Client_GUID = new List<string>();

               string SQL = "SELECT ea_guid FROM t_object WHERE Object_ID IN (SELECT Start_Object_ID FROM t_connector WHERE ea_guid = ?);";
           //    string SQL_Dat = repository.SQLQuery(SQL);
           //    m_Client_GUID = xML.Xml_Read_Attribut("ea_guid", SQL_Dat);


               OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

               List<DB_Input[]> ee = new List<DB_Input[]>();
               List<string> help_id = new List<string>();
               help_id.Add(GUID_Connector);
               ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());

               OleDbType[] m_input_Type = { OleDbType.VarChar };
               Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);
               string[] m_output = { "ea_guid" };

               List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

               if (m_ret3[0].Ret.Count > 1)
               {
                   m_Client_GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
               }
               else
               {
                   m_Client_GUID = (null);
               }


               if (m_Client_GUID != null)
               {
                   return (m_Client_GUID[0]);
               }
               else
               {
                   return (null);
               }
               */
        }
        /// <summary>
        /// Es wird die GUID des Classifiers des Client des Connectors zurückgegeben 
        /// </summary>
        /// <param name="repository"></param>
        /// <returns></returns>
        public string Get_Connector_Client_Classifier_GUID(EA.Repository repository, string GUID_Connector, string t_object_row, Database Database, List<string> m_Type, List<string> m_Stereotype)
        {
            Interface_Connectors interface_Connectors = new Interface_Connectors();
            return (interface_Connectors.Get_Client_GUID(Database, GUID_Connector, m_Type, m_Stereotype));
            /*  XML xML = new XML();
              List<string> m_Client_GUID = new List<string>();
              string[] m_output = new string[1];

              string SQL = "";

              if(t_object_row != "Classifier")
              {
                  SQL = "SELECT " + t_object_row + " FROM t_object WHERE Object_ID IN (SELECT Start_Object_ID FROM t_connector WHERE ea_guid = ?);";
                  m_output[0] = t_object_row;
              }
              else
              {
                  SQL = "SELECT ea_guid FROM t_object WHERE Object_ID IN(SELECT " + t_object_row + " FROM t_object WHERE Object_ID IN (SELECT Start_Object_ID FROM t_connector WHERE ea_guid = ?));";
                  m_output[0] = "ea_guid"; 
              }

              // string SQL_Dat = repository.SQLQuery(SQL);
              //  m_Client_GUID = xML.Xml_Read_Attribut(t_object_row, SQL_Dat);
              OleDbCommand SELECT1 = new OleDbCommand(SQL, (OleDbConnection)Database.oLEDB_Interface.dbConnection);

              List<DB_Input[]> ee = new List<DB_Input[]>();
              List<string> help_id = new List<string>();
              help_id.Add(GUID_Connector);
              ee.Add(help_id.Select(x => new DB_Input(-1, x)).ToArray());

              OleDbType[] m_input_Type = { OleDbType.VarChar };
              Database.oLEDB_Interface.Add_Parameters_Select(SELECT1, ee, m_input_Type);


              List<DB_Return> m_ret3 = Database.oLEDB_Interface.oleDB_SELECT_One_Table(SELECT1, m_output);

              if (m_ret3[0].Ret.Count > 1)
              {
                  m_Client_GUID = (m_ret3[0].Ret.GetRange(1, m_ret3[0].Ret.Count - 1).ToList().Select(x => x.ToString()).ToList());
              }
              else
              {
                  m_Client_GUID = (null);
              }


              if (m_Client_GUID != null)
              {
                  if (m_Client_GUID[0].Length > 5)
                  {
                      return (m_Client_GUID[0]);
                  }
                  else
                  {
                      return (null);
                  }
              }
              else
              {
                  return (null);
              }
              */
        }
        #endregion Client GUID


        #region InfoEx

        #endregion InfoEx
    }//end Repository_Connector

}//end namespace Requirement_Plugin